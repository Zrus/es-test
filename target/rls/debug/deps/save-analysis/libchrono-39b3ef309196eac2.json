{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15","program":"C:\\Users\\Zrus\\.rustup\\toolchains\\stable-i686-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","chrono","C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"clock\"","--cfg","feature=\"default\"","--cfg","feature=\"serde\"","--cfg","feature=\"std\"","--cfg","feature=\"time\"","-C","metadata=39b3ef309196eac2","-C","extra-filename=-39b3ef309196eac2","--out-dir","d:\\Workspace\\Rust\\es-test\\target\\rls\\debug\\deps","-L","dependency=d:\\Workspace\\Rust\\es-test\\target\\rls\\debug\\deps","--extern","num_integer=d:\\Workspace\\Rust\\es-test\\target\\rls\\debug\\deps\\libnum_integer-aaec90783e5cd881.rmeta","--extern","num_traits=d:\\Workspace\\Rust\\es-test\\target\\rls\\debug\\deps\\libnum_traits-77164c16ec2f7ac5.rmeta","--extern","serde=d:\\Workspace\\Rust\\es-test\\target\\rls\\debug\\deps\\libserde-c8520a919f8afeba.rmeta","--extern","time=d:\\Workspace\\Rust\\es-test\\target\\rls\\debug\\deps\\libtime-0dccfe50e6c5b05d.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\Zrus\\.rustup/toolchains/stable-i686-pc-windows-msvc"],"output":"d:\\Workspace\\Rust\\es-test\\target\\rls\\debug\\deps\\libchrono-39b3ef309196eac2.rmeta"},"prelude":{"crate_id":{"name":"chrono","disambiguator":[1074831043604412158,8153460548681879865]},"crate_root":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src","external_crates":[{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[17547299525433066937,6462703543472652821]}},{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[6764811272097449003,13681722573116367099]}},{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[9485826678459717252,15756974541460141494]}},{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[15954912595519161470,12922162993496933985]}},{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[5824572747488578400,18164785604033351576]}},{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[10331641369357162511,17836984904787579268]}},{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[8495357030570666042,9830701870303456689]}},{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[9657771536831955996,2892192969278695320]}},{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[12375917788909833983,1997691704544372736]}},{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[16952125311933509182,18402636855086965869]}},{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","num":11,"id":{"name":"hashbrown","disambiguator":[10744862195025581238,6478452609884575256]}},{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","num":12,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[8143783028888645125,5443838079021418384]}},{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[2060411395260400816,11913745625441100273]}},{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","num":14,"id":{"name":"time","disambiguator":[15314507789842980598,4869857598847372656]}},{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","num":15,"id":{"name":"winapi","disambiguator":[14479256338682805069,2955013210560714084]}},{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","num":16,"id":{"name":"num_integer","disambiguator":[14971229327355867848,8992179023961252082]}},{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","num":17,"id":{"name":"num_traits","disambiguator":[16254062875512551972,7392369631303827764]}},{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","num":18,"id":{"name":"serde","disambiguator":[6554293757877357723,6094940800161419408]}},{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","num":19,"id":{"name":"serde_derive","disambiguator":[10826663184393962831,15926678241897306731]}}],"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":76,"byte_end":55293,"line_start":4,"line_end":1518,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":14,"index":298},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":21519,"byte_end":21527,"line_start":469,"line_end":469,"column_start":18,"column_end":26},"alias_span":null,"name":"Duration","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2158},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":21545,"byte_end":21549,"line_start":471,"line_end":471,"column_start":16,"column_end":20},"alias_span":null,"name":"Date","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":895},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":21551,"byte_end":21559,"line_start":471,"line_end":471,"column_start":22,"column_end":30},"alias_span":null,"name":"MAX_DATE","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":894},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":21561,"byte_end":21569,"line_start":471,"line_end":471,"column_start":32,"column_end":40},"alias_span":null,"name":"MIN_DATE","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2189},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":21673,"byte_end":21681,"line_start":474,"line_end":474,"column_start":20,"column_end":28},"alias_span":null,"name":"DateTime","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2165},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":21683,"byte_end":21696,"line_start":474,"line_end":474,"column_start":30,"column_end":43},"alias_span":null,"name":"SecondsFormat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1045},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":21698,"byte_end":21710,"line_start":474,"line_end":474,"column_start":45,"column_end":57},"alias_span":null,"name":"MAX_DATETIME","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1044},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":21712,"byte_end":21724,"line_start":474,"line_end":474,"column_start":59,"column_end":71},"alias_span":null,"name":"MIN_DATETIME","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2415},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":21823,"byte_end":21833,"line_start":478,"line_end":478,"column_start":18,"column_end":28},"alias_span":null,"name":"ParseError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1448},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":21835,"byte_end":21846,"line_start":478,"line_end":478,"column_start":30,"column_end":41},"alias_span":null,"name":"ParseResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2113},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":21883,"byte_end":21890,"line_start":480,"line_end":480,"column_start":17,"column_end":24},"alias_span":null,"name":"IsoWeek","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1970},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":21892,"byte_end":21901,"line_start":480,"line_end":480,"column_start":26,"column_end":35},"alias_span":null,"name":"NaiveDate","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2043},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":21903,"byte_end":21916,"line_start":480,"line_end":480,"column_start":37,"column_end":50},"alias_span":null,"name":"NaiveDateTime","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2133},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":21918,"byte_end":21927,"line_start":480,"line_end":480,"column_start":52,"column_end":61},"alias_span":null,"name":"NaiveTime","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1952},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":21990,"byte_end":21995,"line_start":483,"line_end":483,"column_start":17,"column_end":22},"alias_span":null,"name":"Local","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1937},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":22032,"byte_end":22043,"line_start":485,"line_end":485,"column_start":18,"column_end":29},"alias_span":null,"name":"FixedOffset","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1903},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":22045,"byte_end":22056,"line_start":485,"line_end":485,"column_start":31,"column_end":42},"alias_span":null,"name":"LocalResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":100},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":22058,"byte_end":22064,"line_start":485,"line_end":485,"column_start":44,"column_end":50},"alias_span":null,"name":"Offset","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":102},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":22066,"byte_end":22074,"line_start":485,"line_end":485,"column_start":52,"column_end":60},"alias_span":null,"name":"TimeZone","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1959},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":22076,"byte_end":22079,"line_start":485,"line_end":485,"column_start":62,"column_end":65},"alias_span":null,"name":"Utc","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1766},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":22098,"byte_end":22111,"line_start":486,"line_end":486,"column_start":17,"column_end":30},"alias_span":null,"name":"DurationRound","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2516},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":22113,"byte_end":22126,"line_start":486,"line_end":486,"column_start":32,"column_end":45},"alias_span":null,"name":"RoundingError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1758},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":22128,"byte_end":22139,"line_start":486,"line_end":486,"column_start":47,"column_end":58},"alias_span":null,"name":"SubsecRound","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2158},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":22278,"byte_end":22282,"line_start":491,"line_end":491,"column_start":13,"column_end":17},"alias_span":null,"name":"Date","value":"","parent":{"krate":0,"index":38}},{"kind":"Use","ref_id":{"krate":0,"index":1952},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":22348,"byte_end":22353,"line_start":494,"line_end":494,"column_start":13,"column_end":18},"alias_span":null,"name":"Local","value":"","parent":{"krate":0,"index":38}},{"kind":"Use","ref_id":{"krate":0,"index":1758},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":22472,"byte_end":22483,"line_start":499,"line_end":499,"column_start":13,"column_end":24},"alias_span":null,"name":"SubsecRound","value":"","parent":{"krate":0,"index":38}},{"kind":"Use","ref_id":{"krate":0,"index":2189},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":22520,"byte_end":22528,"line_start":501,"line_end":501,"column_start":14,"column_end":22},"alias_span":null,"name":"DateTime","value":"","parent":{"krate":0,"index":38}},{"kind":"Use","ref_id":{"krate":0,"index":2165},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":22530,"byte_end":22543,"line_start":501,"line_end":501,"column_start":24,"column_end":37},"alias_span":null,"name":"SecondsFormat","value":"","parent":{"krate":0,"index":38}},{"kind":"Use","ref_id":{"krate":0,"index":1871},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":22581,"byte_end":22589,"line_start":503,"line_end":503,"column_start":14,"column_end":22},"alias_span":null,"name":"Datelike","value":"","parent":{"krate":0,"index":38}},{"kind":"Use","ref_id":{"krate":0,"index":2578},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":22591,"byte_end":22596,"line_start":503,"line_end":503,"column_start":24,"column_end":29},"alias_span":null,"name":"Month","value":"","parent":{"krate":0,"index":38}},{"kind":"Use","ref_id":{"krate":0,"index":1890},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":22598,"byte_end":22606,"line_start":503,"line_end":503,"column_start":31,"column_end":39},"alias_span":null,"name":"Timelike","value":"","parent":{"krate":0,"index":38}},{"kind":"Use","ref_id":{"krate":0,"index":2534},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":22608,"byte_end":22615,"line_start":503,"line_end":503,"column_start":41,"column_end":48},"alias_span":null,"name":"Weekday","value":"","parent":{"krate":0,"index":38}},{"kind":"Use","ref_id":{"krate":0,"index":1937},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":22653,"byte_end":22664,"line_start":505,"line_end":505,"column_start":14,"column_end":25},"alias_span":null,"name":"FixedOffset","value":"","parent":{"krate":0,"index":38}},{"kind":"Use","ref_id":{"krate":0,"index":1959},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":22666,"byte_end":22669,"line_start":505,"line_end":505,"column_start":27,"column_end":30},"alias_span":null,"name":"Utc","value":"","parent":{"krate":0,"index":38}},{"kind":"Use","ref_id":{"krate":0,"index":1970},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":22707,"byte_end":22716,"line_start":507,"line_end":507,"column_start":14,"column_end":23},"alias_span":null,"name":"NaiveDate","value":"","parent":{"krate":0,"index":38}},{"kind":"Use","ref_id":{"krate":0,"index":2043},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":22718,"byte_end":22731,"line_start":507,"line_end":507,"column_start":25,"column_end":38},"alias_span":null,"name":"NaiveDateTime","value":"","parent":{"krate":0,"index":38}},{"kind":"Use","ref_id":{"krate":0,"index":2133},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":22733,"byte_end":22742,"line_start":507,"line_end":507,"column_start":40,"column_end":49},"alias_span":null,"name":"NaiveTime","value":"","parent":{"krate":0,"index":38}},{"kind":"Use","ref_id":{"krate":0,"index":100},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":22780,"byte_end":22786,"line_start":509,"line_end":509,"column_start":14,"column_end":20},"alias_span":null,"name":"Offset","value":"","parent":{"krate":0,"index":38}},{"kind":"Use","ref_id":{"krate":0,"index":102},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":22788,"byte_end":22796,"line_start":509,"line_end":509,"column_start":22,"column_end":30},"alias_span":null,"name":"TimeZone","value":"","parent":{"krate":0,"index":38}},{"kind":"Use","ref_id":{"krate":0,"index":1937},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":75065,"byte_end":75076,"line_start":469,"line_end":469,"column_start":22,"column_end":33},"alias_span":null,"name":"FixedOffset","value":"","parent":{"krate":0,"index":67}},{"kind":"Use","ref_id":{"krate":0,"index":1952},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":75125,"byte_end":75130,"line_start":471,"line_end":471,"column_start":22,"column_end":27},"alias_span":null,"name":"Local","value":"","parent":{"krate":0,"index":67}},{"kind":"Use","ref_id":{"krate":0,"index":1959},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":75151,"byte_end":75154,"line_start":472,"line_end":472,"column_start":20,"column_end":23},"alias_span":null,"name":"Utc","value":"","parent":{"krate":0,"index":67}},{"kind":"Use","ref_id":{"krate":0,"index":1970},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":23378,"byte_end":23387,"line_start":537,"line_end":537,"column_start":26,"column_end":35},"alias_span":null,"name":"NaiveDate","value":"","parent":{"krate":0,"index":255}},{"kind":"Use","ref_id":{"krate":0,"index":297},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":23389,"byte_end":23397,"line_start":537,"line_end":537,"column_start":37,"column_end":45},"alias_span":null,"name":"MAX_DATE","value":"","parent":{"krate":0,"index":255}},{"kind":"Use","ref_id":{"krate":0,"index":296},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":23399,"byte_end":23407,"line_start":537,"line_end":537,"column_start":47,"column_end":55},"alias_span":null,"name":"MIN_DATE","value":"","parent":{"krate":0,"index":255}},{"kind":"Use","ref_id":{"krate":0,"index":2043},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":23560,"byte_end":23573,"line_start":541,"line_end":541,"column_start":30,"column_end":43},"alias_span":null,"name":"NaiveDateTime","value":"","parent":{"krate":0,"index":255}},{"kind":"Use","ref_id":{"krate":0,"index":465},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":23575,"byte_end":23587,"line_start":541,"line_end":541,"column_start":45,"column_end":57},"alias_span":null,"name":"MAX_DATETIME","value":"","parent":{"krate":0,"index":255}},{"kind":"Use","ref_id":{"krate":0,"index":464},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":23589,"byte_end":23601,"line_start":541,"line_end":541,"column_start":59,"column_end":71},"alias_span":null,"name":"MIN_DATETIME","value":"","parent":{"krate":0,"index":255}},{"kind":"Use","ref_id":{"krate":0,"index":2113},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":23631,"byte_end":23638,"line_start":542,"line_end":542,"column_start":28,"column_end":35},"alias_span":null,"name":"IsoWeek","value":"","parent":{"krate":0,"index":255}},{"kind":"Use","ref_id":{"krate":0,"index":2133},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":23664,"byte_end":23673,"line_start":543,"line_end":543,"column_start":25,"column_end":34},"alias_span":null,"name":"NaiveTime","value":"","parent":{"krate":0,"index":255}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":24272,"byte_end":24273,"line_start":559,"line_end":559,"column_start":41,"column_end":42},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":866}},{"kind":"Use","ref_id":{"krate":0,"index":1620},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":502024,"byte_end":502029,"line_start":42,"line_end":42,"column_start":22,"column_end":27},"alias_span":null,"name":"parse","value":"","parent":{"krate":0,"index":1410}},{"kind":"Use","ref_id":{"krate":0,"index":2456},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":502053,"byte_end":502059,"line_start":43,"line_end":43,"column_start":23,"column_end":29},"alias_span":null,"name":"Parsed","value":"","parent":{"krate":0,"index":1410}},{"kind":"Use","ref_id":{"krate":0,"index":2487},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":502085,"byte_end":502098,"line_start":44,"line_end":44,"column_start":25,"column_end":38},"alias_span":null,"name":"StrftimeItems","value":"","parent":{"krate":0,"index":1410}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":24272,"byte_end":24273,"line_start":559,"line_end":559,"column_start":41,"column_end":42},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":1780}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":76,"byte_end":55293,"line_start":4,"line_end":1518,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":14},{"krate":0,"index":19},{"krate":0,"index":22},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":34},{"krate":0,"index":38},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":67},{"krate":0,"index":255},{"krate":0,"index":868},{"krate":0,"index":1003},{"krate":0,"index":1410},{"krate":0,"index":1746},{"krate":0,"index":1780},{"krate":0,"index":1782},{"krate":0,"index":1791},{"krate":0,"index":1793},{"krate":0,"index":1797},{"krate":0,"index":2534},{"krate":0,"index":2567},{"krate":0,"index":2568},{"krate":0,"index":2564},{"krate":0,"index":2565},{"krate":0,"index":2563},{"krate":0,"index":2561},{"krate":0,"index":2559},{"krate":0,"index":2556},{"krate":0,"index":1801},{"krate":0,"index":1808},{"krate":0,"index":1810},{"krate":0,"index":1813},{"krate":0,"index":2570},{"krate":0,"index":2576},{"krate":0,"index":2572},{"krate":0,"index":2573},{"krate":0,"index":1814},{"krate":0,"index":1816},{"krate":0,"index":2578},{"krate":0,"index":2626},{"krate":0,"index":2627},{"krate":0,"index":2623},{"krate":0,"index":2624},{"krate":0,"index":2622},{"krate":0,"index":2620},{"krate":0,"index":2618},{"krate":0,"index":2615},{"krate":0,"index":1838},{"krate":0,"index":1843},{"krate":0,"index":2629},{"krate":0,"index":2635},{"krate":0,"index":2631},{"krate":0,"index":2632},{"krate":0,"index":1847},{"krate":0,"index":1849},{"krate":0,"index":1871},{"krate":0,"index":1890},{"krate":0,"index":1901}],"decl_id":null,"docs":" # Chrono: Date and Time for Rust","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":19331,"byte_end":19353,"line_start":409,"line_end":409,"column_start":1,"column_end":23}},{"value":"deny(missing_debug_implementations)","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":19354,"byte_end":19393,"line_start":410,"line_end":410,"column_start":1,"column_end":40}},{"value":"deny(dead_code)","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":19394,"byte_end":19413,"line_start":411,"line_end":411,"column_start":1,"column_end":20}},{"value":"allow(unknown_lints)","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":19463,"byte_end":19487,"line_start":413,"line_end":413,"column_start":1,"column_end":25}}]},{"kind":"Mod","id":{"krate":0,"index":38},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":22234,"byte_end":22241,"line_start":489,"line_end":489,"column_start":9,"column_end":16},"name":"prelude","qualname":"::prelude","value":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":45},{"krate":0,"index":50},{"krate":0,"index":53},{"krate":0,"index":57}],"decl_id":null,"docs":" A convenience module appropriate for glob imports (`use chrono::prelude::*;`).\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":67},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"offset","qualname":"::offset","value":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","parent":null,"children":[{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":74},{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":1903},{"krate":0,"index":1934},{"krate":0,"index":1928},{"krate":0,"index":1930},{"krate":0,"index":1925},{"krate":0,"index":1923},{"krate":0,"index":1918},{"krate":0,"index":1920},{"krate":0,"index":1914},{"krate":0,"index":82},{"krate":0,"index":90},{"krate":0,"index":97},{"krate":0,"index":100},{"krate":0,"index":102},{"krate":0,"index":127},{"krate":0,"index":186},{"krate":0,"index":222},{"krate":0,"index":252},{"krate":0,"index":253},{"krate":0,"index":254}],"decl_id":null,"docs":" The time zone, which calculates offsets from the local time to UTC.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1905},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":58170,"byte_end":58174,"line_start":33,"line_end":33,"column_start":5,"column_end":9},"name":"None","qualname":"::offset::LocalResult::None","value":"LocalResult::None","parent":{"krate":0,"index":1903},"children":[],"decl_id":null,"docs":" Given local time representation is invalid.\n This can occur when, for example, the positive timezone transition.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1907},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":58248,"byte_end":58254,"line_start":35,"line_end":35,"column_start":5,"column_end":11},"name":"Single","qualname":"::offset::LocalResult::Single","value":"LocalResult::Single(T)","parent":{"krate":0,"index":1903},"children":[],"decl_id":null,"docs":" Given local time representation has a single unique result.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1910},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":58420,"byte_end":58429,"line_start":38,"line_end":38,"column_start":5,"column_end":14},"name":"Ambiguous","qualname":"::offset::LocalResult::Ambiguous","value":"LocalResult::Ambiguous(T, T)","parent":{"krate":0,"index":1903},"children":[],"decl_id":null,"docs":" Given local time representation has multiple results and thus ambiguous.\n This can occur when, for example, the negative timezone transition.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1903},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":58021,"byte_end":58032,"line_start":30,"line_end":30,"column_start":10,"column_end":21},"name":"LocalResult","qualname":"::offset::LocalResult","value":"LocalResult::{None, Single, Ambiguous}","parent":null,"children":[{"krate":0,"index":1905},{"krate":0,"index":1907},{"krate":0,"index":1910}],"decl_id":null,"docs":" The conversion result from the local time to the timezone-aware datetime types.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":58579,"byte_end":58585,"line_start":43,"line_end":43,"column_start":12,"column_end":18},"name":"single","qualname":"<LocalResult<T>>::single","value":"fn (self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns `Some` only when the conversion result is unique, or `None` otherwise.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":85},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":58813,"byte_end":58821,"line_start":51,"line_end":51,"column_start":12,"column_end":20},"name":"earliest","qualname":"<LocalResult<T>>::earliest","value":"fn (self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns `Some` for the earliest possible conversion result, or `None` if none.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":59078,"byte_end":59084,"line_start":59,"line_end":59,"column_start":12,"column_end":18},"name":"latest","qualname":"<LocalResult<T>>::latest","value":"fn (self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns `Some` for the latest possible conversion result, or `None` if none.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":87},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":59331,"byte_end":59334,"line_start":67,"line_end":67,"column_start":12,"column_end":15},"name":"map","qualname":"<LocalResult<T>>::map","value":"fn <U, F> (self, mut f: F) -> LocalResult<U>","parent":null,"children":[],"decl_id":null,"docs":" Maps a `LocalResult<T>` into `LocalResult<U>` with given function.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":59909,"byte_end":59917,"line_start":82,"line_end":82,"column_start":12,"column_end":20},"name":"and_time","qualname":"<LocalResult<Date<Tz>>>::and_time","value":"fn (self, time: NaiveTime) -> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date and given `NaiveTime`.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":59888,"byte_end":59897,"line_start":81,"line_end":81,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":93},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":60412,"byte_end":60423,"line_start":96,"line_end":96,"column_start":12,"column_end":23},"name":"and_hms_opt","qualname":"<LocalResult<Date<Tz>>>::and_hms_opt","value":"fn (self, hour: u32, min: u32, sec: u32) -> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute and second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":60391,"byte_end":60400,"line_start":95,"line_end":95,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":61043,"byte_end":61060,"line_start":111,"line_end":111,"column_start":12,"column_end":29},"name":"and_hms_milli_opt","qualname":"<LocalResult<Date<Tz>>>::and_hms_milli_opt","value":"fn (self, hour: u32, min: u32, sec: u32, milli: u32) -> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\n The millisecond part can exceed 1,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":61022,"byte_end":61031,"line_start":110,"line_end":110,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":95},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":61759,"byte_end":61776,"line_start":132,"line_end":132,"column_start":12,"column_end":29},"name":"and_hms_micro_opt","qualname":"<LocalResult<Date<Tz>>>::and_hms_micro_opt","value":"fn (self, hour: u32, min: u32, sec: u32, micro: u32) -> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\n The microsecond part can exceed 1,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":61738,"byte_end":61747,"line_start":131,"line_end":131,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":62477,"byte_end":62493,"line_start":153,"line_end":153,"column_start":12,"column_end":28},"name":"and_hms_nano_opt","qualname":"<LocalResult<Date<Tz>>>::and_hms_nano_opt","value":"fn (self, hour: u32, min: u32, sec: u32, nano: u32) -> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\n The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":62456,"byte_end":62465,"line_start":152,"line_end":152,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":99},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":62981,"byte_end":62987,"line_start":171,"line_end":171,"column_start":12,"column_end":18},"name":"unwrap","qualname":"<LocalResult<T>>::unwrap","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the single unique conversion result, or panics accordingly.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":100},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":63342,"byte_end":63348,"line_start":183,"line_end":183,"column_start":11,"column_end":17},"name":"Offset","qualname":"::offset::Offset","value":"Offset: Sized + Clone + fmt::Debug","parent":null,"children":[{"krate":0,"index":101}],"decl_id":null,"docs":" The offset from the local time to UTC.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":63454,"byte_end":63457,"line_start":185,"line_end":185,"column_start":8,"column_end":11},"name":"fix","qualname":"::offset::Offset::fix","value":"fn (&self) -> FixedOffset","parent":{"krate":0,"index":100},"children":[],"decl_id":null,"docs":" Returns the fixed offset from UTC to the local time stored.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":102},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":63656,"byte_end":63664,"line_start":192,"line_end":192,"column_start":11,"column_end":19},"name":"TimeZone","qualname":"::offset::TimeZone","value":"TimeZone: Sized + Clone","parent":null,"children":[{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":121},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":126}],"decl_id":null,"docs":" The time zone.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":103},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":63887,"byte_end":63893,"line_start":196,"line_end":196,"column_start":10,"column_end":16},"name":"Offset","qualname":"::offset::TimeZone::Offset","value":"type Offset: Offset;","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" An associated offset type.\n This type is used to store the actual offset in date and time types.\n The original `TimeZone` value can be recovered via `TimeZone::from_offset`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":64510,"byte_end":64513,"line_start":213,"line_end":213,"column_start":8,"column_end":11},"name":"ymd","qualname":"::offset::TimeZone::ymd","value":"fn (&self, year: i32, month: u32, day: u32) -> Date<Self>","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Makes a new `Date` from year, month, day and the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":105},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":65329,"byte_end":65336,"line_start":233,"line_end":233,"column_start":8,"column_end":15},"name":"ymd_opt","qualname":"::offset::TimeZone::ymd_opt","value":"fn (&self, year: i32, month: u32, day: u32) -> LocalResult<Date<Self>>","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Makes a new `Date` from year, month, day and the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":66185,"byte_end":66187,"line_start":255,"line_end":255,"column_start":8,"column_end":10},"name":"yo","qualname":"::offset::TimeZone::yo","value":"fn (&self, year: i32, ordinal: u32) -> Date<Self>","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":107},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":66738,"byte_end":66744,"line_start":266,"line_end":266,"column_start":8,"column_end":14},"name":"yo_opt","qualname":"::offset::TimeZone::yo_opt","value":"fn (&self, year: i32, ordinal: u32) -> LocalResult<Date<Self>>","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":67722,"byte_end":67728,"line_start":290,"line_end":290,"column_start":8,"column_end":14},"name":"isoywd","qualname":"::offset::TimeZone::isoywd","value":"fn (&self, year: i32, week: u32, weekday: Weekday) -> Date<Self>","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and\n the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\n The resulting `Date` may have a different year from the input year.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":109},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":68419,"byte_end":68429,"line_start":303,"line_end":303,"column_start":8,"column_end":18},"name":"isoywd_opt","qualname":"::offset::TimeZone::isoywd_opt","value":"fn (&self, year: i32, week: u32, weekday: Weekday) -> LocalResult<Date<Self>>","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and\n the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\n The resulting `Date` may have a different year from the input year.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":69254,"byte_end":69263,"line_start":324,"line_end":324,"column_start":8,"column_end":17},"name":"timestamp","qualname":"::offset::TimeZone::timestamp","value":"fn (&self, secs: i64, nsecs: u32) -> DateTime<Self>","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the number of non-leap seconds\n since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\")\n and the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":111},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":69746,"byte_end":69759,"line_start":334,"line_end":334,"column_start":8,"column_end":21},"name":"timestamp_opt","qualname":"::offset::TimeZone::timestamp_opt","value":"fn (&self, secs: i64, nsecs: u32) -> LocalResult<DateTime<Self>>","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the number of non-leap seconds\n since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\")\n and the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":70499,"byte_end":70515,"line_start":354,"line_end":354,"column_start":8,"column_end":24},"name":"timestamp_millis","qualname":"::offset::TimeZone::timestamp_millis","value":"fn (&self, millis: i64) -> DateTime<Self>","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the number of non-leap milliseconds\n since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":113},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":71246,"byte_end":71266,"line_start":375,"line_end":375,"column_start":8,"column_end":28},"name":"timestamp_millis_opt","qualname":"::offset::TimeZone::timestamp_millis_opt","value":"fn (&self, millis: i64) -> LocalResult<DateTime<Self>>","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the number of non-leap milliseconds\n since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":71968,"byte_end":71983,"line_start":397,"line_end":397,"column_start":8,"column_end":23},"name":"timestamp_nanos","qualname":"::offset::TimeZone::timestamp_nanos","value":"fn (&self, nanos: i64) -> DateTime<Self>","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the number of non-leap nanoseconds\n since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":115},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":72770,"byte_end":72787,"line_start":416,"line_end":416,"column_start":8,"column_end":25},"name":"datetime_from_str","qualname":"::offset::TimeZone::datetime_from_str","value":"fn (&self, s: &str, fmt: &str) -> ParseResult<DateTime<Self>>","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and\n returns a `DateTime` with the current offset.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":73058,"byte_end":73069,"line_start":423,"line_end":423,"column_start":8,"column_end":19},"name":"from_offset","qualname":"::offset::TimeZone::from_offset","value":"fn (offset: &Self::Offset) -> Self","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Reconstructs the time zone from the offset.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":117},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":73181,"byte_end":73203,"line_start":426,"line_end":426,"column_start":8,"column_end":30},"name":"offset_from_local_date","qualname":"::offset::TimeZone::offset_from_local_date","value":"fn (&self, local: &NaiveDate) -> LocalResult<Self::Offset>","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Creates the offset(s) for given local `NaiveDate` if possible.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":73343,"byte_end":73369,"line_start":429,"line_end":429,"column_start":8,"column_end":34},"name":"offset_from_local_datetime","qualname":"::offset::TimeZone::offset_from_local_datetime","value":"fn (&self, local: &NaiveDateTime) -> LocalResult<Self::Offset>","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Creates the offset(s) for given local `NaiveDateTime` if possible.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":119},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":73519,"byte_end":73534,"line_start":432,"line_end":432,"column_start":8,"column_end":23},"name":"from_local_date","qualname":"::offset::TimeZone::from_local_date","value":"fn (&self, local: &NaiveDate) -> LocalResult<Date<Self>>","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Converts the local `NaiveDate` to the timezone-aware `Date` if possible.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":121},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":73886,"byte_end":73905,"line_start":440,"line_end":440,"column_start":8,"column_end":27},"name":"from_local_datetime","qualname":"::offset::TimeZone::from_local_datetime","value":"fn (&self, local: &NaiveDateTime) -> LocalResult<DateTime<Self>>","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Converts the local `NaiveDateTime` to the timezone-aware `DateTime` if possible.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":123},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":74179,"byte_end":74199,"line_start":446,"line_end":446,"column_start":8,"column_end":28},"name":"offset_from_utc_date","qualname":"::offset::TimeZone::offset_from_utc_date","value":"fn (&self, utc: &NaiveDate) -> Self::Offset","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Creates the offset for given UTC `NaiveDate`. This cannot fail.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":74325,"byte_end":74349,"line_start":449,"line_end":449,"column_start":8,"column_end":32},"name":"offset_from_utc_datetime","qualname":"::offset::TimeZone::offset_from_utc_datetime","value":"fn (&self, utc: &NaiveDateTime) -> Self::Offset","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Creates the offset for given UTC `NaiveDateTime`. This cannot fail.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":125},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":74556,"byte_end":74569,"line_start":453,"line_end":453,"column_start":8,"column_end":21},"name":"from_utc_date","qualname":"::offset::TimeZone::from_utc_date","value":"fn (&self, utc: &NaiveDate) -> Date<Self>","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Converts the UTC `NaiveDate` to the local time.\n The UTC is continuous and thus this cannot fail (but can give the duplicate local time).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":74842,"byte_end":74859,"line_start":459,"line_end":459,"column_start":8,"column_end":25},"name":"from_utc_datetime","qualname":"::offset::TimeZone::from_utc_datetime","value":"fn (&self, utc: &NaiveDateTime) -> DateTime<Self>","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Converts the UTC `NaiveDateTime` to the local time.\n The UTC is continuous and thus this cannot fail (but can give the duplicate local time).\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1937},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":78187,"byte_end":78198,"line_start":23,"line_end":23,"column_start":12,"column_end":23},"name":"FixedOffset","qualname":"::offset::fixed::FixedOffset","value":"FixedOffset {  }","parent":null,"children":[{"krate":0,"index":1938}],"decl_id":null,"docs":" The time zone with fixed offset, from UTC-23:59:59 to UTC+23:59:59.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":145},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":78802,"byte_end":78806,"line_start":42,"line_end":42,"column_start":12,"column_end":16},"name":"east","qualname":"<FixedOffset>::east","value":"fn (secs: i32) -> FixedOffset","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.\n The negative `secs` means the Western Hemisphere.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":146},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":79141,"byte_end":79149,"line_start":50,"line_end":50,"column_start":12,"column_end":20},"name":"east_opt","qualname":"<FixedOffset>::east_opt","value":"fn (secs: i32) -> Option<FixedOffset>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.\n The negative `secs` means the Western Hemisphere.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":147},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":79891,"byte_end":79895,"line_start":72,"line_end":72,"column_start":12,"column_end":16},"name":"west","qualname":"<FixedOffset>::west","value":"fn (secs: i32) -> FixedOffset","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.\n The negative `secs` means the Eastern Hemisphere.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":80230,"byte_end":80238,"line_start":80,"line_end":80,"column_start":12,"column_end":20},"name":"west_opt","qualname":"<FixedOffset>::west_opt","value":"fn (secs: i32) -> Option<FixedOffset>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.\n The negative `secs` means the Eastern Hemisphere.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":149},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":80537,"byte_end":80552,"line_start":90,"line_end":90,"column_start":12,"column_end":27},"name":"local_minus_utc","qualname":"<FixedOffset>::local_minus_utc","value":"fn (&self) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of seconds to add to convert from UTC to the local time.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":80516,"byte_end":80525,"line_start":89,"line_end":89,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":80714,"byte_end":80729,"line_start":96,"line_end":96,"column_start":12,"column_end":27},"name":"utc_minus_local","qualname":"<FixedOffset>::utc_minus_local","value":"fn (&self) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of seconds to add to convert from the local time to UTC.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":80693,"byte_end":80702,"line_start":95,"line_end":95,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1952},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\local.rs","byte_start":88160,"byte_end":88165,"line_start":90,"line_end":90,"column_start":12,"column_end":17},"name":"Local","qualname":"::offset::local::Local","value":"","parent":null,"children":[],"decl_id":null,"docs":" The local timescale. This is implemented via the standard `time` crate.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":206},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\local.rs","byte_start":88256,"byte_end":88261,"line_start":94,"line_end":94,"column_start":12,"column_end":17},"name":"today","qualname":"<Local>::today","value":"fn () -> Date<Local>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `Date` which corresponds to the current date.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":207},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\local.rs","byte_start":88487,"byte_end":88490,"line_start":100,"line_end":100,"column_start":12,"column_end":15},"name":"now","qualname":"<Local>::now","value":"fn () -> DateTime<Local>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `DateTime` which corresponds to the current date.\n","sig":null,"attributes":[{"value":"cfg(not\n      (all\n       (target_arch = \"wasm32\", not (target_os = \"wasi\"), feature =\n        \"wasmbind\")))","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\local.rs","byte_start":88388,"byte_end":88475,"line_start":99,"line_end":99,"column_start":5,"column_end":92}}]},{"kind":"Struct","id":{"krate":0,"index":1959},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\utc.rs","byte_start":94397,"byte_end":94400,"line_start":36,"line_end":36,"column_start":12,"column_end":15},"name":"Utc","qualname":"::offset::utc::Utc","value":"","parent":null,"children":[],"decl_id":null,"docs":" The UTC time zone. This is the most efficient time zone when you don't need the local time.\n It is also used as an offset (which is also a dummy type).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":237},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\utc.rs","byte_start":94515,"byte_end":94520,"line_start":41,"line_end":41,"column_start":12,"column_end":17},"name":"today","qualname":"<Utc>::today","value":"fn () -> Date<Utc>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `Date` which corresponds to the current date.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":238},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\utc.rs","byte_start":94742,"byte_end":94745,"line_start":47,"line_end":47,"column_start":12,"column_end":15},"name":"now","qualname":"<Utc>::now","value":"fn () -> DateTime<Utc>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `DateTime` which corresponds to the current date.\n","sig":null,"attributes":[{"value":"cfg(not\n      (all\n       (target_arch = \"wasm32\", not (target_os = \"wasi\"), feature =\n        \"wasmbind\")))","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\utc.rs","byte_start":94643,"byte_end":94730,"line_start":46,"line_end":46,"column_start":5,"column_end":92}}]},{"kind":"Mod","id":{"krate":0,"index":255},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":23009,"byte_end":23014,"line_start":524,"line_end":524,"column_start":9,"column_end":14},"name":"naive","qualname":"::naive","value":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":256},{"krate":0,"index":423},{"krate":0,"index":655},{"krate":0,"index":735},{"krate":0,"index":748},{"krate":0,"index":856},{"krate":0,"index":860},{"krate":0,"index":864},{"krate":0,"index":865},{"krate":0,"index":866}],"decl_id":null,"docs":" Date and time types unconcerned with timezones.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1970},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":100417,"byte_end":100426,"line_start":99,"line_end":99,"column_start":12,"column_end":21},"name":"NaiveDate","qualname":"::naive::date::NaiveDate","value":"NaiveDate {  }","parent":null,"children":[{"krate":0,"index":1971}],"decl_id":null,"docs":" ISO 8601 calendar date without timezone.\n Allows for every [proleptic Gregorian date](#calendar-date)\n from Jan 1, 262145 BCE to Dec 31, 262143 CE.\n Also supports the conversion from ISO 8601 ordinal and week date.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":296},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":100545,"byte_end":100553,"line_start":104,"line_end":104,"column_start":11,"column_end":19},"name":"MIN_DATE","qualname":"::naive::date::MIN_DATE","value":"NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" The minimum possible `NaiveDate` (January 1, 262145 BCE).\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":297},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":100703,"byte_end":100711,"line_start":106,"line_end":106,"column_start":11,"column_end":19},"name":"MAX_DATE","qualname":"::naive::date::MAX_DATE","value":"NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" The maximum possible `NaiveDate` (December 31, 262143 CE).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":301},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":103075,"byte_end":103083,"line_start":172,"line_end":172,"column_start":12,"column_end":20},"name":"from_ymd","qualname":"<NaiveDate>::from_ymd","value":"fn (year: i32, month: u32, day: u32) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [calendar date](#calendar-date)\n (year, month and day).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":302},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":103934,"byte_end":103946,"line_start":195,"line_end":195,"column_start":12,"column_end":24},"name":"from_ymd_opt","qualname":"<NaiveDate>::from_ymd_opt","value":"fn (year: i32, month: u32, day: u32) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [calendar date](#calendar-date)\n (year, month and day).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":303},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":104840,"byte_end":104847,"line_start":220,"line_end":220,"column_start":12,"column_end":19},"name":"from_yo","qualname":"<NaiveDate>::from_yo","value":"fn (year: i32, ordinal: u32) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [ordinal date](#ordinal-date)\n (year and day of the year).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":304},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":105717,"byte_end":105728,"line_start":244,"line_end":244,"column_start":12,"column_end":23},"name":"from_yo_opt","qualname":"<NaiveDate>::from_yo_opt","value":"fn (year: i32, ordinal: u32) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [ordinal date](#ordinal-date)\n (year and day of the year).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":305},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":106734,"byte_end":106745,"line_start":270,"line_end":270,"column_start":12,"column_end":23},"name":"from_isoywd","qualname":"<NaiveDate>::from_isoywd","value":"fn (year: i32, week: u32, weekday: Weekday) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [ISO week date](#week-date)\n (year, week number and day of the week).\n The resulting `NaiveDate` may have a different year from the input year.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":306},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":109108,"byte_end":109123,"line_start":318,"line_end":318,"column_start":12,"column_end":27},"name":"from_isoywd_opt","qualname":"<NaiveDate>::from_isoywd_opt","value":"fn (year: i32, week: u32, weekday: Weekday) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [ISO week date](#week-date)\n (year, week number and day of the week).\n The resulting `NaiveDate` may have a different year from the input year.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":307},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":112066,"byte_end":112087,"line_start":393,"line_end":393,"column_start":12,"column_end":33},"name":"from_num_days_from_ce","qualname":"<NaiveDate>::from_num_days_from_ce","value":"fn (days: i32) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from a day's number in the proleptic Gregorian calendar, with\n January 1, 1 being day 1.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":112045,"byte_end":112054,"line_start":392,"line_end":392,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":308},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":113036,"byte_end":113061,"line_start":417,"line_end":417,"column_start":12,"column_end":37},"name":"from_num_days_from_ce_opt","qualname":"<NaiveDate>::from_num_days_from_ce_opt","value":"fn (days: i32) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from a day's number in the proleptic Gregorian calendar, with\n January 1, 1 being day 1.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":309},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":114771,"byte_end":114792,"line_start":450,"line_end":450,"column_start":12,"column_end":33},"name":"from_weekday_of_month","qualname":"<NaiveDate>::from_weekday_of_month","value":"fn (year: i32, month: u32, weekday: Weekday, n: u8) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` by counting the number of occurrences of a particular day-of-week\n since the beginning of the given month.  For instance, if you want the 2nd Friday of March\n 2017, you would use `NaiveDate::from_weekday_of_month(2017, 3, Weekday::Fri, 2)`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":310},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":115667,"byte_end":115692,"line_start":466,"line_end":466,"column_start":12,"column_end":37},"name":"from_weekday_of_month_opt","qualname":"<NaiveDate>::from_weekday_of_month_opt","value":"fn (year: i32, month: u32, weekday: Weekday, n: u8) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` by counting the number of occurrences of a particular day-of-week\n since the beginning of the given month.  For instance, if you want the 2nd Friday of March\n 2017, you would use `NaiveDate::from_weekday_of_month(2017, 3, Weekday::Fri, 2)`.  `n` is 1-indexed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":311},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":117712,"byte_end":117726,"line_start":523,"line_end":523,"column_start":12,"column_end":26},"name":"parse_from_str","qualname":"<NaiveDate>::parse_from_str","value":"fn (s: &str, fmt: &str) -> ParseResult<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and returns a new `NaiveDate`.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":312},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":118375,"byte_end":118383,"line_start":544,"line_end":544,"column_start":12,"column_end":20},"name":"and_time","qualname":"<NaiveDate>::and_time","value":"fn (&self, time: NaiveTime) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date and given `NaiveTime`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":118354,"byte_end":118363,"line_start":543,"line_end":543,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":313},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":119199,"byte_end":119206,"line_start":568,"line_end":568,"column_start":12,"column_end":19},"name":"and_hms","qualname":"<NaiveDate>::and_hms","value":"fn (&self, hour: u32, min: u32, sec: u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute and second.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":119178,"byte_end":119187,"line_start":567,"line_end":567,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":314},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":120092,"byte_end":120103,"line_start":591,"line_end":591,"column_start":12,"column_end":23},"name":"and_hms_opt","qualname":"<NaiveDate>::and_hms_opt","value":"fn (&self, hour: u32, min: u32, sec: u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute and second.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":120071,"byte_end":120080,"line_start":590,"line_end":590,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":316},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":121042,"byte_end":121055,"line_start":616,"line_end":616,"column_start":12,"column_end":25},"name":"and_hms_milli","qualname":"<NaiveDate>::and_hms_milli","value":"fn (&self, hour: u32, min: u32, sec: u32, milli: u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":121021,"byte_end":121030,"line_start":615,"line_end":615,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":317},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":122128,"byte_end":122145,"line_start":641,"line_end":641,"column_start":12,"column_end":29},"name":"and_hms_milli_opt","qualname":"<NaiveDate>::and_hms_milli_opt","value":"fn (&self, hour: u32, min: u32, sec: u32, milli: u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":122107,"byte_end":122116,"line_start":640,"line_end":640,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":319},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":123164,"byte_end":123177,"line_start":672,"line_end":672,"column_start":12,"column_end":25},"name":"and_hms_micro","qualname":"<NaiveDate>::and_hms_micro","value":"fn (&self, hour: u32, min: u32, sec: u32, micro: u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":123143,"byte_end":123152,"line_start":671,"line_end":671,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":320},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":124278,"byte_end":124295,"line_start":697,"line_end":697,"column_start":12,"column_end":29},"name":"and_hms_micro_opt","qualname":"<NaiveDate>::and_hms_micro_opt","value":"fn (&self, hour: u32, min: u32, sec: u32, micro: u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":124257,"byte_end":124266,"line_start":696,"line_end":696,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":322},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":125318,"byte_end":125330,"line_start":728,"line_end":728,"column_start":12,"column_end":24},"name":"and_hms_nano","qualname":"<NaiveDate>::and_hms_nano","value":"fn (&self, hour: u32, min: u32, sec: u32, nano: u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":125297,"byte_end":125306,"line_start":727,"line_end":727,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":323},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":126447,"byte_end":126463,"line_start":753,"line_end":753,"column_start":12,"column_end":28},"name":"and_hms_nano_opt","qualname":"<NaiveDate>::and_hms_nano_opt","value":"fn (&self, hour: u32, min: u32, sec: u32, nano: u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":126426,"byte_end":126435,"line_start":752,"line_end":752,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":329},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":128155,"byte_end":128159,"line_start":810,"line_end":810,"column_start":12,"column_end":16},"name":"succ","qualname":"<NaiveDate>::succ","value":"fn (&self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` for the next calendar date.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":128134,"byte_end":128143,"line_start":809,"line_end":809,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":330},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":128701,"byte_end":128709,"line_start":829,"line_end":829,"column_start":12,"column_end":20},"name":"succ_opt","qualname":"<NaiveDate>::succ_opt","value":"fn (&self) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` for the next calendar date.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":128680,"byte_end":128689,"line_start":828,"line_end":828,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":332},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":129386,"byte_end":129390,"line_start":847,"line_end":847,"column_start":12,"column_end":16},"name":"pred","qualname":"<NaiveDate>::pred","value":"fn (&self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` for the previous calendar date.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":129365,"byte_end":129374,"line_start":846,"line_end":846,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":333},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":129937,"byte_end":129945,"line_start":866,"line_end":866,"column_start":12,"column_end":20},"name":"pred_opt","qualname":"<NaiveDate>::pred_opt","value":"fn (&self) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` for the previous calendar date.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":129916,"byte_end":129925,"line_start":865,"line_end":865,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":335},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":130992,"byte_end":131010,"line_start":892,"line_end":892,"column_start":12,"column_end":30},"name":"checked_add_signed","qualname":"<NaiveDate>::checked_add_signed","value":"fn (self, rhs: OldDuration) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Adds the `days` part of given `Duration` to the current date.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":336},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":132616,"byte_end":132634,"line_start":927,"line_end":927,"column_start":12,"column_end":30},"name":"checked_sub_signed","qualname":"<NaiveDate>::checked_sub_signed","value":"fn (self, rhs: OldDuration) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Subtracts the `days` part of given `Duration` from the current date.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":337},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":134533,"byte_end":134554,"line_start":965,"line_end":965,"column_start":12,"column_end":33},"name":"signed_duration_since","qualname":"<NaiveDate>::signed_duration_since","value":"fn (self, rhs: NaiveDate) -> OldDuration","parent":null,"children":[],"decl_id":null,"docs":" Subtracts another `NaiveDate` from the current date.\n Returns a `Duration` of integral numbers.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":338},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":136314,"byte_end":136331,"line_start":1006,"line_end":1006,"column_start":12,"column_end":29},"name":"format_with_items","qualname":"<NaiveDate>::format_with_items","value":"fn <'a, I, B> (&self, items: I) -> DelayedFormat<I>","parent":null,"children":[],"decl_id":null,"docs":" Formats the date with the specified formatting items.\n Otherwise it is the same as the ordinary `format` method.","sig":null,"attributes":[{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":136235,"byte_end":136288,"line_start":1004,"line_end":1004,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":136293,"byte_end":136302,"line_start":1005,"line_end":1005,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":342},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":138019,"byte_end":138025,"line_start":1048,"line_end":1048,"column_start":12,"column_end":18},"name":"format","qualname":"<NaiveDate>::format","value":"fn <'a> (&self, fmt: &'a str) -> DelayedFormat<StrftimeItems<'a>>","parent":null,"children":[],"decl_id":null,"docs":" Formats the date with the specified format string.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":137940,"byte_end":137993,"line_start":1046,"line_end":1046,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":137998,"byte_end":138007,"line_start":1047,"line_end":1047,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":344},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":138807,"byte_end":138816,"line_start":1074,"line_end":1074,"column_start":12,"column_end":21},"name":"iter_days","qualname":"<NaiveDate>::iter_days","value":"fn (&self) -> NaiveDateDaysIterator","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator that steps by days until the last representable date.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":138786,"byte_end":138795,"line_start":1073,"line_end":1073,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":345},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":139562,"byte_end":139572,"line_start":1100,"line_end":1100,"column_start":12,"column_end":22},"name":"iter_weeks","qualname":"<NaiveDate>::iter_weeks","value":"fn (&self) -> NaiveDateWeeksIterator","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator that steps by weeks until the last representable date.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":139541,"byte_end":139550,"line_start":1099,"line_end":1099,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1993},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":155464,"byte_end":155485,"line_start":1568,"line_end":1568,"column_start":12,"column_end":33},"name":"NaiveDateDaysIterator","qualname":"::naive::date::NaiveDateDaysIterator","value":"NaiveDateDaysIterator {  }","parent":null,"children":[{"krate":0,"index":1994}],"decl_id":null,"docs":" Iterator over `NaiveDate` with a step size of one day.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2018},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":156234,"byte_end":156256,"line_start":1595,"line_end":1595,"column_start":12,"column_end":34},"name":"NaiveDateWeeksIterator","qualname":"::naive::date::NaiveDateWeeksIterator","value":"NaiveDateWeeksIterator {  }","parent":null,"children":[{"krate":0,"index":2019}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":464},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":189964,"byte_end":189976,"line_start":32,"line_end":32,"column_start":11,"column_end":23},"name":"MIN_DATETIME","qualname":"::naive::datetime::MIN_DATETIME","value":"NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" The minimum possible `NaiveDateTime`.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":465},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":190096,"byte_end":190108,"line_start":34,"line_end":34,"column_start":11,"column_end":23},"name":"MAX_DATETIME","qualname":"::naive::datetime::MAX_DATETIME","value":"NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" The maximum possible `NaiveDateTime`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2043},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":191041,"byte_end":191054,"line_start":62,"line_end":62,"column_start":12,"column_end":25},"name":"NaiveDateTime","qualname":"::naive::datetime::NaiveDateTime","value":"NaiveDateTime {  }","parent":null,"children":[{"krate":0,"index":2044},{"krate":0,"index":2045}],"decl_id":null,"docs":" ISO 8601 combined date and time without timezone.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":467},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":191716,"byte_end":191719,"line_start":85,"line_end":85,"column_start":12,"column_end":15},"name":"new","qualname":"<NaiveDateTime>::new","value":"fn (date: NaiveDate, time: NaiveTime) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from date and time components.\n Equivalent to [`date.and_time(time)`](./struct.NaiveDate.html#method.and_time)\n and many other helper constructors on `NaiveDate`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":191695,"byte_end":191704,"line_start":84,"line_end":84,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":468},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":193002,"byte_end":193016,"line_start":115,"line_end":115,"column_start":12,"column_end":26},"name":"from_timestamp","qualname":"<NaiveDateTime>::from_timestamp","value":"fn (secs: i64, nsecs: u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` corresponding to a UTC date and time,\n from the number of non-leap seconds\n since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\")\n and the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":192981,"byte_end":192990,"line_start":114,"line_end":114,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":469},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":194358,"byte_end":194376,"line_start":146,"line_end":146,"column_start":12,"column_end":30},"name":"from_timestamp_opt","qualname":"<NaiveDateTime>::from_timestamp_opt","value":"fn (secs: i64, nsecs: u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` corresponding to a UTC date and time,\n from the number of non-leap seconds\n since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\")\n and the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":194337,"byte_end":194346,"line_start":145,"line_end":145,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":471},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":197761,"byte_end":197775,"line_start":220,"line_end":220,"column_start":12,"column_end":26},"name":"parse_from_str","qualname":"<NaiveDateTime>::parse_from_str","value":"fn (s: &str, fmt: &str) -> ParseResult<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and returns a new `NaiveDateTime`.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":472},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":198297,"byte_end":198301,"line_start":237,"line_end":237,"column_start":12,"column_end":16},"name":"date","qualname":"<NaiveDateTime>::date","value":"fn (&self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Retrieves a date component.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":198276,"byte_end":198285,"line_start":236,"line_end":236,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":473},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":198654,"byte_end":198658,"line_start":252,"line_end":252,"column_start":12,"column_end":16},"name":"time","qualname":"<NaiveDateTime>::time","value":"fn (&self) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Retrieves a time component.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":198633,"byte_end":198642,"line_start":251,"line_end":251,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":474},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":199565,"byte_end":199574,"line_start":279,"line_end":279,"column_start":12,"column_end":21},"name":"timestamp","qualname":"<NaiveDateTime>::timestamp","value":"fn (&self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap seconds since the midnight on January 1, 1970.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":199544,"byte_end":199553,"line_start":278,"line_end":278,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":476},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":200952,"byte_end":200968,"line_start":311,"line_end":311,"column_start":12,"column_end":28},"name":"timestamp_millis","qualname":"<NaiveDateTime>::timestamp_millis","value":"fn (&self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap *milliseconds* since midnight on January 1, 1970.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":200931,"byte_end":200940,"line_start":310,"line_end":310,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":477},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":202436,"byte_end":202451,"line_start":350,"line_end":350,"column_start":12,"column_end":27},"name":"timestamp_nanos","qualname":"<NaiveDateTime>::timestamp_nanos","value":"fn (&self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap *nanoseconds* since midnight on January 1, 1970.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":202415,"byte_end":202424,"line_start":349,"line_end":349,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":478},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":203229,"byte_end":203252,"line_start":372,"line_end":372,"column_start":12,"column_end":35},"name":"timestamp_subsec_millis","qualname":"<NaiveDateTime>::timestamp_subsec_millis","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of milliseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":203208,"byte_end":203217,"line_start":371,"line_end":371,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":479},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":203985,"byte_end":204008,"line_start":393,"line_end":393,"column_start":12,"column_end":35},"name":"timestamp_subsec_micros","qualname":"<NaiveDateTime>::timestamp_subsec_micros","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of microseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":203964,"byte_end":203973,"line_start":392,"line_end":392,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":480},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":204750,"byte_end":204772,"line_start":414,"line_end":414,"column_start":12,"column_end":34},"name":"timestamp_subsec_nanos","qualname":"<NaiveDateTime>::timestamp_subsec_nanos","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":204729,"byte_end":204738,"line_start":413,"line_end":413,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":481},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":208151,"byte_end":208169,"line_start":492,"line_end":492,"column_start":12,"column_end":30},"name":"checked_add_signed","qualname":"<NaiveDateTime>::checked_add_signed","value":"fn (self, rhs: OldDuration) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Adds given `Duration` to the current date and time.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":482},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":211713,"byte_end":211731,"line_start":574,"line_end":574,"column_start":12,"column_end":30},"name":"checked_sub_signed","qualname":"<NaiveDateTime>::checked_sub_signed","value":"fn (self, rhs: OldDuration) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Subtracts given `Duration` from the current date and time.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":483},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":214140,"byte_end":214161,"line_start":630,"line_end":630,"column_start":12,"column_end":33},"name":"signed_duration_since","qualname":"<NaiveDateTime>::signed_duration_since","value":"fn (self, rhs: NaiveDateTime) -> OldDuration","parent":null,"children":[],"decl_id":null,"docs":" Subtracts another `NaiveDateTime` from the current date and time.\n This does not overflow or underflow at all.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":484},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":215603,"byte_end":215620,"line_start":663,"line_end":663,"column_start":12,"column_end":29},"name":"format_with_items","qualname":"<NaiveDateTime>::format_with_items","value":"fn <'a, I, B> (&self, items: I) -> DelayedFormat<I>","parent":null,"children":[],"decl_id":null,"docs":" Formats the combined date and time with the specified formatting items.\n Otherwise it is the same as the ordinary [`format`](#method.format) method.","sig":null,"attributes":[{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":215524,"byte_end":215577,"line_start":661,"line_end":661,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":215582,"byte_end":215591,"line_start":662,"line_end":662,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":488},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":217421,"byte_end":217427,"line_start":705,"line_end":705,"column_start":12,"column_end":18},"name":"format","qualname":"<NaiveDateTime>::format","value":"fn <'a> (&self, fmt: &'a str) -> DelayedFormat<StrftimeItems<'a>>","parent":null,"children":[],"decl_id":null,"docs":" Formats the combined date and time with the specified format string.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":217342,"byte_end":217395,"line_start":703,"line_end":703,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":217400,"byte_end":217409,"line_start":704,"line_end":704,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":580},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":255866,"byte_end":255880,"line_start":1796,"line_end":1796,"column_start":13,"column_end":27},"name":"ts_nanoseconds","qualname":"::naive::datetime::serde::ts_nanoseconds","value":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","parent":null,"children":[{"krate":0,"index":581},{"krate":0,"index":582},{"krate":0,"index":585},{"krate":0,"index":588},{"krate":0,"index":590},{"krate":0,"index":593},{"krate":0,"index":595}],"decl_id":null,"docs":" Used to serialize/deserialize from nanosecond-precision timestamps","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":588},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":257453,"byte_end":257462,"line_start":1836,"line_end":1836,"column_start":16,"column_end":25},"name":"serialize","qualname":"::naive::datetime::serde::ts_nanoseconds::serialize","value":"fn <S> (dt: &NaiveDateTime, serializer: S) -> Result<S::Ok, S::Error>","parent":null,"children":[],"decl_id":null,"docs":" Serialize a UTC datetime into an integer number of nanoseconds since the epoch","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":590},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":258892,"byte_end":258903,"line_start":1873,"line_end":1873,"column_start":16,"column_end":27},"name":"deserialize","qualname":"::naive::datetime::serde::ts_nanoseconds::deserialize","value":"fn <'de, D> (d: D) -> Result<NaiveDateTime, D::Error>","parent":null,"children":[],"decl_id":null,"docs":" Deserialize a `DateTime` from a nanoseconds timestamp","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":605},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":261491,"byte_end":261506,"line_start":1948,"line_end":1948,"column_start":13,"column_end":28},"name":"ts_milliseconds","qualname":"::naive::datetime::serde::ts_milliseconds","value":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","parent":null,"children":[{"krate":0,"index":606},{"krate":0,"index":607},{"krate":0,"index":610},{"krate":0,"index":613},{"krate":0,"index":615},{"krate":0,"index":618},{"krate":0,"index":620}],"decl_id":null,"docs":" Used to serialize/deserialize from millisecond-precision timestamps","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":613},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":263072,"byte_end":263081,"line_start":1988,"line_end":1988,"column_start":16,"column_end":25},"name":"serialize","qualname":"::naive::datetime::serde::ts_milliseconds::serialize","value":"fn <S> (dt: &NaiveDateTime, serializer: S) -> Result<S::Ok, S::Error>","parent":null,"children":[],"decl_id":null,"docs":" Serialize a UTC datetime into an integer number of milliseconds since the epoch","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":615},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":264510,"byte_end":264521,"line_start":2025,"line_end":2025,"column_start":16,"column_end":27},"name":"deserialize","qualname":"::naive::datetime::serde::ts_milliseconds::deserialize","value":"fn <'de, D> (d: D) -> Result<NaiveDateTime, D::Error>","parent":null,"children":[],"decl_id":null,"docs":" Deserialize a `DateTime` from a milliseconds timestamp","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":630},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":267013,"byte_end":267023,"line_start":2097,"line_end":2097,"column_start":13,"column_end":23},"name":"ts_seconds","qualname":"::naive::datetime::serde::ts_seconds","value":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","parent":null,"children":[{"krate":0,"index":631},{"krate":0,"index":632},{"krate":0,"index":635},{"krate":0,"index":638},{"krate":0,"index":640},{"krate":0,"index":643},{"krate":0,"index":645}],"decl_id":null,"docs":" Used to serialize/deserialize from second-precision timestamps","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":638},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":268551,"byte_end":268560,"line_start":2137,"line_end":2137,"column_start":16,"column_end":25},"name":"serialize","qualname":"::naive::datetime::serde::ts_seconds::serialize","value":"fn <S> (dt: &NaiveDateTime, serializer: S) -> Result<S::Ok, S::Error>","parent":null,"children":[],"decl_id":null,"docs":" Serialize a UTC datetime into an integer number of seconds since the epoch","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":640},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":269957,"byte_end":269968,"line_start":2174,"line_end":2174,"column_start":16,"column_end":27},"name":"deserialize","qualname":"::naive::datetime::serde::ts_seconds::deserialize","value":"fn <'de, D> (d: D) -> Result<NaiveDateTime, D::Error>","parent":null,"children":[],"decl_id":null,"docs":" Deserialize a `DateTime` from a seconds timestamp","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2113},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\isoweek.rs","byte_start":316281,"byte_end":316288,"line_start":17,"line_end":17,"column_start":12,"column_end":19},"name":"IsoWeek","qualname":"::naive::isoweek::IsoWeek","value":"IsoWeek {  }","parent":null,"children":[{"krate":0,"index":2114}],"decl_id":null,"docs":" ISO 8601 week.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":743},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\isoweek.rs","byte_start":318246,"byte_end":318250,"line_start":70,"line_end":70,"column_start":12,"column_end":16},"name":"year","qualname":"<IsoWeek>::year","value":"fn (&self) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Returns the year number for this ISO week.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\isoweek.rs","byte_start":318225,"byte_end":318234,"line_start":69,"line_end":69,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":744},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\isoweek.rs","byte_start":318700,"byte_end":318704,"line_start":87,"line_end":87,"column_start":12,"column_end":16},"name":"week","qualname":"<IsoWeek>::week","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the ISO week number starting from 1.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\isoweek.rs","byte_start":318679,"byte_end":318688,"line_start":86,"line_end":86,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":745},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\isoweek.rs","byte_start":319172,"byte_end":319177,"line_start":104,"line_end":104,"column_start":12,"column_end":17},"name":"week0","qualname":"<IsoWeek>::week0","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the ISO week number starting from 0.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\isoweek.rs","byte_start":319151,"byte_end":319160,"line_start":103,"line_end":103,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":2133},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":329103,"byte_end":329112,"line_start":182,"line_end":182,"column_start":12,"column_end":21},"name":"NaiveTime","qualname":"::naive::time::NaiveTime","value":"NaiveTime {  }","parent":null,"children":[{"krate":0,"index":2134},{"krate":0,"index":2135}],"decl_id":null,"docs":" ISO 8601 time without timezone.\n Allows for the nanosecond precision and optional leap second representation.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":777},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":329770,"byte_end":329778,"line_start":207,"line_end":207,"column_start":12,"column_end":20},"name":"from_hms","qualname":"<NaiveTime>::from_hms","value":"fn (hour: u32, min: u32, sec: u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute and second.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":329749,"byte_end":329758,"line_start":206,"line_end":206,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":778},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":330635,"byte_end":330647,"line_start":232,"line_end":232,"column_start":12,"column_end":24},"name":"from_hms_opt","qualname":"<NaiveTime>::from_hms_opt","value":"fn (hour: u32, min: u32, sec: u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute and second.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":330614,"byte_end":330623,"line_start":231,"line_end":231,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":779},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":331388,"byte_end":331402,"line_start":255,"line_end":255,"column_start":12,"column_end":26},"name":"from_hms_milli","qualname":"<NaiveTime>::from_hms_milli","value":"fn (hour: u32, min: u32, sec: u32, milli: u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and millisecond.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":331367,"byte_end":331376,"line_start":254,"line_end":254,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":780},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":332462,"byte_end":332480,"line_start":282,"line_end":282,"column_start":12,"column_end":30},"name":"from_hms_milli_opt","qualname":"<NaiveTime>::from_hms_milli_opt","value":"fn (hour: u32, min: u32, sec: u32, milli: u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and millisecond.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":332441,"byte_end":332450,"line_start":281,"line_end":281,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":782},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":333316,"byte_end":333330,"line_start":307,"line_end":307,"column_start":12,"column_end":26},"name":"from_hms_micro","qualname":"<NaiveTime>::from_hms_micro","value":"fn (hour: u32, min: u32, sec: u32, micro: u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and microsecond.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":333295,"byte_end":333304,"line_start":306,"line_end":306,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":783},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":334406,"byte_end":334424,"line_start":334,"line_end":334,"column_start":12,"column_end":30},"name":"from_hms_micro_opt","qualname":"<NaiveTime>::from_hms_micro_opt","value":"fn (hour: u32, min: u32, sec: u32, micro: u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and microsecond.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":334385,"byte_end":334394,"line_start":333,"line_end":333,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":785},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":335234,"byte_end":335247,"line_start":357,"line_end":357,"column_start":12,"column_end":25},"name":"from_hms_nano","qualname":"<NaiveTime>::from_hms_nano","value":"fn (hour: u32, min: u32, sec: u32, nano: u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and nanosecond.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":335213,"byte_end":335222,"line_start":356,"line_end":356,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":786},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":336332,"byte_end":336349,"line_start":384,"line_end":384,"column_start":12,"column_end":29},"name":"from_hms_nano_opt","qualname":"<NaiveTime>::from_hms_nano_opt","value":"fn (hour: u32, min: u32, sec: u32, nano: u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and nanosecond.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":336311,"byte_end":336320,"line_start":383,"line_end":383,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":787},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":337293,"byte_end":337323,"line_start":411,"line_end":411,"column_start":12,"column_end":42},"name":"from_num_seconds_from_midnight","qualname":"<NaiveTime>::from_num_seconds_from_midnight","value":"fn (secs: u32, nano: u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":337272,"byte_end":337281,"line_start":410,"line_end":410,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":788},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":338295,"byte_end":338329,"line_start":436,"line_end":436,"column_start":12,"column_end":46},"name":"from_num_seconds_from_midnight_opt","qualname":"<NaiveTime>::from_num_seconds_from_midnight_opt","value":"fn (secs: u32, nano: u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":338274,"byte_end":338283,"line_start":435,"line_end":435,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":789},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":340999,"byte_end":341013,"line_start":504,"line_end":504,"column_start":12,"column_end":26},"name":"parse_from_str","qualname":"<NaiveTime>::parse_from_str","value":"fn (s: &str, fmt: &str) -> ParseResult<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and returns a new `NaiveTime`.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":790},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":342176,"byte_end":342198,"line_start":533,"line_end":533,"column_start":12,"column_end":34},"name":"overflowing_add_signed","qualname":"<NaiveTime>::overflowing_add_signed","value":"fn (&self, mut rhs: OldDuration) -> (NaiveTime, i64)","parent":null,"children":[],"decl_id":null,"docs":" Adds given `Duration` to the current time,\n and also returns the number of *seconds*\n in the integral number of days ignored from the addition.\n (We cannot return `Duration` because it is subject to overflow or underflow.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":791},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":345707,"byte_end":345729,"line_start":619,"line_end":619,"column_start":12,"column_end":34},"name":"overflowing_sub_signed","qualname":"<NaiveTime>::overflowing_sub_signed","value":"fn (&self, rhs: OldDuration) -> (NaiveTime, i64)","parent":null,"children":[],"decl_id":null,"docs":" Subtracts given `Duration` from the current time,\n and also returns the number of *seconds*\n in the integral number of days ignored from the subtraction.\n (We cannot return `Duration` because it is subject to overflow or underflow.)","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":345686,"byte_end":345695,"line_start":618,"line_end":618,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":792},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":348783,"byte_end":348804,"line_start":684,"line_end":684,"column_start":12,"column_end":33},"name":"signed_duration_since","qualname":"<NaiveTime>::signed_duration_since","value":"fn (self, rhs: NaiveTime) -> OldDuration","parent":null,"children":[],"decl_id":null,"docs":" Subtracts another `NaiveTime` from the current time.\n Returns a `Duration` within +/- 1 day.\n This does not overflow or underflow at all.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":794},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":351460,"byte_end":351477,"line_start":751,"line_end":751,"column_start":12,"column_end":29},"name":"format_with_items","qualname":"<NaiveTime>::format_with_items","value":"fn <'a, I, B> (&self, items: I) -> DelayedFormat<I>","parent":null,"children":[],"decl_id":null,"docs":" Formats the time with the specified formatting items.\n Otherwise it is the same as the ordinary [`format`](#method.format) method.","sig":null,"attributes":[{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":351381,"byte_end":351434,"line_start":749,"line_end":749,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":351439,"byte_end":351448,"line_start":750,"line_end":750,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":798},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":353298,"byte_end":353304,"line_start":795,"line_end":795,"column_start":12,"column_end":18},"name":"format","qualname":"<NaiveTime>::format","value":"fn <'a> (&self, fmt: &'a str) -> DelayedFormat<StrftimeItems<'a>>","parent":null,"children":[],"decl_id":null,"docs":" Formats the time with the specified format string.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":353219,"byte_end":353272,"line_start":793,"line_end":793,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":353277,"byte_end":353286,"line_start":794,"line_end":794,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":866},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":24224,"byte_end":24229,"line_start":558,"line_end":558,"column_start":13,"column_end":18},"name":"serde","qualname":"::naive::serde","value":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":867}],"decl_id":null,"docs":" Serialization/Deserialization of naive types in alternate formats","sig":null,"attributes":[{"value":"cfg(feature = \"serde\")","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":24186,"byte_end":24211,"line_start":557,"line_end":557,"column_start":5,"column_end":30}}]},{"kind":"Struct","id":{"krate":0,"index":2158},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":394507,"byte_end":394511,"line_start":47,"line_end":47,"column_start":12,"column_end":16},"name":"Date","qualname":"::date::Date","value":"Date {  }","parent":null,"children":[{"krate":0,"index":2160},{"krate":0,"index":2161}],"decl_id":null,"docs":" ISO 8601 calendar date with time zone.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":894},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":394619,"byte_end":394627,"line_start":53,"line_end":53,"column_start":11,"column_end":19},"name":"MIN_DATE","qualname":"::date::MIN_DATE","value":"Date<Utc>","parent":null,"children":[],"decl_id":null,"docs":" The minimum possible `Date`.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":895},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":394729,"byte_end":394737,"line_start":55,"line_end":55,"column_start":11,"column_end":19},"name":"MAX_DATE","qualname":"::date::MAX_DATE","value":"Date<Utc>","parent":null,"children":[],"decl_id":null,"docs":" The maximum possible `Date`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":898},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":395085,"byte_end":395093,"line_start":63,"line_end":63,"column_start":12,"column_end":20},"name":"from_utc","qualname":"<Date<Tz>>::from_utc","value":"fn (date: NaiveDate, offset: Tz::Offset) -> Date<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` with given *UTC* date and offset.\n The local date should be constructed via the `TimeZone` trait.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":395064,"byte_end":395073,"line_start":62,"line_end":62,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":899},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":395394,"byte_end":395402,"line_start":72,"line_end":72,"column_start":12,"column_end":20},"name":"and_time","qualname":"<Date<Tz>>::and_time","value":"fn (&self, time: NaiveTime) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date and given `NaiveTime`.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":395373,"byte_end":395382,"line_start":71,"line_end":71,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":900},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":395799,"byte_end":395806,"line_start":82,"line_end":82,"column_start":12,"column_end":19},"name":"and_hms","qualname":"<Date<Tz>>::and_hms","value":"fn (&self, hour: u32, min: u32, sec: u32) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute and second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":395778,"byte_end":395787,"line_start":81,"line_end":81,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":901},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":396161,"byte_end":396172,"line_start":91,"line_end":91,"column_start":12,"column_end":23},"name":"and_hms_opt","qualname":"<Date<Tz>>::and_hms_opt","value":"fn (&self, hour: u32, min: u32, sec: u32) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute and second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":396140,"byte_end":396149,"line_start":90,"line_end":90,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":903},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":396659,"byte_end":396672,"line_start":101,"line_end":101,"column_start":12,"column_end":25},"name":"and_hms_milli","qualname":"<Date<Tz>>::and_hms_milli","value":"fn (&self, hour: u32, min: u32, sec: u32, milli: u32) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\n The millisecond part can exceed 1,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":396638,"byte_end":396647,"line_start":100,"line_end":100,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":904},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":397163,"byte_end":397180,"line_start":111,"line_end":111,"column_start":12,"column_end":29},"name":"and_hms_milli_opt","qualname":"<Date<Tz>>::and_hms_milli_opt","value":"fn (&self, hour: u32, min: u32, sec: u32, milli: u32) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\n The millisecond part can exceed 1,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":397142,"byte_end":397151,"line_start":110,"line_end":110,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":906},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":397743,"byte_end":397756,"line_start":127,"line_end":127,"column_start":12,"column_end":25},"name":"and_hms_micro","qualname":"<Date<Tz>>::and_hms_micro","value":"fn (&self, hour: u32, min: u32, sec: u32, micro: u32) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\n The microsecond part can exceed 1,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":397722,"byte_end":397731,"line_start":126,"line_end":126,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":907},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":398251,"byte_end":398268,"line_start":137,"line_end":137,"column_start":12,"column_end":29},"name":"and_hms_micro_opt","qualname":"<Date<Tz>>::and_hms_micro_opt","value":"fn (&self, hour: u32, min: u32, sec: u32, micro: u32) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\n The microsecond part can exceed 1,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":398230,"byte_end":398239,"line_start":136,"line_end":136,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":909},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":398832,"byte_end":398844,"line_start":153,"line_end":153,"column_start":12,"column_end":24},"name":"and_hms_nano","qualname":"<Date<Tz>>::and_hms_nano","value":"fn (&self, hour: u32, min: u32, sec: u32, nano: u32) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\n The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":398811,"byte_end":398820,"line_start":152,"line_end":152,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":910},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":399337,"byte_end":399353,"line_start":163,"line_end":163,"column_start":12,"column_end":28},"name":"and_hms_nano_opt","qualname":"<Date<Tz>>::and_hms_nano_opt","value":"fn (&self, hour: u32, min: u32, sec: u32, nano: u32) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\n The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":399316,"byte_end":399325,"line_start":162,"line_end":162,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":912},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":399717,"byte_end":399721,"line_start":177,"line_end":177,"column_start":12,"column_end":16},"name":"succ","qualname":"<Date<Tz>>::succ","value":"fn (&self) -> Date<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` for the next date.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":399696,"byte_end":399705,"line_start":176,"line_end":176,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":913},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":399943,"byte_end":399951,"line_start":185,"line_end":185,"column_start":12,"column_end":20},"name":"succ_opt","qualname":"<Date<Tz>>::succ_opt","value":"fn (&self) -> Option<Date<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` for the next date.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":399922,"byte_end":399931,"line_start":184,"line_end":184,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":915},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":400211,"byte_end":400215,"line_start":193,"line_end":193,"column_start":12,"column_end":16},"name":"pred","qualname":"<Date<Tz>>::pred","value":"fn (&self) -> Date<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` for the prior date.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":400190,"byte_end":400199,"line_start":192,"line_end":192,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":916},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":400439,"byte_end":400447,"line_start":201,"line_end":201,"column_start":12,"column_end":20},"name":"pred_opt","qualname":"<Date<Tz>>::pred_opt","value":"fn (&self) -> Option<Date<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` for the prior date.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":400418,"byte_end":400427,"line_start":200,"line_end":200,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":918},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":400641,"byte_end":400647,"line_start":207,"line_end":207,"column_start":12,"column_end":18},"name":"offset","qualname":"<Date<Tz>>::offset","value":"fn (&self) -> &Tz::Offset","parent":null,"children":[],"decl_id":null,"docs":" Retrieves an associated offset from UTC.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":400620,"byte_end":400629,"line_start":206,"line_end":206,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":919},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":400768,"byte_end":400776,"line_start":213,"line_end":213,"column_start":12,"column_end":20},"name":"timezone","qualname":"<Date<Tz>>::timezone","value":"fn (&self) -> Tz","parent":null,"children":[],"decl_id":null,"docs":" Retrieves an associated time zone.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":400747,"byte_end":400756,"line_start":212,"line_end":212,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":920},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":401002,"byte_end":401015,"line_start":220,"line_end":220,"column_start":12,"column_end":25},"name":"with_timezone","qualname":"<Date<Tz>>::with_timezone","value":"fn <Tz2> (&self, tz: &Tz2) -> Date<Tz2>","parent":null,"children":[],"decl_id":null,"docs":" Changes the associated time zone.\n This does not change the actual `Date` (but will change the string representation).\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":400981,"byte_end":400990,"line_start":219,"line_end":219,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":922},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":401247,"byte_end":401265,"line_start":228,"line_end":228,"column_start":12,"column_end":30},"name":"checked_add_signed","qualname":"<Date<Tz>>::checked_add_signed","value":"fn (self, rhs: OldDuration) -> Option<Date<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Adds given `Duration` to the current date.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":401226,"byte_end":401235,"line_start":227,"line_end":227,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":923},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":401585,"byte_end":401603,"line_start":237,"line_end":237,"column_start":12,"column_end":30},"name":"checked_sub_signed","qualname":"<Date<Tz>>::checked_sub_signed","value":"fn (self, rhs: OldDuration) -> Option<Date<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Subtracts given `Duration` from the current date.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":401564,"byte_end":401573,"line_start":236,"line_end":236,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":924},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":402031,"byte_end":402052,"line_start":248,"line_end":248,"column_start":12,"column_end":33},"name":"signed_duration_since","qualname":"<Date<Tz>>::signed_duration_since","value":"fn <Tz2> (self, rhs: Date<Tz2>) -> OldDuration","parent":null,"children":[],"decl_id":null,"docs":" Subtracts another `Date` from the current date.\n Returns a `Duration` of integral numbers.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":402010,"byte_end":402019,"line_start":247,"line_end":247,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":926},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":402235,"byte_end":402244,"line_start":254,"line_end":254,"column_start":12,"column_end":21},"name":"naive_utc","qualname":"<Date<Tz>>::naive_utc","value":"fn (&self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Returns a view to the naive UTC date.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":402214,"byte_end":402223,"line_start":253,"line_end":253,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":927},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":402554,"byte_end":402565,"line_start":264,"line_end":264,"column_start":12,"column_end":23},"name":"naive_local","qualname":"<Date<Tz>>::naive_local","value":"fn (&self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Returns a view to the naive local date.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":402533,"byte_end":402542,"line_start":263,"line_end":263,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":934},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":403112,"byte_end":403129,"line_start":284,"line_end":284,"column_start":12,"column_end":29},"name":"format_with_items","qualname":"<Date<Tz>>::format_with_items","value":"fn <'a, I, B> (&self, items: I) -> DelayedFormat<I>","parent":null,"children":[],"decl_id":null,"docs":" Formats the date with the specified formatting items.\n","sig":null,"attributes":[{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":403033,"byte_end":403086,"line_start":282,"line_end":282,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":403091,"byte_end":403100,"line_start":283,"line_end":283,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":938},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":403619,"byte_end":403625,"line_start":297,"line_end":297,"column_start":12,"column_end":18},"name":"format","qualname":"<Date<Tz>>::format","value":"fn <'a> (&self, fmt: &'a str) -> DelayedFormat<StrftimeItems<'a>>","parent":null,"children":[],"decl_id":null,"docs":" Formats the date with the specified format string.\n See the [`format::strftime` module](./format/strftime/index.html)\n on the supported escape sequences.\n","sig":null,"attributes":[{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":403540,"byte_end":403593,"line_start":295,"line_end":295,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":403598,"byte_end":403607,"line_start":296,"line_end":296,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2166},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":409760,"byte_end":409764,"line_start":40,"line_end":40,"column_start":5,"column_end":9},"name":"Secs","qualname":"::datetime::SecondsFormat::Secs","value":"SecondsFormat::Secs","parent":{"krate":0,"index":2165},"children":[],"decl_id":null,"docs":" Format whole seconds only, with no decimal point nor subseconds.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2168},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":409903,"byte_end":409909,"line_start":44,"line_end":44,"column_start":5,"column_end":11},"name":"Millis","qualname":"::datetime::SecondsFormat::Millis","value":"SecondsFormat::Millis","parent":{"krate":0,"index":2165},"children":[],"decl_id":null,"docs":" Use fixed 3 subsecond digits. This corresponds to\n [Fixed::Nanosecond3](format/enum.Fixed.html#variant.Nanosecond3).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2170},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":410048,"byte_end":410054,"line_start":48,"line_end":48,"column_start":5,"column_end":11},"name":"Micros","qualname":"::datetime::SecondsFormat::Micros","value":"SecondsFormat::Micros","parent":{"krate":0,"index":2165},"children":[],"decl_id":null,"docs":" Use fixed 6 subsecond digits. This corresponds to\n [Fixed::Nanosecond6](format/enum.Fixed.html#variant.Nanosecond6).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2172},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":410193,"byte_end":410198,"line_start":52,"line_end":52,"column_start":5,"column_end":10},"name":"Nanos","qualname":"::datetime::SecondsFormat::Nanos","value":"SecondsFormat::Nanos","parent":{"krate":0,"index":2165},"children":[],"decl_id":null,"docs":" Use fixed 9 subsecond digits. This corresponds to\n [Fixed::Nanosecond9](format/enum.Fixed.html#variant.Nanosecond9).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2174},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":410434,"byte_end":410440,"line_start":57,"line_end":57,"column_start":5,"column_end":11},"name":"AutoSi","qualname":"::datetime::SecondsFormat::AutoSi","value":"SecondsFormat::AutoSi","parent":{"krate":0,"index":2165},"children":[],"decl_id":null,"docs":" Automatically select one of `Secs`, `Millis`, `Micros`, or `Nanos` to\n display all available non-zero sub-second digits.  This corresponds to\n [Fixed::Nanosecond](format/enum.Fixed.html#variant.Nanosecond).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2176},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":410500,"byte_end":410515,"line_start":61,"line_end":61,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::datetime::SecondsFormat::__NonExhaustive","value":"SecondsFormat::__NonExhaustive","parent":{"krate":0,"index":2165},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2165},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":409667,"byte_end":409680,"line_start":38,"line_end":38,"column_start":10,"column_end":23},"name":"SecondsFormat","qualname":"::datetime::SecondsFormat","value":"SecondsFormat::{Secs, Millis, Micros, Nanos, AutoSi, __NonExhaustive}","parent":null,"children":[{"krate":0,"index":2166},{"krate":0,"index":2168},{"krate":0,"index":2170},{"krate":0,"index":2172},{"krate":0,"index":2174},{"krate":0,"index":2176}],"decl_id":null,"docs":" Specific formatting options for seconds. This may be extended in the\n future, so exhaustive matching in external code is not recommended.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2189},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":410813,"byte_end":410821,"line_start":70,"line_end":70,"column_start":12,"column_end":20},"name":"DateTime","qualname":"::datetime::DateTime","value":"DateTime {  }","parent":null,"children":[{"krate":0,"index":2191},{"krate":0,"index":2192}],"decl_id":null,"docs":" ISO 8601 combined date and time with time zone.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1044},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":410946,"byte_end":410958,"line_start":76,"line_end":76,"column_start":11,"column_end":23},"name":"MIN_DATETIME","qualname":"::datetime::MIN_DATETIME","value":"DateTime<Utc>","parent":null,"children":[],"decl_id":null,"docs":" The minimum possilbe `DateTime<Utc>`.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1045},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":411085,"byte_end":411097,"line_start":78,"line_end":78,"column_start":11,"column_end":23},"name":"MAX_DATETIME","qualname":"::datetime::MAX_DATETIME","value":"DateTime<Utc>","parent":null,"children":[],"decl_id":null,"docs":" The maximum possible `DateTime<Utc>`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1048},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":411740,"byte_end":411748,"line_start":95,"line_end":95,"column_start":12,"column_end":20},"name":"from_utc","qualname":"<DateTime<Tz>>::from_utc","value":"fn (datetime: NaiveDateTime, offset: Tz::Offset) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` with given *UTC* datetime and offset.\n The local datetime should be constructed via the `TimeZone` trait.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":411719,"byte_end":411728,"line_start":94,"line_end":94,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1049},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":411936,"byte_end":411940,"line_start":101,"line_end":101,"column_start":12,"column_end":16},"name":"date","qualname":"<DateTime<Tz>>::date","value":"fn (&self) -> Date<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves a date component.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":411915,"byte_end":411924,"line_start":100,"line_end":100,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1050},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":412165,"byte_end":412169,"line_start":108,"line_end":108,"column_start":12,"column_end":16},"name":"time","qualname":"<DateTime<Tz>>::time","value":"fn (&self) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Retrieves a time component.\n Unlike `date`, this is not associated to the time zone.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":412144,"byte_end":412153,"line_start":107,"line_end":107,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1051},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":412386,"byte_end":412395,"line_start":115,"line_end":115,"column_start":12,"column_end":21},"name":"timestamp","qualname":"<DateTime<Tz>>::timestamp","value":"fn (&self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap seconds since January 1, 1970 0:00:00 UTC\n (aka \"UNIX timestamp\").\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":412365,"byte_end":412374,"line_start":114,"line_end":114,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1052},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":413216,"byte_end":413232,"line_start":139,"line_end":139,"column_start":12,"column_end":28},"name":"timestamp_millis","qualname":"<DateTime<Tz>>::timestamp_millis","value":"fn (&self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap-milliseconds since January 1, 1970 UTC","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":413195,"byte_end":413204,"line_start":138,"line_end":138,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1053},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":414054,"byte_end":414069,"line_start":163,"line_end":163,"column_start":12,"column_end":27},"name":"timestamp_nanos","qualname":"<DateTime<Tz>>::timestamp_nanos","value":"fn (&self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap-nanoseconds since January 1, 1970 UTC","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":414033,"byte_end":414042,"line_start":162,"line_end":162,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1054},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":414399,"byte_end":414422,"line_start":173,"line_end":173,"column_start":12,"column_end":35},"name":"timestamp_subsec_millis","qualname":"<DateTime<Tz>>::timestamp_subsec_millis","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of milliseconds since the last second boundary","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":414378,"byte_end":414387,"line_start":172,"line_end":172,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1055},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":414764,"byte_end":414787,"line_start":183,"line_end":183,"column_start":12,"column_end":35},"name":"timestamp_subsec_micros","qualname":"<DateTime<Tz>>::timestamp_subsec_micros","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of microseconds since the last second boundary","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":414743,"byte_end":414752,"line_start":182,"line_end":182,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1056},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":415131,"byte_end":415153,"line_start":193,"line_end":193,"column_start":12,"column_end":34},"name":"timestamp_subsec_nanos","qualname":"<DateTime<Tz>>::timestamp_subsec_nanos","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of nanoseconds since the last second boundary","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":415110,"byte_end":415119,"line_start":192,"line_end":192,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1057},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":415298,"byte_end":415304,"line_start":199,"line_end":199,"column_start":12,"column_end":18},"name":"offset","qualname":"<DateTime<Tz>>::offset","value":"fn (&self) -> &Tz::Offset","parent":null,"children":[],"decl_id":null,"docs":" Retrieves an associated offset from UTC.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":415277,"byte_end":415286,"line_start":198,"line_end":198,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1058},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":415425,"byte_end":415433,"line_start":205,"line_end":205,"column_start":12,"column_end":20},"name":"timezone","qualname":"<DateTime<Tz>>::timezone","value":"fn (&self) -> Tz","parent":null,"children":[],"decl_id":null,"docs":" Retrieves an associated time zone.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":415404,"byte_end":415413,"line_start":204,"line_end":204,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1059},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":415663,"byte_end":415676,"line_start":212,"line_end":212,"column_start":12,"column_end":25},"name":"with_timezone","qualname":"<DateTime<Tz>>::with_timezone","value":"fn <Tz2> (&self, tz: &Tz2) -> DateTime<Tz2>","parent":null,"children":[],"decl_id":null,"docs":" Changes the associated time zone.\n This does not change the actual `DateTime` (but will change the string representation).\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":415642,"byte_end":415651,"line_start":211,"line_end":211,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1061},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":415929,"byte_end":415947,"line_start":220,"line_end":220,"column_start":12,"column_end":30},"name":"checked_add_signed","qualname":"<DateTime<Tz>>::checked_add_signed","value":"fn (self, rhs: OldDuration) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Adds given `Duration` to the current date and time.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":415908,"byte_end":415917,"line_start":219,"line_end":219,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1062},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":416313,"byte_end":416331,"line_start":230,"line_end":230,"column_start":12,"column_end":30},"name":"checked_sub_signed","qualname":"<DateTime<Tz>>::checked_sub_signed","value":"fn (self, rhs: OldDuration) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Subtracts given `Duration` from the current date and time.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":416292,"byte_end":416301,"line_start":229,"line_end":229,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1063},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":416687,"byte_end":416708,"line_start":239,"line_end":239,"column_start":12,"column_end":33},"name":"signed_duration_since","qualname":"<DateTime<Tz>>::signed_duration_since","value":"fn <Tz2> (self, rhs: DateTime<Tz2>) -> OldDuration","parent":null,"children":[],"decl_id":null,"docs":" Subtracts another `DateTime` from the current date and time.\n This does not overflow or underflow at all.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":416666,"byte_end":416675,"line_start":238,"line_end":238,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1065},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":416907,"byte_end":416916,"line_start":245,"line_end":245,"column_start":12,"column_end":21},"name":"naive_utc","qualname":"<DateTime<Tz>>::naive_utc","value":"fn (&self) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Returns a view to the naive UTC datetime.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":416886,"byte_end":416895,"line_start":244,"line_end":244,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1066},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":417049,"byte_end":417060,"line_start":251,"line_end":251,"column_start":12,"column_end":23},"name":"naive_local","qualname":"<DateTime<Tz>>::naive_local","value":"fn (&self) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Returns a view to the naive local datetime.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":417028,"byte_end":417037,"line_start":250,"line_end":250,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1084},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":420867,"byte_end":420885,"line_start":347,"line_end":347,"column_start":12,"column_end":30},"name":"parse_from_rfc2822","qualname":"<DateTime<FixedOffset>>::parse_from_rfc2822","value":"fn (s: &str) -> ParseResult<DateTime<FixedOffset>>","parent":null,"children":[],"decl_id":null,"docs":" Parses an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`,\n then returns a new `DateTime` with a parsed `FixedOffset`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1086},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":421510,"byte_end":421528,"line_start":359,"line_end":359,"column_start":12,"column_end":30},"name":"parse_from_rfc3339","qualname":"<DateTime<FixedOffset>>::parse_from_rfc3339","value":"fn (s: &str) -> ParseResult<DateTime<FixedOffset>>","parent":null,"children":[],"decl_id":null,"docs":" Parses an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`,\n then returns a new `DateTime` with a parsed `FixedOffset`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1088},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":422736,"byte_end":422750,"line_start":386,"line_end":386,"column_start":12,"column_end":26},"name":"parse_from_str","qualname":"<DateTime<FixedOffset>>::parse_from_str","value":"fn (s: &str, fmt: &str) -> ParseResult<DateTime<FixedOffset>>","parent":null,"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and\n returns a new `DateTime` with a parsed `FixedOffset`.\n See the [`format::strftime` module](./format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1091},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":423176,"byte_end":423186,"line_start":399,"line_end":399,"column_start":12,"column_end":22},"name":"to_rfc2822","qualname":"<DateTime<Tz>>::to_rfc2822","value":"fn (&self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Returns an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`.\n","sig":null,"attributes":[{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":423111,"byte_end":423164,"line_start":398,"line_end":398,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1093},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":423518,"byte_end":423528,"line_start":406,"line_end":406,"column_start":12,"column_end":22},"name":"to_rfc3339","qualname":"<DateTime<Tz>>::to_rfc3339","value":"fn (&self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Returns an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`.\n","sig":null,"attributes":[{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":423453,"byte_end":423506,"line_start":405,"line_end":405,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1095},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":424991,"byte_end":425006,"line_start":436,"line_end":436,"column_start":12,"column_end":27},"name":"to_rfc3339_opts","qualname":"<DateTime<Tz>>::to_rfc3339_opts","value":"fn (&self, secform: SecondsFormat, use_z: bool) -> String","parent":null,"children":[],"decl_id":null,"docs":" Return an RFC 3339 and ISO 8601 date and time string with subseconds\n formatted as per a `SecondsFormat`. If passed `use_z` true and the\n timezone is UTC (offset 0), use 'Z', as per\n [Fixed::TimezoneOffsetColonZ](format/enum.Fixed.html#variant.TimezoneOffsetColonZ).\n If passed `use_z` false, use\n [Fixed::TimezoneOffsetColon](format/enum.Fixed.html#variant.TimezoneOffsetColon).","sig":null,"attributes":[{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":424926,"byte_end":424979,"line_start":435,"line_end":435,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1100},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":426616,"byte_end":426633,"line_start":481,"line_end":481,"column_start":12,"column_end":29},"name":"format_with_items","qualname":"<DateTime<Tz>>::format_with_items","value":"fn <'a, I, B> (&self, items: I) -> DelayedFormat<I>","parent":null,"children":[],"decl_id":null,"docs":" Formats the combined date and time with the specified formatting items.\n","sig":null,"attributes":[{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":426537,"byte_end":426590,"line_start":479,"line_end":479,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":426595,"byte_end":426604,"line_start":480,"line_end":480,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1104},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":427189,"byte_end":427195,"line_start":495,"line_end":495,"column_start":12,"column_end":18},"name":"format","qualname":"<DateTime<Tz>>::format","value":"fn <'a> (&self, fmt: &'a str) -> DelayedFormat<StrftimeItems<'a>>","parent":null,"children":[],"decl_id":null,"docs":" Formats the combined date and time with the specified format string.\n See the [`format::strftime` module](./format/strftime/index.html)\n on the supported escape sequences.\n","sig":null,"attributes":[{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":427110,"byte_end":427163,"line_start":493,"line_end":493,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":427168,"byte_end":427177,"line_start":494,"line_end":494,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":2196},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":445691,"byte_end":445714,"line_start":1093,"line_end":1093,"column_start":16,"column_end":39},"name":"SecondsTimestampVisitor","qualname":"::datetime::serde::SecondsTimestampVisitor","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2200},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":445772,"byte_end":445799,"line_start":1097,"line_end":1097,"column_start":16,"column_end":43},"name":"NanoSecondsTimestampVisitor","qualname":"::datetime::serde::NanoSecondsTimestampVisitor","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2204},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":445857,"byte_end":445885,"line_start":1101,"line_end":1101,"column_start":16,"column_end":44},"name":"MilliSecondsTimestampVisitor","qualname":"::datetime::serde::MilliSecondsTimestampVisitor","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1219},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":447705,"byte_end":447719,"line_start":1155,"line_end":1155,"column_start":13,"column_end":27},"name":"ts_nanoseconds","qualname":"::datetime::serde::ts_nanoseconds","value":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","parent":null,"children":[{"krate":0,"index":1220},{"krate":0,"index":1221},{"krate":0,"index":1224},{"krate":0,"index":1225},{"krate":0,"index":1228},{"krate":0,"index":1231},{"krate":0,"index":1233},{"krate":0,"index":1236}],"decl_id":null,"docs":" Ser/de to/from timestamps in nanoseconds","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1231},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":449253,"byte_end":449262,"line_start":1196,"line_end":1196,"column_start":16,"column_end":25},"name":"serialize","qualname":"::datetime::serde::ts_nanoseconds::serialize","value":"fn <S> (dt: &DateTime<Utc>, serializer: S) -> Result<S::Ok, S::Error>","parent":null,"children":[],"decl_id":null,"docs":" Serialize a UTC datetime into an integer number of nanoseconds since the epoch","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1233},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":450607,"byte_end":450618,"line_start":1231,"line_end":1231,"column_start":16,"column_end":27},"name":"deserialize","qualname":"::datetime::serde::ts_nanoseconds::deserialize","value":"fn <'de, D> (d: D) -> Result<DateTime<Utc>, D::Error>","parent":null,"children":[],"decl_id":null,"docs":" Deserialize a `DateTime` from a nanosecond timestamp","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1244},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":453273,"byte_end":453294,"line_start":1308,"line_end":1308,"column_start":13,"column_end":34},"name":"ts_nanoseconds_option","qualname":"::datetime::serde::ts_nanoseconds_option","value":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","parent":null,"children":[{"krate":0,"index":1245},{"krate":0,"index":1246},{"krate":0,"index":1249},{"krate":0,"index":1252},{"krate":0,"index":1253},{"krate":0,"index":1255},{"krate":0,"index":1258},{"krate":0,"index":1260}],"decl_id":null,"docs":" Ser/de to/from optional timestamps in nanoseconds","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1253},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":454819,"byte_end":454828,"line_start":1348,"line_end":1348,"column_start":16,"column_end":25},"name":"serialize","qualname":"::datetime::serde::ts_nanoseconds_option::serialize","value":"fn <S> (opt: &Option<DateTime<Utc>>, serializer: S) -> Result<S::Ok, S::Error>","parent":null,"children":[],"decl_id":null,"docs":" Serialize a UTC datetime into an integer number of nanoseconds since the epoch or none","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1255},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":456326,"byte_end":456337,"line_start":1386,"line_end":1386,"column_start":16,"column_end":27},"name":"deserialize","qualname":"::datetime::serde::ts_nanoseconds_option::deserialize","value":"fn <'de, D> (d: D) -> Result<Option<DateTime<Utc>>, D::Error>","parent":null,"children":[],"decl_id":null,"docs":" Deserialize a `DateTime` from a nanosecond timestamp or none","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1270},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":458970,"byte_end":458985,"line_start":1464,"line_end":1464,"column_start":13,"column_end":28},"name":"ts_milliseconds","qualname":"::datetime::serde::ts_milliseconds","value":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","parent":null,"children":[{"krate":0,"index":1271},{"krate":0,"index":1272},{"krate":0,"index":1275},{"krate":0,"index":1276},{"krate":0,"index":1279},{"krate":0,"index":1282},{"krate":0,"index":1284},{"krate":0,"index":1288}],"decl_id":null,"docs":" Ser/de to/from timestamps in milliseconds","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1282},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":460513,"byte_end":460522,"line_start":1505,"line_end":1505,"column_start":16,"column_end":25},"name":"serialize","qualname":"::datetime::serde::ts_milliseconds::serialize","value":"fn <S> (dt: &DateTime<Utc>, serializer: S) -> Result<S::Ok, S::Error>","parent":null,"children":[],"decl_id":null,"docs":" Serialize a UTC datetime into an integer number of milliseconds since the epoch","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1284},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":461866,"byte_end":461877,"line_start":1540,"line_end":1540,"column_start":16,"column_end":27},"name":"deserialize","qualname":"::datetime::serde::ts_milliseconds::deserialize","value":"fn <'de, D> (d: D) -> Result<DateTime<Utc>, D::Error>","parent":null,"children":[],"decl_id":null,"docs":" Deserialize a `DateTime` from a millisecond timestamp","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1296},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":464483,"byte_end":464505,"line_start":1614,"line_end":1614,"column_start":13,"column_end":35},"name":"ts_milliseconds_option","qualname":"::datetime::serde::ts_milliseconds_option","value":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","parent":null,"children":[{"krate":0,"index":1297},{"krate":0,"index":1298},{"krate":0,"index":1301},{"krate":0,"index":1304},{"krate":0,"index":1305},{"krate":0,"index":1307},{"krate":0,"index":1312},{"krate":0,"index":1314}],"decl_id":null,"docs":" Ser/de to/from optional timestamps in milliseconds","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1305},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":466024,"byte_end":466033,"line_start":1654,"line_end":1654,"column_start":16,"column_end":25},"name":"serialize","qualname":"::datetime::serde::ts_milliseconds_option::serialize","value":"fn <S> (opt: &Option<DateTime<Utc>>, serializer: S) -> Result<S::Ok, S::Error>","parent":null,"children":[],"decl_id":null,"docs":" Serialize a UTC datetime into an integer number of milliseconds since the epoch or none","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1307},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":468046,"byte_end":468057,"line_start":1704,"line_end":1704,"column_start":16,"column_end":27},"name":"deserialize","qualname":"::datetime::serde::ts_milliseconds_option::deserialize","value":"fn <'de, D> (d: D) -> Result<Option<DateTime<Utc>>, D::Error>","parent":null,"children":[],"decl_id":null,"docs":" Deserialize a `DateTime` from a millisecond timestamp or none","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1324},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":470731,"byte_end":470741,"line_start":1783,"line_end":1783,"column_start":13,"column_end":23},"name":"ts_seconds","qualname":"::datetime::serde::ts_seconds","value":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","parent":null,"children":[{"krate":0,"index":1325},{"krate":0,"index":1326},{"krate":0,"index":1329},{"krate":0,"index":1330},{"krate":0,"index":1333},{"krate":0,"index":1336},{"krate":0,"index":1338},{"krate":0,"index":1341}],"decl_id":null,"docs":" Ser/de to/from timestamps in seconds","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1336},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":472226,"byte_end":472235,"line_start":1824,"line_end":1824,"column_start":16,"column_end":25},"name":"serialize","qualname":"::datetime::serde::ts_seconds::serialize","value":"fn <S> (dt: &DateTime<Utc>, serializer: S) -> Result<S::Ok, S::Error>","parent":null,"children":[],"decl_id":null,"docs":" Serialize a UTC datetime into an integer number of seconds since the epoch","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1338},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":473548,"byte_end":473559,"line_start":1859,"line_end":1859,"column_start":16,"column_end":27},"name":"deserialize","qualname":"::datetime::serde::ts_seconds::deserialize","value":"fn <'de, D> (d: D) -> Result<DateTime<Utc>, D::Error>","parent":null,"children":[],"decl_id":null,"docs":" Deserialize a `DateTime` from a seconds timestamp","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1349},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":475876,"byte_end":475893,"line_start":1927,"line_end":1927,"column_start":13,"column_end":30},"name":"ts_seconds_option","qualname":"::datetime::serde::ts_seconds_option","value":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","parent":null,"children":[{"krate":0,"index":1350},{"krate":0,"index":1351},{"krate":0,"index":1354},{"krate":0,"index":1357},{"krate":0,"index":1358},{"krate":0,"index":1360},{"krate":0,"index":1363},{"krate":0,"index":1365}],"decl_id":null,"docs":" Ser/de to/from optional timestamps in seconds","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1358},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":477369,"byte_end":477378,"line_start":1967,"line_end":1967,"column_start":16,"column_end":25},"name":"serialize","qualname":"::datetime::serde::ts_seconds_option::serialize","value":"fn <S> (opt: &Option<DateTime<Utc>>, serializer: S) -> Result<S::Ok, S::Error>","parent":null,"children":[],"decl_id":null,"docs":" Serialize a UTC datetime into an integer number of seconds since the epoch or none","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1360},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":478844,"byte_end":478855,"line_start":2005,"line_end":2005,"column_start":16,"column_end":27},"name":"deserialize","qualname":"::datetime::serde::ts_seconds_option::deserialize","value":"fn <'de, D> (d: D) -> Result<Option<DateTime<Utc>>, D::Error>","parent":null,"children":[],"decl_id":null,"docs":" Deserialize a `DateTime` from a seconds timestamp or none","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1410},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"format","qualname":"::format","value":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","parent":null,"children":[{"krate":0,"index":1411},{"krate":0,"index":1412},{"krate":0,"index":1413},{"krate":0,"index":1414},{"krate":0,"index":1415},{"krate":0,"index":1418},{"krate":0,"index":1421},{"krate":0,"index":1424},{"krate":0,"index":1429},{"krate":0,"index":1430},{"krate":0,"index":1431},{"krate":0,"index":2208},{"krate":0,"index":2210},{"krate":0,"index":2212},{"krate":0,"index":2219},{"krate":0,"index":2216},{"krate":0,"index":2217},{"krate":0,"index":2213},{"krate":0,"index":2214},{"krate":0,"index":2221},{"krate":0,"index":2238},{"krate":0,"index":2236},{"krate":0,"index":2233},{"krate":0,"index":2234},{"krate":0,"index":2230},{"krate":0,"index":2231},{"krate":0,"index":2228},{"krate":0,"index":2239},{"krate":0,"index":2292},{"krate":0,"index":2288},{"krate":0,"index":2289},{"krate":0,"index":2285},{"krate":0,"index":2286},{"krate":0,"index":2283},{"krate":0,"index":1432},{"krate":0,"index":1434},{"krate":0,"index":1436},{"krate":0,"index":1438},{"krate":0,"index":1439},{"krate":0,"index":2294},{"krate":0,"index":2341},{"krate":0,"index":2337},{"krate":0,"index":2338},{"krate":0,"index":2334},{"krate":0,"index":2335},{"krate":0,"index":2332},{"krate":0,"index":2343},{"krate":0,"index":2354},{"krate":0,"index":2352},{"krate":0,"index":2348},{"krate":0,"index":2349},{"krate":0,"index":2345},{"krate":0,"index":2346},{"krate":0,"index":2356},{"krate":0,"index":2373},{"krate":0,"index":2371},{"krate":0,"index":2368},{"krate":0,"index":2369},{"krate":0,"index":2365},{"krate":0,"index":2366},{"krate":0,"index":2375},{"krate":0,"index":2412},{"krate":0,"index":2406},{"krate":0,"index":2408},{"krate":0,"index":2401},{"krate":0,"index":2403},{"krate":0,"index":2398},{"krate":0,"index":1441},{"krate":0,"index":1442},{"krate":0,"index":1443},{"krate":0,"index":1444},{"krate":0,"index":1445},{"krate":0,"index":1446},{"krate":0,"index":1447},{"krate":0,"index":2415},{"krate":0,"index":2428},{"krate":0,"index":2426},{"krate":0,"index":2422},{"krate":0,"index":2423},{"krate":0,"index":2419},{"krate":0,"index":2420},{"krate":0,"index":2418},{"krate":0,"index":2430},{"krate":0,"index":2454},{"krate":0,"index":2452},{"krate":0,"index":2449},{"krate":0,"index":2450},{"krate":0,"index":2446},{"krate":0,"index":2447},{"krate":0,"index":2445},{"krate":0,"index":1448},{"krate":0,"index":1450},{"krate":0,"index":1452},{"krate":0,"index":1454},{"krate":0,"index":1455},{"krate":0,"index":1456},{"krate":0,"index":1457},{"krate":0,"index":1458},{"krate":0,"index":1459},{"krate":0,"index":1460},{"krate":0,"index":1461},{"krate":0,"index":1463},{"krate":0,"index":1511},{"krate":0,"index":1515},{"krate":0,"index":1584},{"krate":0,"index":1653},{"krate":0,"index":1697},{"krate":0,"index":2506},{"krate":0,"index":2513},{"krate":0,"index":1728},{"krate":0,"index":1735},{"krate":0,"index":1740},{"krate":0,"index":1743}],"decl_id":null,"docs":" Formatting (and parsing) utilities for date and time.","sig":null,"attributes":[{"value":"allow(ellipsis_inclusive_range_patterns)","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":501286,"byte_end":501330,"line_start":18,"line_end":18,"column_start":1,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2222},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":502516,"byte_end":502520,"line_start":61,"line_end":61,"column_start":5,"column_end":9},"name":"None","qualname":"::format::Pad::None","value":"Pad::None","parent":{"krate":0,"index":2221},"children":[],"decl_id":null,"docs":" No padding.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2224},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":502554,"byte_end":502558,"line_start":63,"line_end":63,"column_start":5,"column_end":9},"name":"Zero","qualname":"::format::Pad::Zero","value":"Pad::Zero","parent":{"krate":0,"index":2221},"children":[],"decl_id":null,"docs":" Zero (`0`) padding.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2226},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":502587,"byte_end":502592,"line_start":65,"line_end":65,"column_start":5,"column_end":10},"name":"Space","qualname":"::format::Pad::Space","value":"Pad::Space","parent":{"krate":0,"index":2221},"children":[],"decl_id":null,"docs":" Space padding.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2221},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":502486,"byte_end":502489,"line_start":59,"line_end":59,"column_start":10,"column_end":13},"name":"Pad","qualname":"::format::Pad","value":"Pad::{None, Zero, Space}","parent":null,"children":[{"krate":0,"index":2222},{"krate":0,"index":2224},{"krate":0,"index":2226}],"decl_id":null,"docs":" Padding characters for numeric items.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2240},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":503488,"byte_end":503492,"line_start":85,"line_end":85,"column_start":5,"column_end":9},"name":"Year","qualname":"::format::Numeric::Year","value":"Numeric::Year","parent":{"krate":0,"index":2239},"children":[],"decl_id":null,"docs":" Full Gregorian year (FW=4, PW=∞).\n May accept years before 1 BCE or after 9999 CE, given an initial sign.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2242},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":503594,"byte_end":503604,"line_start":87,"line_end":87,"column_start":5,"column_end":15},"name":"YearDiv100","qualname":"::format::Numeric::YearDiv100","value":"Numeric::YearDiv100","parent":{"krate":0,"index":2239},"children":[],"decl_id":null,"docs":" Gregorian year divided by 100 (century number; FW=PW=2). Implies the non-negative year.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2244},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":503675,"byte_end":503685,"line_start":89,"line_end":89,"column_start":5,"column_end":15},"name":"YearMod100","qualname":"::format::Numeric::YearMod100","value":"Numeric::YearMod100","parent":{"krate":0,"index":2239},"children":[],"decl_id":null,"docs":" Gregorian year modulo 100 (FW=PW=2). Cannot be negative.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2246},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":503820,"byte_end":503827,"line_start":92,"line_end":92,"column_start":5,"column_end":12},"name":"IsoYear","qualname":"::format::Numeric::IsoYear","value":"Numeric::IsoYear","parent":{"krate":0,"index":2239},"children":[],"decl_id":null,"docs":" Year in the ISO week date (FW=4, PW=∞).\n May accept years before 1 BCE or after 9999 CE, given an initial sign.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2248},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":503925,"byte_end":503938,"line_start":94,"line_end":94,"column_start":5,"column_end":18},"name":"IsoYearDiv100","qualname":"::format::Numeric::IsoYearDiv100","value":"Numeric::IsoYearDiv100","parent":{"krate":0,"index":2239},"children":[],"decl_id":null,"docs":" Year in the ISO week date, divided by 100 (FW=PW=2). Implies the non-negative year.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2250},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":504021,"byte_end":504034,"line_start":96,"line_end":96,"column_start":5,"column_end":18},"name":"IsoYearMod100","qualname":"::format::Numeric::IsoYearMod100","value":"Numeric::IsoYearMod100","parent":{"krate":0,"index":2239},"children":[],"decl_id":null,"docs":" Year in the ISO week date, modulo 100 (FW=PW=2). Cannot be negative.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2252},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":504065,"byte_end":504070,"line_start":98,"line_end":98,"column_start":5,"column_end":10},"name":"Month","qualname":"::format::Numeric::Month","value":"Numeric::Month","parent":{"krate":0,"index":2239},"children":[],"decl_id":null,"docs":" Month (FW=PW=2).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2254},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":504112,"byte_end":504115,"line_start":100,"line_end":100,"column_start":5,"column_end":8},"name":"Day","qualname":"::format::Numeric::Day","value":"Numeric::Day","parent":{"krate":0,"index":2239},"children":[],"decl_id":null,"docs":" Day of the month (FW=PW=2).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2256},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":504208,"byte_end":504219,"line_start":102,"line_end":102,"column_start":5,"column_end":16},"name":"WeekFromSun","qualname":"::format::Numeric::WeekFromSun","value":"Numeric::WeekFromSun","parent":{"krate":0,"index":2239},"children":[],"decl_id":null,"docs":" Week number, where the week 1 starts at the first Sunday of January (FW=PW=2).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2258},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":504312,"byte_end":504323,"line_start":104,"line_end":104,"column_start":5,"column_end":16},"name":"WeekFromMon","qualname":"::format::Numeric::WeekFromMon","value":"Numeric::WeekFromMon","parent":{"krate":0,"index":2239},"children":[],"decl_id":null,"docs":" Week number, where the week 1 starts at the first Monday of January (FW=PW=2).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2260},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":504381,"byte_end":504388,"line_start":106,"line_end":106,"column_start":5,"column_end":12},"name":"IsoWeek","qualname":"::format::Numeric::IsoWeek","value":"Numeric::IsoWeek","parent":{"krate":0,"index":2239},"children":[],"decl_id":null,"docs":" Week number in the ISO week date (FW=PW=2).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2262},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":504464,"byte_end":504478,"line_start":108,"line_end":108,"column_start":5,"column_end":19},"name":"NumDaysFromSun","qualname":"::format::Numeric::NumDaysFromSun","value":"Numeric::NumDaysFromSun","parent":{"krate":0,"index":2239},"children":[],"decl_id":null,"docs":" Day of the week, where Sunday = 0 and Saturday = 6 (FW=PW=1).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2264},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":504552,"byte_end":504566,"line_start":110,"line_end":110,"column_start":5,"column_end":19},"name":"WeekdayFromMon","qualname":"::format::Numeric::WeekdayFromMon","value":"Numeric::WeekdayFromMon","parent":{"krate":0,"index":2239},"children":[],"decl_id":null,"docs":" Day of the week, where Monday = 1 and Sunday = 7 (FW=PW=1).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2266},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":504607,"byte_end":504614,"line_start":112,"line_end":112,"column_start":5,"column_end":12},"name":"Ordinal","qualname":"::format::Numeric::Ordinal","value":"Numeric::Ordinal","parent":{"krate":0,"index":2239},"children":[],"decl_id":null,"docs":" Day of the year (FW=PW=3).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2268},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":504673,"byte_end":504677,"line_start":114,"line_end":114,"column_start":5,"column_end":9},"name":"Hour","qualname":"::format::Numeric::Hour","value":"Numeric::Hour","parent":{"krate":0,"index":2239},"children":[],"decl_id":null,"docs":" Hour number in the 24-hour clocks (FW=PW=2).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2270},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":504736,"byte_end":504742,"line_start":116,"line_end":116,"column_start":5,"column_end":11},"name":"Hour12","qualname":"::format::Numeric::Hour12","value":"Numeric::Hour12","parent":{"krate":0,"index":2239},"children":[],"decl_id":null,"docs":" Hour number in the 12-hour clocks (FW=PW=2).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2272},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":504815,"byte_end":504821,"line_start":118,"line_end":118,"column_start":5,"column_end":11},"name":"Minute","qualname":"::format::Numeric::Minute","value":"Numeric::Minute","parent":{"krate":0,"index":2239},"children":[],"decl_id":null,"docs":" The number of minutes since the last whole hour (FW=PW=2).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2274},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":504896,"byte_end":504902,"line_start":120,"line_end":120,"column_start":5,"column_end":11},"name":"Second","qualname":"::format::Numeric::Second","value":"Numeric::Second","parent":{"krate":0,"index":2239},"children":[],"decl_id":null,"docs":" The number of seconds since the last whole minute (FW=PW=2).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2276},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":505105,"byte_end":505115,"line_start":124,"line_end":124,"column_start":5,"column_end":15},"name":"Nanosecond","qualname":"::format::Numeric::Nanosecond","value":"Numeric::Nanosecond","parent":{"krate":0,"index":2239},"children":[],"decl_id":null,"docs":" The number of nanoseconds since the last whole second (FW=PW=9).\n Note that this is *not* left-aligned;\n see also [`Fixed::Nanosecond`](./enum.Fixed.html#variant.Nanosecond).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2278},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":505295,"byte_end":505304,"line_start":127,"line_end":127,"column_start":5,"column_end":14},"name":"Timestamp","qualname":"::format::Numeric::Timestamp","value":"Numeric::Timestamp","parent":{"krate":0,"index":2239},"children":[],"decl_id":null,"docs":" The number of non-leap seconds since the midnight UTC on January 1, 1970 (FW=1, PW=∞).\n For formatting, it assumes UTC upon the absence of time zone offset.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2280},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":505523,"byte_end":505531,"line_start":133,"line_end":133,"column_start":5,"column_end":13},"name":"Internal","qualname":"::format::Numeric::Internal","value":"Numeric::Internal(InternalNumeric)","parent":{"krate":0,"index":2239},"children":[],"decl_id":null,"docs":" Internal uses only.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2239},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":503351,"byte_end":503358,"line_start":82,"line_end":82,"column_start":10,"column_end":17},"name":"Numeric","qualname":"::format::Numeric","value":"Numeric::{Year, YearDiv100, YearMod100, IsoYear, IsoYearDiv100, IsoYearMod100, Month, Day, WeekFromSun, WeekFromMon, IsoWeek, NumDaysFromSun, WeekdayFromMon, Ordinal, Hour, Hour12, Minute, Second, Nanosecond, Timestamp, Internal}","parent":null,"children":[{"krate":0,"index":2240},{"krate":0,"index":2242},{"krate":0,"index":2244},{"krate":0,"index":2246},{"krate":0,"index":2248},{"krate":0,"index":2250},{"krate":0,"index":2252},{"krate":0,"index":2254},{"krate":0,"index":2256},{"krate":0,"index":2258},{"krate":0,"index":2260},{"krate":0,"index":2262},{"krate":0,"index":2264},{"krate":0,"index":2266},{"krate":0,"index":2268},{"krate":0,"index":2270},{"krate":0,"index":2272},{"krate":0,"index":2274},{"krate":0,"index":2276},{"krate":0,"index":2278},{"krate":0,"index":2280}],"decl_id":null,"docs":" Numeric item types.\n They have associated formatting width (FW) and parsing width (PW).","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1432},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":505639,"byte_end":505654,"line_start":137,"line_end":137,"column_start":12,"column_end":27},"name":"InternalNumeric","qualname":"::format::InternalNumeric","value":"InternalNumeric {  }","parent":null,"children":[{"krate":0,"index":1433}],"decl_id":null,"docs":" An opaque type representing numeric item types for internal uses only.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2295},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":506452,"byte_end":506466,"line_start":170,"line_end":170,"column_start":5,"column_end":19},"name":"ShortMonthName","qualname":"::format::Fixed::ShortMonthName","value":"Fixed::ShortMonthName","parent":{"krate":0,"index":2294},"children":[],"decl_id":null,"docs":" Abbreviated month names.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2297},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":506599,"byte_end":506612,"line_start":174,"line_end":174,"column_start":5,"column_end":18},"name":"LongMonthName","qualname":"::format::Fixed::LongMonthName","value":"Fixed::LongMonthName","parent":{"krate":0,"index":2294},"children":[],"decl_id":null,"docs":" Full month names.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2299},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":506761,"byte_end":506777,"line_start":178,"line_end":178,"column_start":5,"column_end":21},"name":"ShortWeekdayName","qualname":"::format::Fixed::ShortWeekdayName","value":"Fixed::ShortWeekdayName","parent":{"krate":0,"index":2294},"children":[],"decl_id":null,"docs":" Abbreviated day of the week names.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2301},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":506920,"byte_end":506935,"line_start":182,"line_end":182,"column_start":5,"column_end":20},"name":"LongWeekdayName","qualname":"::format::Fixed::LongWeekdayName","value":"Fixed::LongWeekdayName","parent":{"krate":0,"index":2294},"children":[],"decl_id":null,"docs":" Full day of the week names.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2303},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":507013,"byte_end":507022,"line_start":186,"line_end":186,"column_start":5,"column_end":14},"name":"LowerAmPm","qualname":"::format::Fixed::LowerAmPm","value":"Fixed::LowerAmPm","parent":{"krate":0,"index":2294},"children":[],"decl_id":null,"docs":" AM/PM.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2305},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":507100,"byte_end":507109,"line_start":190,"line_end":190,"column_start":5,"column_end":14},"name":"UpperAmPm","qualname":"::format::Fixed::UpperAmPm","value":"Fixed::UpperAmPm","parent":{"krate":0,"index":2294},"children":[],"decl_id":null,"docs":" AM/PM.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2307},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":507356,"byte_end":507366,"line_start":194,"line_end":194,"column_start":5,"column_end":15},"name":"Nanosecond","qualname":"::format::Fixed::Nanosecond","value":"Fixed::Nanosecond","parent":{"krate":0,"index":2294},"children":[],"decl_id":null,"docs":" An optional dot plus one or more digits for left-aligned nanoseconds.\n May print nothing, 3, 6 or 9 digits according to the available accuracy.\n See also [`Numeric::Nanosecond`](./enum.Numeric.html#variant.Nanosecond).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2309},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":507456,"byte_end":507467,"line_start":196,"line_end":196,"column_start":5,"column_end":16},"name":"Nanosecond3","qualname":"::format::Fixed::Nanosecond3","value":"Fixed::Nanosecond3","parent":{"krate":0,"index":2294},"children":[],"decl_id":null,"docs":" Same as [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 3.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2311},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":507557,"byte_end":507568,"line_start":198,"line_end":198,"column_start":5,"column_end":16},"name":"Nanosecond6","qualname":"::format::Fixed::Nanosecond6","value":"Fixed::Nanosecond6","parent":{"krate":0,"index":2294},"children":[],"decl_id":null,"docs":" Same as [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 6.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2313},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":507658,"byte_end":507669,"line_start":200,"line_end":200,"column_start":5,"column_end":16},"name":"Nanosecond9","qualname":"::format::Fixed::Nanosecond9","value":"Fixed::Nanosecond9","parent":{"krate":0,"index":2294},"children":[],"decl_id":null,"docs":" Same as [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 9.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2315},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":507790,"byte_end":507802,"line_start":204,"line_end":204,"column_start":5,"column_end":17},"name":"TimezoneName","qualname":"::format::Fixed::TimezoneName","value":"Fixed::TimezoneName","parent":{"krate":0,"index":2294},"children":[],"decl_id":null,"docs":" Timezone name.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2317},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":508137,"byte_end":508156,"line_start":210,"line_end":210,"column_start":5,"column_end":24},"name":"TimezoneOffsetColon","qualname":"::format::Fixed::TimezoneOffsetColon","value":"Fixed::TimezoneOffsetColon","parent":{"krate":0,"index":2294},"children":[],"decl_id":null,"docs":" Offset from the local time to UTC (`+09:00` or `-04:00` or `+00:00`).","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2319},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":508548,"byte_end":508568,"line_start":217,"line_end":217,"column_start":5,"column_end":25},"name":"TimezoneOffsetColonZ","qualname":"::format::Fixed::TimezoneOffsetColonZ","value":"Fixed::TimezoneOffsetColonZ","parent":{"krate":0,"index":2294},"children":[],"decl_id":null,"docs":" Offset from the local time to UTC (`+09:00` or `-04:00` or `Z`).","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2321},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":508707,"byte_end":508721,"line_start":220,"line_end":220,"column_start":5,"column_end":19},"name":"TimezoneOffset","qualname":"::format::Fixed::TimezoneOffset","value":"Fixed::TimezoneOffset","parent":{"krate":0,"index":2294},"children":[],"decl_id":null,"docs":" Same as [`TimezoneOffsetColon`](#variant.TimezoneOffsetColon) but prints no colon.\n Parsing allows an optional colon.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2323},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":508862,"byte_end":508877,"line_start":223,"line_end":223,"column_start":5,"column_end":20},"name":"TimezoneOffsetZ","qualname":"::format::Fixed::TimezoneOffsetZ","value":"Fixed::TimezoneOffsetZ","parent":{"krate":0,"index":2294},"children":[],"decl_id":null,"docs":" Same as [`TimezoneOffsetColonZ`](#variant.TimezoneOffsetColonZ) but prints no colon.\n Parsing allows an optional colon.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2325},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":508970,"byte_end":508977,"line_start":225,"line_end":225,"column_start":5,"column_end":12},"name":"RFC2822","qualname":"::format::Fixed::RFC2822","value":"Fixed::RFC2822","parent":{"krate":0,"index":2294},"children":[],"decl_id":null,"docs":" RFC 2822 date and time syntax. Commonly used for email and MIME date and time.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2327},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":509033,"byte_end":509040,"line_start":227,"line_end":227,"column_start":5,"column_end":12},"name":"RFC3339","qualname":"::format::Fixed::RFC3339","value":"Fixed::RFC3339","parent":{"krate":0,"index":2294},"children":[],"decl_id":null,"docs":" RFC 3339 & ISO 8601 date and time syntax.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2329},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":509259,"byte_end":509267,"line_start":233,"line_end":233,"column_start":5,"column_end":13},"name":"Internal","qualname":"::format::Fixed::Internal","value":"Fixed::Internal(InternalFixed)","parent":{"krate":0,"index":2294},"children":[],"decl_id":null,"docs":" Internal uses only.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2294},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":506307,"byte_end":506312,"line_start":166,"line_end":166,"column_start":10,"column_end":15},"name":"Fixed","qualname":"::format::Fixed","value":"Fixed::{ShortMonthName, LongMonthName, ShortWeekdayName, LongWeekdayName, LowerAmPm, UpperAmPm, Nanosecond, Nanosecond3, Nanosecond6, Nanosecond9, TimezoneName, TimezoneOffsetColon, TimezoneOffsetColonZ, TimezoneOffset, TimezoneOffsetZ, RFC2822, RFC3339, Internal}","parent":null,"children":[{"krate":0,"index":2295},{"krate":0,"index":2297},{"krate":0,"index":2299},{"krate":0,"index":2301},{"krate":0,"index":2303},{"krate":0,"index":2305},{"krate":0,"index":2307},{"krate":0,"index":2309},{"krate":0,"index":2311},{"krate":0,"index":2313},{"krate":0,"index":2315},{"krate":0,"index":2317},{"krate":0,"index":2319},{"krate":0,"index":2321},{"krate":0,"index":2323},{"krate":0,"index":2325},{"krate":0,"index":2327},{"krate":0,"index":2329}],"decl_id":null,"docs":" Fixed-format item types.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2343},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":509417,"byte_end":509430,"line_start":238,"line_end":238,"column_start":12,"column_end":25},"name":"InternalFixed","qualname":"::format::InternalFixed","value":"InternalFixed {  }","parent":null,"children":[{"krate":0,"index":2344}],"decl_id":null,"docs":" An opaque type representing fixed-format item types for internal uses only.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2377},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":510446,"byte_end":510453,"line_start":265,"line_end":265,"column_start":5,"column_end":12},"name":"Literal","qualname":"::format::Item::Literal","value":"Item::Literal(&'a str)","parent":{"krate":0,"index":2375},"children":[],"decl_id":null,"docs":" A literally printed and parsed text.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2380},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":510591,"byte_end":510603,"line_start":268,"line_end":268,"column_start":5,"column_end":17},"name":"OwnedLiteral","qualname":"::format::Item::OwnedLiteral","value":"Item::OwnedLiteral(Box<str>)","parent":{"krate":0,"index":2375},"children":[],"decl_id":null,"docs":" Same as `Literal` but with the string owned by the item.\n","sig":null,"attributes":[{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":510533,"byte_end":510586,"line_start":267,"line_end":267,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2383},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":510691,"byte_end":510696,"line_start":270,"line_end":270,"column_start":5,"column_end":10},"name":"Space","qualname":"::format::Item::Space","value":"Item::Space(&'a str)","parent":{"krate":0,"index":2375},"children":[],"decl_id":null,"docs":" Whitespace. Prints literally but reads zero or more whitespace.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2386},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":510832,"byte_end":510842,"line_start":273,"line_end":273,"column_start":5,"column_end":15},"name":"OwnedSpace","qualname":"::format::Item::OwnedSpace","value":"Item::OwnedSpace(Box<str>)","parent":{"krate":0,"index":2375},"children":[],"decl_id":null,"docs":" Same as `Space` but with the string owned by the item.\n","sig":null,"attributes":[{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":510774,"byte_end":510827,"line_start":272,"line_end":272,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2389},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":511021,"byte_end":511028,"line_start":276,"line_end":276,"column_start":5,"column_end":12},"name":"Numeric","qualname":"::format::Item::Numeric","value":"Item::Numeric(Numeric, Pad)","parent":{"krate":0,"index":2375},"children":[],"decl_id":null,"docs":" Numeric item. Can be optionally padded to the maximal length (if any) when formatting;\n the parser simply ignores any padded whitespace and zeroes.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2393},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":511075,"byte_end":511080,"line_start":278,"line_end":278,"column_start":5,"column_end":10},"name":"Fixed","qualname":"::format::Item::Fixed","value":"Item::Fixed(Fixed)","parent":{"krate":0,"index":2375},"children":[],"decl_id":null,"docs":" Fixed-format item.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2396},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":511169,"byte_end":511174,"line_start":280,"line_end":280,"column_start":5,"column_end":10},"name":"Error","qualname":"::format::Item::Error","value":"Item::Error","parent":{"krate":0,"index":2375},"children":[],"decl_id":null,"docs":" Issues a formatting error. Used to signal an invalid format string.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2375},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":510386,"byte_end":510390,"line_start":263,"line_end":263,"column_start":10,"column_end":14},"name":"Item","qualname":"::format::Item","value":"Item::{Literal, OwnedLiteral, Space, OwnedSpace, Numeric, Fixed, Error}","parent":null,"children":[{"krate":0,"index":2377},{"krate":0,"index":2380},{"krate":0,"index":2383},{"krate":0,"index":2386},{"krate":0,"index":2389},{"krate":0,"index":2393},{"krate":0,"index":2396}],"decl_id":null,"docs":" A single formatting item. This is used for both formatting and parsing.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2415},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":511922,"byte_end":511932,"line_start":321,"line_end":321,"column_start":12,"column_end":22},"name":"ParseError","qualname":"::format::ParseError","value":"","parent":null,"children":[],"decl_id":null,"docs":" An error from the `parse` function.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1448},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":513200,"byte_end":513211,"line_start":356,"line_end":356,"column_start":10,"column_end":21},"name":"ParseResult","qualname":"::format::ParseResult","value":"Result<T, ParseError>","parent":null,"children":[],"decl_id":null,"docs":" Same as `Result<T, ParseError>`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1461},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":514781,"byte_end":514792,"line_start":391,"line_end":391,"column_start":8,"column_end":19},"name":"format_item","qualname":"::format::format_item","value":"fn <'a> (w: &mut fmt::Formatter, date: Option<&NaiveDate>, time: Option<&NaiveTime>, off: Option<&(String, FixedOffset)>, item: &Item<'a>) -> fmt::Result","parent":null,"children":[],"decl_id":null,"docs":" Formats single formatting item\n","sig":null,"attributes":[{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":514720,"byte_end":514773,"line_start":390,"line_end":390,"column_start":1,"column_end":54}}]},{"kind":"Function","id":{"krate":0,"index":1511},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":528113,"byte_end":528119,"line_start":689,"line_end":689,"column_start":8,"column_end":14},"name":"format","qualname":"::format::format","value":"fn <'a, I, B> (w: &mut fmt::Formatter, date: Option<&NaiveDate>, time: Option<&NaiveTime>, off: Option<&(String, FixedOffset)>, items: I) -> fmt::Result","parent":null,"children":[],"decl_id":null,"docs":" Tries to format given arguments with given formatting items.\n Internally used by `DelayedFormat`.\n","sig":null,"attributes":[{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":528052,"byte_end":528105,"line_start":688,"line_end":688,"column_start":1,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":2456},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":536491,"byte_end":536497,"line_start":27,"line_end":27,"column_start":12,"column_end":18},"name":"Parsed","qualname":"::format::parsed::Parsed","value":"Parsed { year, year_div_100, year_mod_100, isoyear, isoyear_div_100, isoyear_mod_100, month, week_from_sun, week_from_mon, isoweek, weekday, ordinal, day, hour_div_12, hour_mod_12, minute, second, nanosecond, timestamp, offset }","parent":null,"children":[{"krate":0,"index":2457},{"krate":0,"index":2458},{"krate":0,"index":2459},{"krate":0,"index":2460},{"krate":0,"index":2461},{"krate":0,"index":2462},{"krate":0,"index":2463},{"krate":0,"index":2464},{"krate":0,"index":2465},{"krate":0,"index":2466},{"krate":0,"index":2467},{"krate":0,"index":2468},{"krate":0,"index":2469},{"krate":0,"index":2470},{"krate":0,"index":2471},{"krate":0,"index":2472},{"krate":0,"index":2473},{"krate":0,"index":2474},{"krate":0,"index":2475},{"krate":0,"index":2476},{"krate":0,"index":2477}],"decl_id":null,"docs":" Parsed parts of date and time. There are two classes of methods:","sig":null,"attributes":[{"value":"allow(missing_copy_implementations)","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":536406,"byte_end":536444,"line_start":25,"line_end":25,"column_start":1,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":2457},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":536674,"byte_end":536678,"line_start":32,"line_end":32,"column_start":9,"column_end":13},"name":"year","qualname":"::format::parsed::Parsed::year","value":"std::option::Option<i32>","parent":{"krate":0,"index":2456},"children":[],"decl_id":null,"docs":" Year.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2458},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":536982,"byte_end":536994,"line_start":39,"line_end":39,"column_start":9,"column_end":21},"name":"year_div_100","qualname":"::format::parsed::Parsed::year_div_100","value":"std::option::Option<i32>","parent":{"krate":0,"index":2456},"children":[],"decl_id":null,"docs":" Year divided by 100. Implies that the year is >= 1 BCE when set.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2459},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":537087,"byte_end":537099,"line_start":42,"line_end":42,"column_start":9,"column_end":21},"name":"year_mod_100","qualname":"::format::parsed::Parsed::year_mod_100","value":"std::option::Option<i32>","parent":{"krate":0,"index":2456},"children":[],"decl_id":null,"docs":" Year modulo 100. Implies that the year is >= 1 BCE when set.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2460},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":537366,"byte_end":537373,"line_start":48,"line_end":48,"column_start":9,"column_end":16},"name":"isoyear","qualname":"::format::parsed::Parsed::isoyear","value":"std::option::Option<i32>","parent":{"krate":0,"index":2456},"children":[],"decl_id":null,"docs":" Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date).","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2461},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":537760,"byte_end":537775,"line_start":56,"line_end":56,"column_start":9,"column_end":24},"name":"isoyear_div_100","qualname":"::format::parsed::Parsed::isoyear_div_100","value":"std::option::Option<i32>","parent":{"krate":0,"index":2456},"children":[],"decl_id":null,"docs":" Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date), divided by 100.\n Implies that the year is >= 1 BCE when set.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2462},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":537942,"byte_end":537957,"line_start":60,"line_end":60,"column_start":9,"column_end":24},"name":"isoyear_mod_100","qualname":"::format::parsed::Parsed::isoyear_mod_100","value":"std::option::Option<i32>","parent":{"krate":0,"index":2456},"children":[],"decl_id":null,"docs":" Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date), modulo 100.\n Implies that the year is >= 1 BCE when set.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2463},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":538004,"byte_end":538009,"line_start":63,"line_end":63,"column_start":9,"column_end":14},"name":"month","qualname":"::format::parsed::Parsed::month","value":"std::option::Option<u32>","parent":{"krate":0,"index":2456},"children":[],"decl_id":null,"docs":" Month (1--12).\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2464},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":538164,"byte_end":538177,"line_start":67,"line_end":67,"column_start":9,"column_end":22},"name":"week_from_sun","qualname":"::format::parsed::Parsed::week_from_sun","value":"std::option::Option<u32>","parent":{"krate":0,"index":2456},"children":[],"decl_id":null,"docs":" Week number, where the week 1 starts at the first Sunday of January\n (0--53, 1--53 or 1--52 depending on the year).\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2465},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":538332,"byte_end":538345,"line_start":71,"line_end":71,"column_start":9,"column_end":22},"name":"week_from_mon","qualname":"::format::parsed::Parsed::week_from_mon","value":"std::option::Option<u32>","parent":{"krate":0,"index":2456},"children":[],"decl_id":null,"docs":" Week number, where the week 1 starts at the first Monday of January\n (0--53, 1--53 or 1--52 depending on the year).\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2466},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":538485,"byte_end":538492,"line_start":75,"line_end":75,"column_start":9,"column_end":16},"name":"isoweek","qualname":"::format::parsed::Parsed::isoweek","value":"std::option::Option<u32>","parent":{"krate":0,"index":2456},"children":[],"decl_id":null,"docs":" [ISO week number](../naive/struct.NaiveDate.html#week-date)\n (1--52 or 1--53 depending on the year).\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2467},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":538541,"byte_end":538548,"line_start":78,"line_end":78,"column_start":9,"column_end":16},"name":"weekday","qualname":"::format::parsed::Parsed::weekday","value":"std::option::Option<Weekday>","parent":{"krate":0,"index":2456},"children":[],"decl_id":null,"docs":" Day of the week.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2468},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":538642,"byte_end":538649,"line_start":81,"line_end":81,"column_start":9,"column_end":16},"name":"ordinal","qualname":"::format::parsed::Parsed::ordinal","value":"std::option::Option<u32>","parent":{"krate":0,"index":2456},"children":[],"decl_id":null,"docs":" Day of the year (1--365 or 1--366 depending on the year).\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2469},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":538753,"byte_end":538756,"line_start":84,"line_end":84,"column_start":9,"column_end":12},"name":"day","qualname":"::format::parsed::Parsed::day","value":"std::option::Option<u32>","parent":{"krate":0,"index":2456},"children":[],"decl_id":null,"docs":" Day of the month (1--28, 1--29, 1--30 or 1--31 depending on the month).\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2470},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":538857,"byte_end":538868,"line_start":87,"line_end":87,"column_start":9,"column_end":20},"name":"hour_div_12","qualname":"::format::parsed::Parsed::hour_div_12","value":"std::option::Option<u32>","parent":{"krate":0,"index":2456},"children":[],"decl_id":null,"docs":" Hour number divided by 12 (0--1). 0 indicates AM and 1 indicates PM.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2471},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":538931,"byte_end":538942,"line_start":90,"line_end":90,"column_start":9,"column_end":20},"name":"hour_mod_12","qualname":"::format::parsed::Parsed::hour_mod_12","value":"std::option::Option<u32>","parent":{"krate":0,"index":2456},"children":[],"decl_id":null,"docs":" Hour number modulo 12 (0--11).\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2472},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":538997,"byte_end":539003,"line_start":93,"line_end":93,"column_start":9,"column_end":15},"name":"minute","qualname":"::format::parsed::Parsed::minute","value":"std::option::Option<u32>","parent":{"krate":0,"index":2456},"children":[],"decl_id":null,"docs":" Minute number (0--59).\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2473},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":539087,"byte_end":539093,"line_start":96,"line_end":96,"column_start":9,"column_end":15},"name":"second","qualname":"::format::parsed::Parsed::second","value":"std::option::Option<u32>","parent":{"krate":0,"index":2456},"children":[],"decl_id":null,"docs":" Second number (0--60, accounting for leap seconds).\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2474},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":539192,"byte_end":539202,"line_start":99,"line_end":99,"column_start":9,"column_end":19},"name":"nanosecond","qualname":"::format::parsed::Parsed::nanosecond","value":"std::option::Option<u32>","parent":{"krate":0,"index":2456},"children":[],"decl_id":null,"docs":" The number of nanoseconds since the whole second (0--999,999,999).\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2475},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":539405,"byte_end":539414,"line_start":104,"line_end":104,"column_start":9,"column_end":18},"name":"timestamp","qualname":"::format::parsed::Parsed::timestamp","value":"std::option::Option<i64>","parent":{"krate":0,"index":2456},"children":[],"decl_id":null,"docs":" The number of non-leap seconds since the midnight UTC on January 1, 1970.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2476},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":539493,"byte_end":539499,"line_start":107,"line_end":107,"column_start":9,"column_end":15},"name":"offset","qualname":"::format::parsed::Parsed::offset","value":"std::option::Option<i32>","parent":{"krate":0,"index":2456},"children":[],"decl_id":null,"docs":" Offset from the local time to UTC, in seconds.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1543},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":540828,"byte_end":540831,"line_start":159,"line_end":159,"column_start":12,"column_end":15},"name":"new","qualname":"<Parsed>::new","value":"fn () -> Parsed","parent":null,"children":[],"decl_id":null,"docs":" Returns the initial value of parsed parts.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1544},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":540981,"byte_end":540989,"line_start":165,"line_end":165,"column_start":12,"column_end":20},"name":"set_year","qualname":"<Parsed>::set_year","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`year`](#structfield.year) field from given value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":540960,"byte_end":540969,"line_start":164,"line_end":164,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1545},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":541238,"byte_end":541254,"line_start":171,"line_end":171,"column_start":12,"column_end":28},"name":"set_year_div_100","qualname":"<Parsed>::set_year_div_100","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`year_div_100`](#structfield.year_div_100) field from given value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":541217,"byte_end":541226,"line_start":170,"line_end":170,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1546},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":541582,"byte_end":541598,"line_start":180,"line_end":180,"column_start":12,"column_end":28},"name":"set_year_mod_100","qualname":"<Parsed>::set_year_mod_100","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`year_mod_100`](#structfield.year_mod_100) field from given value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":541561,"byte_end":541570,"line_start":179,"line_end":179,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1547},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":541916,"byte_end":541927,"line_start":189,"line_end":189,"column_start":12,"column_end":23},"name":"set_isoyear","qualname":"<Parsed>::set_isoyear","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`isoyear`](#structfield.isoyear) field from given value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":541895,"byte_end":541904,"line_start":188,"line_end":188,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1548},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":542185,"byte_end":542204,"line_start":195,"line_end":195,"column_start":12,"column_end":31},"name":"set_isoyear_div_100","qualname":"<Parsed>::set_isoyear_div_100","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`isoyear_div_100`](#structfield.isoyear_div_100) field from given value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":542164,"byte_end":542173,"line_start":194,"line_end":194,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1549},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":542541,"byte_end":542560,"line_start":204,"line_end":204,"column_start":12,"column_end":31},"name":"set_isoyear_mod_100","qualname":"<Parsed>::set_isoyear_mod_100","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`isoyear_mod_100`](#structfield.isoyear_mod_100) field from given value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":542520,"byte_end":542529,"line_start":203,"line_end":203,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1550},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":542877,"byte_end":542886,"line_start":213,"line_end":213,"column_start":12,"column_end":21},"name":"set_month","qualname":"<Parsed>::set_month","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`month`](#structfield.month) field from given value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":542856,"byte_end":542865,"line_start":212,"line_end":212,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1551},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":543138,"byte_end":543155,"line_start":219,"line_end":219,"column_start":12,"column_end":29},"name":"set_week_from_sun","qualname":"<Parsed>::set_week_from_sun","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`week_from_sun`](#structfield.week_from_sun) field from given value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":543117,"byte_end":543126,"line_start":218,"line_end":218,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1552},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":543415,"byte_end":543432,"line_start":225,"line_end":225,"column_start":12,"column_end":29},"name":"set_week_from_mon","qualname":"<Parsed>::set_week_from_mon","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`week_from_mon`](#structfield.week_from_mon) field from given value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":543394,"byte_end":543403,"line_start":224,"line_end":224,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1553},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":543680,"byte_end":543691,"line_start":231,"line_end":231,"column_start":12,"column_end":23},"name":"set_isoweek","qualname":"<Parsed>::set_isoweek","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`isoweek`](#structfield.isoweek) field from given value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":543659,"byte_end":543668,"line_start":230,"line_end":230,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1554},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":543933,"byte_end":543944,"line_start":237,"line_end":237,"column_start":12,"column_end":23},"name":"set_weekday","qualname":"<Parsed>::set_weekday","value":"fn (&mut self, value: Weekday) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`weekday`](#structfield.weekday) field from given value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":543912,"byte_end":543921,"line_start":236,"line_end":236,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1555},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":544160,"byte_end":544171,"line_start":243,"line_end":243,"column_start":12,"column_end":23},"name":"set_ordinal","qualname":"<Parsed>::set_ordinal","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`ordinal`](#structfield.ordinal) field from given value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":544139,"byte_end":544148,"line_start":242,"line_end":242,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1556},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":544405,"byte_end":544412,"line_start":249,"line_end":249,"column_start":12,"column_end":19},"name":"set_day","qualname":"<Parsed>::set_day","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`day`](#structfield.day) field from given value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":544384,"byte_end":544393,"line_start":248,"line_end":248,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1557},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":544698,"byte_end":544706,"line_start":256,"line_end":256,"column_start":12,"column_end":20},"name":"set_ampm","qualname":"<Parsed>::set_ampm","value":"fn (&mut self, value: bool) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`hour_div_12`](#structfield.hour_div_12) field from given value.\n (`false` for AM, `true` for PM)\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":544677,"byte_end":544686,"line_start":255,"line_end":255,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1558},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":544983,"byte_end":544993,"line_start":263,"line_end":263,"column_start":12,"column_end":22},"name":"set_hour12","qualname":"<Parsed>::set_hour12","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`hour_mod_12`](#structfield.hour_mod_12) field from\n given hour number in 12-hour clocks.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":544962,"byte_end":544971,"line_start":262,"line_end":262,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1559},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":545370,"byte_end":545378,"line_start":273,"line_end":273,"column_start":12,"column_end":20},"name":"set_hour","qualname":"<Parsed>::set_hour","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set both [`hour_div_12`](#structfield.hour_div_12) and\n [`hour_mod_12`](#structfield.hour_mod_12) fields from given value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":545349,"byte_end":545358,"line_start":272,"line_end":272,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1560},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":545722,"byte_end":545732,"line_start":282,"line_end":282,"column_start":12,"column_end":22},"name":"set_minute","qualname":"<Parsed>::set_minute","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`minute`](#structfield.minute) field from given value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":545701,"byte_end":545710,"line_start":281,"line_end":281,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1561},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":545971,"byte_end":545981,"line_start":288,"line_end":288,"column_start":12,"column_end":22},"name":"set_second","qualname":"<Parsed>::set_second","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`second`](#structfield.second) field from given value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":545950,"byte_end":545959,"line_start":287,"line_end":287,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1562},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":546228,"byte_end":546242,"line_start":294,"line_end":294,"column_start":12,"column_end":26},"name":"set_nanosecond","qualname":"<Parsed>::set_nanosecond","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`nanosecond`](#structfield.nanosecond) field from given value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":546207,"byte_end":546216,"line_start":293,"line_end":293,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1563},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":546491,"byte_end":546504,"line_start":300,"line_end":300,"column_start":12,"column_end":25},"name":"set_timestamp","qualname":"<Parsed>::set_timestamp","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`timestamp`](#structfield.timestamp) field from given value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":546470,"byte_end":546479,"line_start":299,"line_end":299,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1564},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":546716,"byte_end":546726,"line_start":306,"line_end":306,"column_start":12,"column_end":22},"name":"set_offset","qualname":"<Parsed>::set_offset","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`offset`](#structfield.offset) field from given value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":546695,"byte_end":546704,"line_start":305,"line_end":305,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1565},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":547370,"byte_end":547383,"line_start":321,"line_end":321,"column_start":12,"column_end":25},"name":"to_naive_date","qualname":"<Parsed>::to_naive_date","value":"fn (&self) -> ParseResult<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed naive date out of given fields.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1573},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":556702,"byte_end":556715,"line_start":529,"line_end":529,"column_start":12,"column_end":25},"name":"to_naive_time","qualname":"<Parsed>::to_naive_time","value":"fn (&self) -> ParseResult<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed naive time out of given fields.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1574},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":558498,"byte_end":558527,"line_start":571,"line_end":571,"column_start":12,"column_end":41},"name":"to_naive_datetime_with_offset","qualname":"<Parsed>::to_naive_datetime_with_offset","value":"fn (&self, offset: i32) -> ParseResult<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed naive date and time out of given fields,\n except for the [`offset`](#structfield.offset) field (assumed to have a given value).\n This is required for parsing a local time or other known-timezone inputs.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1579},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":561945,"byte_end":561960,"line_start":644,"line_end":644,"column_start":12,"column_end":27},"name":"to_fixed_offset","qualname":"<Parsed>::to_fixed_offset","value":"fn (&self) -> ParseResult<FixedOffset>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed fixed time zone offset out of given fields.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1580},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":562432,"byte_end":562443,"line_start":654,"line_end":654,"column_start":12,"column_end":23},"name":"to_datetime","qualname":"<Parsed>::to_datetime","value":"fn (&self) -> ParseResult<DateTime<FixedOffset>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed timezone-aware date and time out of given fields.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1581},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":563471,"byte_end":563496,"line_start":674,"line_end":674,"column_start":12,"column_end":37},"name":"to_datetime_with_timezone","qualname":"<Parsed>::to_datetime_with_timezone","value":"fn <Tz> (&self, tz: &Tz) -> ParseResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed timezone-aware date and time out of given fields,\n with an additional `TimeZone` used to interpret and validate the local date.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1620},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parse.rs","byte_start":600638,"byte_end":600643,"line_start":234,"line_end":234,"column_start":8,"column_end":13},"name":"parse","qualname":"::format::parse::parse","value":"fn <'a, I, B> (parsed: &mut Parsed, s: &str, items: I) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to parse given string into `parsed` with given formatting items.\n Returns `Ok` when the entire string has been parsed (otherwise `parsed` should not be used).\n There should be no trailing string after parsing;\n use a stray [`Item::Space`](./enum.Item.html#variant.Space) to trim whitespaces.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1697},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\strftime.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"strftime","qualname":"::format::strftime","value":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\strftime.rs","parent":null,"children":[{"krate":0,"index":1698},{"krate":0,"index":1705},{"krate":0,"index":1707},{"krate":0,"index":1708},{"krate":0,"index":1709},{"krate":0,"index":2487},{"krate":0,"index":2497},{"krate":0,"index":2494},{"krate":0,"index":1710},{"krate":0,"index":1716},{"krate":0,"index":1717}],"decl_id":null,"docs":"`strftime`/`strptime`-inspired date and time formatting syntax.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2487},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\strftime.rs","byte_start":656303,"byte_end":656316,"line_start":193,"line_end":193,"column_start":12,"column_end":25},"name":"StrftimeItems","qualname":"::format::strftime::StrftimeItems","value":"StrftimeItems {  }","parent":null,"children":[{"krate":0,"index":2489},{"krate":0,"index":2490},{"krate":0,"index":2491},{"krate":0,"index":2492},{"krate":0,"index":2493}],"decl_id":null,"docs":" Parsing iterator for `strftime`-like format strings.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1712},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\strftime.rs","byte_start":656906,"byte_end":656909,"line_start":210,"line_end":210,"column_start":12,"column_end":15},"name":"new","qualname":"<StrftimeItems>::new","value":"fn (s: &'a str) -> StrftimeItems<'a>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new parsing iterator from the `strftime`-like format string.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2506},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":528891,"byte_end":528904,"line_start":719,"line_end":719,"column_start":12,"column_end":25},"name":"DelayedFormat","qualname":"::format::DelayedFormat","value":"DelayedFormat {  }","parent":null,"children":[{"krate":0,"index":2508},{"krate":0,"index":2509},{"krate":0,"index":2510},{"krate":0,"index":2511},{"krate":0,"index":2512}],"decl_id":null,"docs":" A *temporary* object which can be used as an argument to `format!` or others.\n This is normally constructed via `format` methods of each date and time type.\n","sig":null,"attributes":[{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":528809,"byte_end":528862,"line_start":717,"line_end":717,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1732},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":529488,"byte_end":529491,"line_start":735,"line_end":735,"column_start":12,"column_end":15},"name":"new","qualname":"<DelayedFormat<I>>::new","value":"fn (date: Option<NaiveDate>, time: Option<NaiveTime>, items: I) -> DelayedFormat<I>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DelayedFormat` value out of local date and time.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1733},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":529765,"byte_end":529780,"line_start":740,"line_end":740,"column_start":12,"column_end":27},"name":"new_with_offset","qualname":"<DelayedFormat<I>>::new_with_offset","value":"fn <Off> (date: Option<NaiveDate>, time: Option<NaiveTime>, offset: &Off, items: I) -> DelayedFormat<I>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DelayedFormat` value out of local date and time and UTC offset.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1758},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":675803,"byte_end":675814,"line_start":21,"line_end":21,"column_start":11,"column_end":22},"name":"SubsecRound","qualname":"::round::SubsecRound","value":"SubsecRound","parent":null,"children":[{"krate":0,"index":1759},{"krate":0,"index":1760}],"decl_id":null,"docs":" Extension trait for subsecond rounding or truncation to a maximum number\n of digits. Rounding can be used to decrease the error variance when\n serializing/persisting to lower precision. Truncation is the default\n behavior in Chrono display formatting.  Either can be used to guarantee\n equality (e.g. for testing) when round-tripping through a lower precision\n format.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1759},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":676344,"byte_end":676357,"line_start":33,"line_end":33,"column_start":8,"column_end":21},"name":"round_subsecs","qualname":"::round::SubsecRound::round_subsecs","value":"fn (self, digits: u16) -> Self","parent":{"krate":0,"index":1758},"children":[],"decl_id":null,"docs":" Return a copy rounded to the specified number of subsecond digits. With\n 9 or more digits, self is returned unmodified. Halfway values are\n rounded up (away from zero).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1760},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":676860,"byte_end":676873,"line_start":45,"line_end":45,"column_start":8,"column_end":21},"name":"trunc_subsecs","qualname":"::round::SubsecRound::trunc_subsecs","value":"fn (self, digits: u16) -> Self","parent":{"krate":0,"index":1758},"children":[],"decl_id":null,"docs":" Return a copy truncated to the specified number of subsecond\n digits. With 9 or more digits, self is returned unmodified.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1766},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":678612,"byte_end":678625,"line_start":102,"line_end":102,"column_start":11,"column_end":24},"name":"DurationRound","qualname":"::round::DurationRound","value":"DurationRound: Sized","parent":null,"children":[{"krate":0,"index":1767},{"krate":0,"index":1768},{"krate":0,"index":1769}],"decl_id":null,"docs":" Extension trait for rounding or truncating a DateTime by a Duration.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1767},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":678738,"byte_end":678741,"line_start":105,"line_end":105,"column_start":10,"column_end":13},"name":"Err","qualname":"::round::DurationRound::Err","value":"type Err: std::error::Error;","parent":{"krate":0,"index":1766},"children":[],"decl_id":null,"docs":" Error that can occur in rounding or truncating\n","sig":null,"attributes":[{"value":"cfg(any (feature = \"std\", test))","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":678694,"byte_end":678728,"line_start":104,"line_end":104,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":1768},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":679444,"byte_end":679458,"line_start":126,"line_end":126,"column_start":8,"column_end":22},"name":"duration_round","qualname":"::round::DurationRound::duration_round","value":"fn (self, duration: Duration) -> Result<Self, Self::Err>","parent":{"krate":0,"index":1766},"children":[],"decl_id":null,"docs":" Return a copy rounded by Duration.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1769},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":680056,"byte_end":680070,"line_start":143,"line_end":143,"column_start":8,"column_end":22},"name":"duration_trunc","qualname":"::round::DurationRound::duration_trunc","value":"fn (self, duration: Duration) -> Result<Self, Self::Err>","parent":{"krate":0,"index":1766},"children":[],"decl_id":null,"docs":" Return a copy truncated by Duration.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2517},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":682897,"byte_end":682921,"line_start":218,"line_end":218,"column_start":5,"column_end":29},"name":"DurationExceedsTimestamp","qualname":"::round::RoundingError::DurationExceedsTimestamp","value":"RoundingError::DurationExceedsTimestamp","parent":{"krate":0,"index":2516},"children":[],"decl_id":null,"docs":" Error when the Duration exceeds the Duration from or until the Unix epoch.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2519},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":683348,"byte_end":683368,"line_start":231,"line_end":231,"column_start":5,"column_end":25},"name":"DurationExceedsLimit","qualname":"::round::RoundingError::DurationExceedsLimit","value":"RoundingError::DurationExceedsLimit","parent":{"krate":0,"index":2516},"children":[],"decl_id":null,"docs":" Error when `Duration.num_nanoseconds` exceeds the limit.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2521},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":683733,"byte_end":683754,"line_start":241,"line_end":241,"column_start":5,"column_end":26},"name":"TimestampExceedsLimit","qualname":"::round::RoundingError::TimestampExceedsLimit","value":"RoundingError::TimestampExceedsLimit","parent":{"krate":0,"index":2516},"children":[],"decl_id":null,"docs":" Error when `DateTime.timestamp_nanos` exceeds the limit.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2516},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":682462,"byte_end":682475,"line_start":206,"line_end":206,"column_start":10,"column_end":23},"name":"RoundingError","qualname":"::round::RoundingError","value":"RoundingError::{DurationExceedsTimestamp, DurationExceedsLimit, TimestampExceedsLimit}","parent":null,"children":[{"krate":0,"index":2517},{"krate":0,"index":2519},{"krate":0,"index":2521}],"decl_id":null,"docs":" An error from rounding by `Duration`","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1780},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":24793,"byte_end":24798,"line_start":580,"line_end":580,"column_start":9,"column_end":14},"name":"serde","qualname":"::serde","value":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1781}],"decl_id":null,"docs":" Serialization/Deserialization in alternate formats","sig":null,"attributes":[{"value":"cfg(feature = \"serde\")","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":24759,"byte_end":24784,"line_start":579,"line_end":579,"column_start":1,"column_end":26}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2535},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":26589,"byte_end":26592,"line_start":631,"line_end":631,"column_start":5,"column_end":8},"name":"Mon","qualname":"::Weekday::Mon","value":"Weekday::Mon","parent":{"krate":0,"index":2534},"children":[],"decl_id":null,"docs":" Monday.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2538},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":26619,"byte_end":26622,"line_start":633,"line_end":633,"column_start":5,"column_end":8},"name":"Tue","qualname":"::Weekday::Tue","value":"Weekday::Tue","parent":{"krate":0,"index":2534},"children":[],"decl_id":null,"docs":" Tuesday.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2541},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":26651,"byte_end":26654,"line_start":635,"line_end":635,"column_start":5,"column_end":8},"name":"Wed","qualname":"::Weekday::Wed","value":"Weekday::Wed","parent":{"krate":0,"index":2534},"children":[],"decl_id":null,"docs":" Wednesday.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2544},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":26682,"byte_end":26685,"line_start":637,"line_end":637,"column_start":5,"column_end":8},"name":"Thu","qualname":"::Weekday::Thu","value":"Weekday::Thu","parent":{"krate":0,"index":2534},"children":[],"decl_id":null,"docs":" Thursday.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2547},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":26711,"byte_end":26714,"line_start":639,"line_end":639,"column_start":5,"column_end":8},"name":"Fri","qualname":"::Weekday::Fri","value":"Weekday::Fri","parent":{"krate":0,"index":2534},"children":[],"decl_id":null,"docs":" Friday.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2550},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":26742,"byte_end":26745,"line_start":641,"line_end":641,"column_start":5,"column_end":8},"name":"Sat","qualname":"::Weekday::Sat","value":"Weekday::Sat","parent":{"krate":0,"index":2534},"children":[],"decl_id":null,"docs":" Saturday.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2553},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":26771,"byte_end":26774,"line_start":643,"line_end":643,"column_start":5,"column_end":8},"name":"Sun","qualname":"::Weekday::Sun","value":"Weekday::Sun","parent":{"krate":0,"index":2534},"children":[],"decl_id":null,"docs":" Sunday.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2534},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":26559,"byte_end":26566,"line_start":629,"line_end":629,"column_start":10,"column_end":17},"name":"Weekday","qualname":"::Weekday","value":"Weekday::{Mon, Tue, Wed, Thu, Fri, Sat, Sun}","parent":null,"children":[{"krate":0,"index":2535},{"krate":0,"index":2538},{"krate":0,"index":2541},{"krate":0,"index":2544},{"krate":0,"index":2547},{"krate":0,"index":2550},{"krate":0,"index":2553}],"decl_id":null,"docs":" The day of week.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1802},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":27093,"byte_end":27097,"line_start":653,"line_end":653,"column_start":12,"column_end":16},"name":"succ","qualname":"<Weekday>::succ","value":"fn (&self) -> Weekday","parent":null,"children":[],"decl_id":null,"docs":" The next day in the week.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":27072,"byte_end":27081,"line_start":652,"line_end":652,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1803},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":27750,"byte_end":27754,"line_start":671,"line_end":671,"column_start":12,"column_end":16},"name":"pred","qualname":"<Weekday>::pred","value":"fn (&self) -> Weekday","parent":null,"children":[],"decl_id":null,"docs":" The previous day in the week.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":27729,"byte_end":27738,"line_start":670,"line_end":670,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1804},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":28496,"byte_end":28514,"line_start":689,"line_end":689,"column_start":12,"column_end":30},"name":"number_from_monday","qualname":"<Weekday>::number_from_monday","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns a day-of-week number starting from Monday = 1. (ISO 8601 weekday number)","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":28475,"byte_end":28484,"line_start":688,"line_end":688,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1805},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":29149,"byte_end":29167,"line_start":707,"line_end":707,"column_start":12,"column_end":30},"name":"number_from_sunday","qualname":"<Weekday>::number_from_sunday","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns a day-of-week number starting from Sunday = 1.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":29128,"byte_end":29137,"line_start":706,"line_end":706,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1806},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":29808,"byte_end":29828,"line_start":725,"line_end":725,"column_start":12,"column_end":32},"name":"num_days_from_monday","qualname":"<Weekday>::num_days_from_monday","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns a day-of-week number starting from Monday = 0.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":29787,"byte_end":29796,"line_start":724,"line_end":724,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1807},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":30469,"byte_end":30489,"line_start":743,"line_end":743,"column_start":12,"column_end":32},"name":"num_days_from_sunday","qualname":"<Weekday>::num_days_from_sunday","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns a day-of-week number starting from Sunday = 0.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":30448,"byte_end":30457,"line_start":742,"line_end":742,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":2570},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":32328,"byte_end":32345,"line_start":807,"line_end":807,"column_start":12,"column_end":29},"name":"ParseWeekdayError","qualname":"::ParseWeekdayError","value":"ParseWeekdayError {  }","parent":null,"children":[{"krate":0,"index":2571}],"decl_id":null,"docs":" An error resulting from reading `Weekday` value with `FromStr`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2579},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":36514,"byte_end":36521,"line_start":951,"line_end":951,"column_start":5,"column_end":12},"name":"January","qualname":"::Month::January","value":"Month::January","parent":{"krate":0,"index":2578},"children":[],"decl_id":null,"docs":" January\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2582},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":36548,"byte_end":36556,"line_start":953,"line_end":953,"column_start":5,"column_end":13},"name":"February","qualname":"::Month::February","value":"Month::February","parent":{"krate":0,"index":2578},"children":[],"decl_id":null,"docs":" February\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2585},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":36580,"byte_end":36585,"line_start":955,"line_end":955,"column_start":5,"column_end":10},"name":"March","qualname":"::Month::March","value":"Month::March","parent":{"krate":0,"index":2578},"children":[],"decl_id":null,"docs":" March\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2588},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":36609,"byte_end":36614,"line_start":957,"line_end":957,"column_start":5,"column_end":10},"name":"April","qualname":"::Month::April","value":"Month::April","parent":{"krate":0,"index":2578},"children":[],"decl_id":null,"docs":" April\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2591},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":36636,"byte_end":36639,"line_start":959,"line_end":959,"column_start":5,"column_end":8},"name":"May","qualname":"::Month::May","value":"Month::May","parent":{"krate":0,"index":2578},"children":[],"decl_id":null,"docs":" May\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2594},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":36662,"byte_end":36666,"line_start":961,"line_end":961,"column_start":5,"column_end":9},"name":"June","qualname":"::Month::June","value":"Month::June","parent":{"krate":0,"index":2578},"children":[],"decl_id":null,"docs":" June\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2597},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":36689,"byte_end":36693,"line_start":963,"line_end":963,"column_start":5,"column_end":9},"name":"July","qualname":"::Month::July","value":"Month::July","parent":{"krate":0,"index":2578},"children":[],"decl_id":null,"docs":" July\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2600},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":36718,"byte_end":36724,"line_start":965,"line_end":965,"column_start":5,"column_end":11},"name":"August","qualname":"::Month::August","value":"Month::August","parent":{"krate":0,"index":2578},"children":[],"decl_id":null,"docs":" August\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2603},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":36752,"byte_end":36761,"line_start":967,"line_end":967,"column_start":5,"column_end":14},"name":"September","qualname":"::Month::September","value":"Month::September","parent":{"krate":0,"index":2578},"children":[],"decl_id":null,"docs":" September\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2606},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":36787,"byte_end":36794,"line_start":969,"line_end":969,"column_start":5,"column_end":12},"name":"October","qualname":"::Month::October","value":"Month::October","parent":{"krate":0,"index":2578},"children":[],"decl_id":null,"docs":" October\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2609},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":36821,"byte_end":36829,"line_start":971,"line_end":971,"column_start":5,"column_end":13},"name":"November","qualname":"::Month::November","value":"Month::November","parent":{"krate":0,"index":2578},"children":[],"decl_id":null,"docs":" November\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2612},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":36857,"byte_end":36865,"line_start":973,"line_end":973,"column_start":5,"column_end":13},"name":"December","qualname":"::Month::December","value":"Month::December","parent":{"krate":0,"index":2578},"children":[],"decl_id":null,"docs":" December\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2578},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":36486,"byte_end":36491,"line_start":949,"line_end":949,"column_start":10,"column_end":15},"name":"Month","qualname":"::Month","value":"Month::{January, February, March, April, May, June, July, August, September, October, November, December}","parent":null,"children":[{"krate":0,"index":2579},{"krate":0,"index":2582},{"krate":0,"index":2585},{"krate":0,"index":2588},{"krate":0,"index":2591},{"krate":0,"index":2594},{"krate":0,"index":2597},{"krate":0,"index":2600},{"krate":0,"index":2603},{"krate":0,"index":2606},{"krate":0,"index":2609},{"krate":0,"index":2612}],"decl_id":null,"docs":" The month of the year.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1839},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":37142,"byte_end":37146,"line_start":983,"line_end":983,"column_start":12,"column_end":16},"name":"succ","qualname":"<Month>::succ","value":"fn (&self) -> Month","parent":null,"children":[],"decl_id":null,"docs":" The next month.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":37121,"byte_end":37130,"line_start":982,"line_end":982,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1840},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":37995,"byte_end":37999,"line_start":1006,"line_end":1006,"column_start":12,"column_end":16},"name":"pred","qualname":"<Month>::pred","value":"fn (&self) -> Month","parent":null,"children":[],"decl_id":null,"docs":" The previous month.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":37974,"byte_end":37983,"line_start":1005,"line_end":1005,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1841},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":38910,"byte_end":38927,"line_start":1029,"line_end":1029,"column_start":12,"column_end":29},"name":"number_from_month","qualname":"<Month>::number_from_month","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns a month-of-year number starting from January = 1.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":38889,"byte_end":38898,"line_start":1028,"line_end":1028,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1842},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":39537,"byte_end":39541,"line_start":1053,"line_end":1053,"column_start":12,"column_end":16},"name":"name","qualname":"<Month>::name","value":"fn (&self) -> &'static str","parent":null,"children":[],"decl_id":null,"docs":" Get the name of the month","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2629},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":41392,"byte_end":41407,"line_start":1110,"line_end":1110,"column_start":12,"column_end":27},"name":"ParseMonthError","qualname":"::ParseMonthError","value":"ParseMonthError {  }","parent":null,"children":[{"krate":0,"index":2630}],"decl_id":null,"docs":" An error resulting from reading `<Month>` value with `FromStr`.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1871},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":44542,"byte_end":44550,"line_start":1228,"line_end":1228,"column_start":11,"column_end":19},"name":"Datelike","qualname":"::Datelike","value":"Datelike: Sized","parent":null,"children":[{"krate":0,"index":1872},{"krate":0,"index":1873},{"krate":0,"index":1874},{"krate":0,"index":1875},{"krate":0,"index":1876},{"krate":0,"index":1877},{"krate":0,"index":1878},{"krate":0,"index":1879},{"krate":0,"index":1880},{"krate":0,"index":1881},{"krate":0,"index":1882},{"krate":0,"index":1883},{"krate":0,"index":1884},{"krate":0,"index":1885},{"krate":0,"index":1886},{"krate":0,"index":1887},{"krate":0,"index":1888},{"krate":0,"index":1889}],"decl_id":null,"docs":" The common set of methods for date component.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1872},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":44668,"byte_end":44672,"line_start":1230,"line_end":1230,"column_start":8,"column_end":12},"name":"year","qualname":"::Datelike::year","value":"fn (&self) -> i32","parent":{"krate":0,"index":1871},"children":[],"decl_id":null,"docs":" Returns the year number in the [calendar date](./naive/struct.NaiveDate.html#calendar-date).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1873},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":44881,"byte_end":44888,"line_start":1235,"line_end":1235,"column_start":8,"column_end":15},"name":"year_ce","qualname":"::Datelike::year_ce","value":"fn (&self) -> (bool, u32)","parent":{"krate":0,"index":1871},"children":[],"decl_id":null,"docs":" Returns the absolute year number starting from 1 with a boolean flag,\n which is false when the year predates the epoch (BCE/BC) and true otherwise (CE/AD).\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":44864,"byte_end":44873,"line_start":1234,"line_end":1234,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1874},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":45183,"byte_end":45188,"line_start":1247,"line_end":1247,"column_start":8,"column_end":13},"name":"month","qualname":"::Datelike::month","value":"fn (&self) -> u32","parent":{"krate":0,"index":1871},"children":[],"decl_id":null,"docs":" Returns the month number starting from 1.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1875},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":45316,"byte_end":45322,"line_start":1252,"line_end":1252,"column_start":8,"column_end":14},"name":"month0","qualname":"::Datelike::month0","value":"fn (&self) -> u32","parent":{"krate":0,"index":1871},"children":[],"decl_id":null,"docs":" Returns the month number starting from 0.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1876},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":45493,"byte_end":45496,"line_start":1257,"line_end":1257,"column_start":8,"column_end":11},"name":"day","qualname":"::Datelike::day","value":"fn (&self) -> u32","parent":{"krate":0,"index":1871},"children":[],"decl_id":null,"docs":" Returns the day of month starting from 1.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1877},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":45667,"byte_end":45671,"line_start":1262,"line_end":1262,"column_start":8,"column_end":12},"name":"day0","qualname":"::Datelike::day0","value":"fn (&self) -> u32","parent":{"krate":0,"index":1871},"children":[],"decl_id":null,"docs":" Returns the day of month starting from 0.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1878},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":45840,"byte_end":45847,"line_start":1267,"line_end":1267,"column_start":8,"column_end":15},"name":"ordinal","qualname":"::Datelike::ordinal","value":"fn (&self) -> u32","parent":{"krate":0,"index":1871},"children":[],"decl_id":null,"docs":" Returns the day of year starting from 1.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1879},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":46016,"byte_end":46024,"line_start":1272,"line_end":1272,"column_start":8,"column_end":16},"name":"ordinal0","qualname":"::Datelike::ordinal0","value":"fn (&self) -> u32","parent":{"krate":0,"index":1871},"children":[],"decl_id":null,"docs":" Returns the day of year starting from 0.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1880},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":46081,"byte_end":46088,"line_start":1275,"line_end":1275,"column_start":8,"column_end":15},"name":"weekday","qualname":"::Datelike::weekday","value":"fn (&self) -> Weekday","parent":{"krate":0,"index":1871},"children":[],"decl_id":null,"docs":" Returns the day of week.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1881},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":46146,"byte_end":46154,"line_start":1278,"line_end":1278,"column_start":8,"column_end":16},"name":"iso_week","qualname":"::Datelike::iso_week","value":"fn (&self) -> IsoWeek","parent":{"krate":0,"index":1871},"children":[],"decl_id":null,"docs":" Returns the ISO week.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1882},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":46312,"byte_end":46321,"line_start":1283,"line_end":1283,"column_start":8,"column_end":17},"name":"with_year","qualname":"::Datelike::with_year","value":"fn (&self, year: i32) -> Option<Self>","parent":{"krate":0,"index":1871},"children":[],"decl_id":null,"docs":" Makes a new value with the year number changed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1883},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":46514,"byte_end":46524,"line_start":1288,"line_end":1288,"column_start":8,"column_end":18},"name":"with_month","qualname":"::Datelike::with_month","value":"fn (&self, month: u32) -> Option<Self>","parent":{"krate":0,"index":1871},"children":[],"decl_id":null,"docs":" Makes a new value with the month number (starting from 1) changed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1884},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":46718,"byte_end":46729,"line_start":1293,"line_end":1293,"column_start":8,"column_end":19},"name":"with_month0","qualname":"::Datelike::with_month0","value":"fn (&self, month0: u32) -> Option<Self>","parent":{"krate":0,"index":1871},"children":[],"decl_id":null,"docs":" Makes a new value with the month number (starting from 0) changed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1885},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":46924,"byte_end":46932,"line_start":1298,"line_end":1298,"column_start":8,"column_end":16},"name":"with_day","qualname":"::Datelike::with_day","value":"fn (&self, day: u32) -> Option<Self>","parent":{"krate":0,"index":1871},"children":[],"decl_id":null,"docs":" Makes a new value with the day of month (starting from 1) changed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1886},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":47124,"byte_end":47133,"line_start":1303,"line_end":1303,"column_start":8,"column_end":17},"name":"with_day0","qualname":"::Datelike::with_day0","value":"fn (&self, day0: u32) -> Option<Self>","parent":{"krate":0,"index":1871},"children":[],"decl_id":null,"docs":" Makes a new value with the day of month (starting from 0) changed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1887},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":47325,"byte_end":47337,"line_start":1308,"line_end":1308,"column_start":8,"column_end":20},"name":"with_ordinal","qualname":"::Datelike::with_ordinal","value":"fn (&self, ordinal: u32) -> Option<Self>","parent":{"krate":0,"index":1871},"children":[],"decl_id":null,"docs":" Makes a new value with the day of year (starting from 1) changed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1888},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":47532,"byte_end":47545,"line_start":1313,"line_end":1313,"column_start":8,"column_end":21},"name":"with_ordinal0","qualname":"::Datelike::with_ordinal0","value":"fn (&self, ordinal0: u32) -> Option<Self>","parent":{"krate":0,"index":1871},"children":[],"decl_id":null,"docs":" Makes a new value with the day of year (starting from 0) changed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1889},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":48104,"byte_end":48120,"line_start":1327,"line_end":1327,"column_start":8,"column_end":24},"name":"num_days_from_ce","qualname":"::Datelike::num_days_from_ce","value":"fn (&self) -> i32","parent":{"krate":0,"index":1871},"children":[],"decl_id":null,"docs":" Counts the days in the proleptic Gregorian calendar, with January 1, Year 1 (CE) as day 1.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1890},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":48778,"byte_end":48786,"line_start":1346,"line_end":1346,"column_start":11,"column_end":19},"name":"Timelike","qualname":"::Timelike","value":"Timelike: Sized","parent":null,"children":[{"krate":0,"index":1891},{"krate":0,"index":1892},{"krate":0,"index":1893},{"krate":0,"index":1894},{"krate":0,"index":1895},{"krate":0,"index":1896},{"krate":0,"index":1897},{"krate":0,"index":1898},{"krate":0,"index":1899},{"krate":0,"index":1900}],"decl_id":null,"docs":" The common set of methods for time component.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1891},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":48849,"byte_end":48853,"line_start":1348,"line_end":1348,"column_start":8,"column_end":12},"name":"hour","qualname":"::Timelike::hour","value":"fn (&self) -> u32","parent":{"krate":0,"index":1890},"children":[],"decl_id":null,"docs":" Returns the hour number from 0 to 23.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1892},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":49004,"byte_end":49010,"line_start":1353,"line_end":1353,"column_start":8,"column_end":14},"name":"hour12","qualname":"::Timelike::hour12","value":"fn (&self) -> (bool, u32)","parent":{"krate":0,"index":1890},"children":[],"decl_id":null,"docs":" Returns the hour number from 1 to 12 with a boolean flag,\n which is false for AM and true for PM.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":48987,"byte_end":48996,"line_start":1352,"line_end":1352,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1893},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":49254,"byte_end":49260,"line_start":1363,"line_end":1363,"column_start":8,"column_end":14},"name":"minute","qualname":"::Timelike::minute","value":"fn (&self) -> u32","parent":{"krate":0,"index":1890},"children":[],"decl_id":null,"docs":" Returns the minute number from 0 to 59.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1894},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":49332,"byte_end":49338,"line_start":1366,"line_end":1366,"column_start":8,"column_end":14},"name":"second","qualname":"::Timelike::second","value":"fn (&self) -> u32","parent":{"krate":0,"index":1890},"children":[],"decl_id":null,"docs":" Returns the second number from 0 to 59.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1895},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":49581,"byte_end":49591,"line_start":1371,"line_end":1371,"column_start":8,"column_end":18},"name":"nanosecond","qualname":"::Timelike::nanosecond","value":"fn (&self) -> u32","parent":{"krate":0,"index":1890},"children":[],"decl_id":null,"docs":" Returns the number of nanoseconds since the whole non-leap second.\n The range from 1,000,000,000 to 1,999,999,999 represents\n the [leap second](./naive/struct.NaiveTime.html#leap-second-handling).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1896},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":49745,"byte_end":49754,"line_start":1376,"line_end":1376,"column_start":8,"column_end":17},"name":"with_hour","qualname":"::Timelike::with_hour","value":"fn (&self, hour: u32) -> Option<Self>","parent":{"krate":0,"index":1890},"children":[],"decl_id":null,"docs":" Makes a new value with the hour number changed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1897},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":49930,"byte_end":49941,"line_start":1381,"line_end":1381,"column_start":8,"column_end":19},"name":"with_minute","qualname":"::Timelike::with_minute","value":"fn (&self, min: u32) -> Option<Self>","parent":{"krate":0,"index":1890},"children":[],"decl_id":null,"docs":" Makes a new value with the minute number changed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1898},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":50228,"byte_end":50239,"line_start":1388,"line_end":1388,"column_start":8,"column_end":19},"name":"with_second","qualname":"::Timelike::with_second","value":"fn (&self, sec: u32) -> Option<Self>","parent":{"krate":0,"index":1890},"children":[],"decl_id":null,"docs":" Makes a new value with the second number changed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1899},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":50572,"byte_end":50587,"line_start":1395,"line_end":1395,"column_start":8,"column_end":23},"name":"with_nanosecond","qualname":"::Timelike::with_nanosecond","value":"fn (&self, nano: u32) -> Option<Self>","parent":{"krate":0,"index":1890},"children":[],"decl_id":null,"docs":" Makes a new value with nanoseconds since the whole non-leap second changed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1900},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":50716,"byte_end":50741,"line_start":1399,"line_end":1399,"column_start":8,"column_end":33},"name":"num_seconds_from_midnight","qualname":"::Timelike::num_seconds_from_midnight","value":"fn (&self) -> u32","parent":{"krate":0,"index":1890},"children":[],"decl_id":null,"docs":" Returns the number of non-leap seconds past the last midnight.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":50699,"byte_end":50708,"line_start":1398,"line_end":1398,"column_start":5,"column_end":14}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":58464,"byte_end":58475,"line_start":41,"line_end":41,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":87}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":59656,"byte_end":59667,"line_start":76,"line_end":76,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":96}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":62877,"byte_end":62888,"line_start":169,"line_end":169,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":99}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":78235,"byte_end":78246,"line_start":27,"line_end":27,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":80803,"byte_end":80814,"line_start":101,"line_end":101,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":81402,"byte_end":81413,"line_start":123,"line_end":123,"column_start":17,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":159}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":81494,"byte_end":81505,"line_start":129,"line_end":129,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":161}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":82003,"byte_end":82014,"line_start":143,"line_end":143,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":163}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":82782,"byte_end":82791,"line_start":164,"line_end":164,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":167},{"krate":0,"index":168}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":82979,"byte_end":82988,"line_start":173,"line_end":173,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":170},{"krate":0,"index":171}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":83177,"byte_end":83190,"line_start":182,"line_end":182,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":173},{"krate":0,"index":174}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":83386,"byte_end":83399,"line_start":191,"line_end":191,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":176},{"krate":0,"index":177}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":83610,"byte_end":83618,"line_start":200,"line_end":200,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":180},{"krate":0,"index":181}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":83830,"byte_end":83838,"line_start":209,"line_end":209,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":184},{"krate":0,"index":185}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\local.rs","byte_start":88173,"byte_end":88178,"line_start":92,"line_end":92,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":206},{"krate":0,"index":207}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\local.rs","byte_start":89069,"byte_end":89074,"line_start":116,"line_end":116,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":211},{"krate":0,"index":213},{"krate":0,"index":215},{"krate":0,"index":216},{"krate":0,"index":217},{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":221}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\utc.rs","byte_start":94434,"byte_end":94437,"line_start":39,"line_end":39,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":237},{"krate":0,"index":238}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\utc.rs","byte_start":95226,"byte_end":95229,"line_start":61,"line_end":61,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":240},{"krate":0,"index":241},{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":245}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\utc.rs","byte_start":95749,"byte_end":95752,"line_start":83,"line_end":83,"column_start":17,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":247}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\utc.rs","byte_start":95848,"byte_end":95851,"line_start":89,"line_end":89,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":249}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\utc.rs","byte_start":95967,"byte_end":95970,"line_start":95,"line_end":95,"column_start":23,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":251}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":101765,"byte_end":101774,"line_start":136,"line_end":136,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":299},{"krate":0,"index":300},{"krate":0,"index":301},{"krate":0,"index":302},{"krate":0,"index":303},{"krate":0,"index":304},{"krate":0,"index":305},{"krate":0,"index":306},{"krate":0,"index":307},{"krate":0,"index":308},{"krate":0,"index":309},{"krate":0,"index":310},{"krate":0,"index":311},{"krate":0,"index":312},{"krate":0,"index":313},{"krate":0,"index":314},{"krate":0,"index":316},{"krate":0,"index":317},{"krate":0,"index":319},{"krate":0,"index":320},{"krate":0,"index":322},{"krate":0,"index":323},{"krate":0,"index":325},{"krate":0,"index":326},{"krate":0,"index":327},{"krate":0,"index":328},{"krate":0,"index":329},{"krate":0,"index":330},{"krate":0,"index":332},{"krate":0,"index":333},{"krate":0,"index":335},{"krate":0,"index":336},{"krate":0,"index":337},{"krate":0,"index":338},{"krate":0,"index":342},{"krate":0,"index":344},{"krate":0,"index":345}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":139683,"byte_end":139692,"line_start":1105,"line_end":1105,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":347},{"krate":0,"index":348},{"krate":0,"index":349},{"krate":0,"index":350},{"krate":0,"index":351},{"krate":0,"index":352},{"krate":0,"index":353},{"krate":0,"index":354},{"krate":0,"index":355},{"krate":0,"index":356},{"krate":0,"index":357},{"krate":0,"index":358},{"krate":0,"index":359},{"krate":0,"index":360},{"krate":0,"index":361},{"krate":0,"index":362}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":152024,"byte_end":152033,"line_start":1472,"line_end":1472,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":364},{"krate":0,"index":365}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":152252,"byte_end":152261,"line_start":1481,"line_end":1481,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":367}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":153676,"byte_end":153685,"line_start":1514,"line_end":1514,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":369},{"krate":0,"index":370}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":153904,"byte_end":153913,"line_start":1523,"line_end":1523,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":372}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":155169,"byte_end":155178,"line_start":1557,"line_end":1557,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":374},{"krate":0,"index":375}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":155531,"byte_end":155552,"line_start":1572,"line_end":1572,"column_start":19,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":377},{"krate":0,"index":378},{"krate":0,"index":379}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":156129,"byte_end":156150,"line_start":1592,"line_end":1592,"column_start":28,"column_end":49},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":156302,"byte_end":156324,"line_start":1599,"line_end":1599,"column_start":19,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":382},{"krate":0,"index":383},{"krate":0,"index":384}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":156839,"byte_end":156861,"line_start":1617,"line_end":1617,"column_start":28,"column_end":50},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":157908,"byte_end":157917,"line_start":1645,"line_end":1645,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":387}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":159176,"byte_end":159185,"line_start":1680,"line_end":1680,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":389}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":159787,"byte_end":159796,"line_start":1702,"line_end":1702,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":391},{"krate":0,"index":392}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":163750,"byte_end":163759,"line_start":1812,"line_end":1812,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":401}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":164035,"byte_end":164048,"line_start":1821,"line_end":1821,"column_start":54,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":410}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":164350,"byte_end":164366,"line_start":1833,"line_end":1833,"column_start":36,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":415},{"krate":0,"index":416},{"krate":0,"index":417}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":165029,"byte_end":165038,"line_start":1857,"line_end":1857,"column_start":40,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":421}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":191107,"byte_end":191120,"line_start":67,"line_end":67,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":467},{"krate":0,"index":468},{"krate":0,"index":469},{"krate":0,"index":471},{"krate":0,"index":472},{"krate":0,"index":473},{"krate":0,"index":474},{"krate":0,"index":476},{"krate":0,"index":477},{"krate":0,"index":478},{"krate":0,"index":479},{"krate":0,"index":480},{"krate":0,"index":481},{"krate":0,"index":482},{"krate":0,"index":483},{"krate":0,"index":484},{"krate":0,"index":488}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":217574,"byte_end":217587,"line_start":710,"line_end":710,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":491},{"krate":0,"index":492},{"krate":0,"index":493},{"krate":0,"index":494},{"krate":0,"index":495},{"krate":0,"index":496},{"krate":0,"index":497},{"krate":0,"index":498},{"krate":0,"index":499},{"krate":0,"index":500},{"krate":0,"index":502},{"krate":0,"index":504},{"krate":0,"index":506},{"krate":0,"index":508},{"krate":0,"index":510},{"krate":0,"index":512}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":228643,"byte_end":228656,"line_start":1028,"line_end":1028,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":515},{"krate":0,"index":516},{"krate":0,"index":517},{"krate":0,"index":518},{"krate":0,"index":519},{"krate":0,"index":521},{"krate":0,"index":523},{"krate":0,"index":525}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":234852,"byte_end":234865,"line_start":1200,"line_end":1200,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":528}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":237480,"byte_end":237493,"line_start":1262,"line_end":1262,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":531},{"krate":0,"index":532}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":237724,"byte_end":237737,"line_start":1271,"line_end":1271,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":534}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":240248,"byte_end":240261,"line_start":1332,"line_end":1332,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":536},{"krate":0,"index":537}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":240492,"byte_end":240505,"line_start":1341,"line_end":1341,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":539}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":242443,"byte_end":242456,"line_start":1394,"line_end":1394,"column_start":29,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":541},{"krate":0,"index":542}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":243664,"byte_end":243677,"line_start":1430,"line_end":1430,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":544}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":244773,"byte_end":244786,"line_start":1461,"line_end":1461,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":546}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":245524,"byte_end":245537,"line_start":1483,"line_end":1483,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":548},{"krate":0,"index":549}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":253303,"byte_end":253316,"line_start":1716,"line_end":1716,"column_start":29,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":558}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":253592,"byte_end":253605,"line_start":1725,"line_end":1725,"column_start":54,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":567}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":253911,"byte_end":253931,"line_start":1737,"line_end":1737,"column_start":36,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":572},{"krate":0,"index":573},{"krate":0,"index":574}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":254347,"byte_end":254360,"line_start":1752,"line_end":1752,"column_start":40,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":578}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":259190,"byte_end":259225,"line_start":1882,"line_end":1882,"column_start":40,"column_end":75},"value":"","parent":null,"children":[{"krate":0,"index":597},{"krate":0,"index":598},{"krate":0,"index":599},{"krate":0,"index":602}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":264810,"byte_end":264846,"line_start":2034,"line_end":2034,"column_start":40,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":622},{"krate":0,"index":623},{"krate":0,"index":624},{"krate":0,"index":627}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":270247,"byte_end":270278,"line_start":2183,"line_end":2183,"column_start":40,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":647},{"krate":0,"index":648},{"krate":0,"index":649},{"krate":0,"index":652}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\internals.rs","byte_start":289744,"byte_end":289753,"line_start":113,"line_end":113,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":688},{"krate":0,"index":689},{"krate":0,"index":690},{"krate":0,"index":691},{"krate":0,"index":692}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\internals.rs","byte_start":290550,"byte_end":290559,"line_start":148,"line_end":148,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":694}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\internals.rs","byte_start":298700,"byte_end":298702,"line_start":270,"line_end":270,"column_start":6,"column_end":8},"value":"","parent":null,"children":[{"krate":0,"index":705},{"krate":0,"index":706},{"krate":0,"index":707},{"krate":0,"index":708},{"krate":0,"index":709},{"krate":0,"index":710},{"krate":0,"index":711},{"krate":0,"index":712},{"krate":0,"index":713},{"krate":0,"index":714},{"krate":0,"index":715},{"krate":0,"index":716},{"krate":0,"index":717}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\internals.rs","byte_start":300781,"byte_end":300783,"line_start":359,"line_end":359,"column_start":21,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":719}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\internals.rs","byte_start":301382,"byte_end":301385,"line_start":380,"line_end":380,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":721},{"krate":0,"index":722},{"krate":0,"index":723},{"krate":0,"index":724},{"krate":0,"index":725},{"krate":0,"index":726},{"krate":0,"index":727},{"krate":0,"index":728},{"krate":0,"index":729},{"krate":0,"index":730},{"krate":0,"index":731},{"krate":0,"index":732}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\internals.rs","byte_start":303348,"byte_end":303351,"line_start":469,"line_end":469,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":734}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\isoweek.rs","byte_start":317574,"byte_end":317581,"line_start":48,"line_end":48,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":743},{"krate":0,"index":744},{"krate":0,"index":745}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\isoweek.rs","byte_start":320127,"byte_end":320134,"line_start":130,"line_end":130,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":747}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":329153,"byte_end":329162,"line_start":187,"line_end":187,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":777},{"krate":0,"index":778},{"krate":0,"index":779},{"krate":0,"index":780},{"krate":0,"index":782},{"krate":0,"index":783},{"krate":0,"index":785},{"krate":0,"index":786},{"krate":0,"index":787},{"krate":0,"index":788},{"krate":0,"index":789},{"krate":0,"index":790},{"krate":0,"index":791},{"krate":0,"index":792},{"krate":0,"index":794},{"krate":0,"index":798},{"krate":0,"index":800}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":353694,"byte_end":353703,"line_start":807,"line_end":807,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":802},{"krate":0,"index":803},{"krate":0,"index":804},{"krate":0,"index":805},{"krate":0,"index":806},{"krate":0,"index":807},{"krate":0,"index":808},{"krate":0,"index":809},{"krate":0,"index":810}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":360932,"byte_end":360941,"line_start":1020,"line_end":1020,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":812}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":363948,"byte_end":363957,"line_start":1085,"line_end":1085,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":815},{"krate":0,"index":816}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":364138,"byte_end":364147,"line_start":1094,"line_end":1094,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":818}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":366750,"byte_end":366759,"line_start":1155,"line_end":1155,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":820},{"krate":0,"index":821}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":366940,"byte_end":366949,"line_start":1164,"line_end":1164,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":823}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":369484,"byte_end":369493,"line_start":1222,"line_end":1222,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":825},{"krate":0,"index":826}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":370881,"byte_end":370890,"line_start":1259,"line_end":1259,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":828}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":372743,"byte_end":372752,"line_start":1309,"line_end":1309,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":830}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":373524,"byte_end":373533,"line_start":1334,"line_end":1334,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":832},{"krate":0,"index":833}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":378462,"byte_end":378471,"line_start":1474,"line_end":1474,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":842}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":378727,"byte_end":378743,"line_start":1485,"line_end":1485,"column_start":36,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":848},{"krate":0,"index":849},{"krate":0,"index":850}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":379142,"byte_end":379151,"line_start":1500,"line_end":1500,"column_start":40,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":854}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":394816,"byte_end":394820,"line_start":57,"line_end":57,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":898},{"krate":0,"index":899},{"krate":0,"index":900},{"krate":0,"index":901},{"krate":0,"index":903},{"krate":0,"index":904},{"krate":0,"index":906},{"krate":0,"index":907},{"krate":0,"index":909},{"krate":0,"index":910},{"krate":0,"index":912},{"krate":0,"index":913},{"krate":0,"index":915},{"krate":0,"index":916},{"krate":0,"index":918},{"krate":0,"index":919},{"krate":0,"index":920},{"krate":0,"index":922},{"krate":0,"index":923},{"krate":0,"index":924},{"krate":0,"index":926},{"krate":0,"index":927}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":402920,"byte_end":402924,"line_start":277,"line_end":277,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":934},{"krate":0,"index":938}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":404801,"byte_end":404805,"line_start":336,"line_end":336,"column_start":33,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":942},{"krate":0,"index":943},{"krate":0,"index":944},{"krate":0,"index":945},{"krate":0,"index":946},{"krate":0,"index":947},{"krate":0,"index":948},{"krate":0,"index":949},{"krate":0,"index":950},{"krate":0,"index":951},{"krate":0,"index":953},{"krate":0,"index":955},{"krate":0,"index":957},{"krate":0,"index":959},{"krate":0,"index":961},{"krate":0,"index":963}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":406640,"byte_end":406644,"line_start":411,"line_end":411,"column_start":29,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":406724,"byte_end":406728,"line_start":412,"line_end":412,"column_start":36,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":406833,"byte_end":406837,"line_start":414,"line_end":414,"column_start":60,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":972}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":406957,"byte_end":406961,"line_start":420,"line_end":420,"column_start":27,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":407004,"byte_end":407008,"line_start":422,"line_end":422,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":977}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":407160,"byte_end":407164,"line_start":428,"line_end":428,"column_start":28,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":980}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":407299,"byte_end":407303,"line_start":434,"line_end":434,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":983}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":407442,"byte_end":407446,"line_start":440,"line_end":440,"column_start":41,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":987},{"krate":0,"index":988}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":407670,"byte_end":407674,"line_start":449,"line_end":449,"column_start":41,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":991},{"krate":0,"index":992}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":407895,"byte_end":407899,"line_start":458,"line_end":458,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":995},{"krate":0,"index":996}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":408084,"byte_end":408088,"line_start":467,"line_end":467,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":999}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":408262,"byte_end":408266,"line_start":473,"line_end":473,"column_start":37,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1002}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":411192,"byte_end":411200,"line_start":80,"line_end":80,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1048},{"krate":0,"index":1049},{"krate":0,"index":1050},{"krate":0,"index":1051},{"krate":0,"index":1052},{"krate":0,"index":1053},{"krate":0,"index":1054},{"krate":0,"index":1055},{"krate":0,"index":1056},{"krate":0,"index":1057},{"krate":0,"index":1058},{"krate":0,"index":1059},{"krate":0,"index":1061},{"krate":0,"index":1062},{"krate":0,"index":1063},{"krate":0,"index":1065},{"krate":0,"index":1066}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":417247,"byte_end":417255,"line_start":257,"line_end":257,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1068}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":417761,"byte_end":417769,"line_start":269,"line_end":269,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1070}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":418179,"byte_end":418187,"line_start":279,"line_end":279,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1072}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":418639,"byte_end":418647,"line_start":291,"line_end":291,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1074}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":419095,"byte_end":419103,"line_start":303,"line_end":303,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1076}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":419541,"byte_end":419549,"line_start":315,"line_end":315,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1078}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":420265,"byte_end":420273,"line_start":333,"line_end":333,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1084},{"krate":0,"index":1086},{"krate":0,"index":1088}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":422965,"byte_end":422973,"line_start":393,"line_end":393,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1091},{"krate":0,"index":1093},{"krate":0,"index":1095},{"krate":0,"index":1100},{"krate":0,"index":1104}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":428455,"byte_end":428463,"line_start":535,"line_end":535,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1108},{"krate":0,"index":1109},{"krate":0,"index":1110},{"krate":0,"index":1111},{"krate":0,"index":1112},{"krate":0,"index":1113},{"krate":0,"index":1114},{"krate":0,"index":1115},{"krate":0,"index":1116},{"krate":0,"index":1117},{"krate":0,"index":1119},{"krate":0,"index":1121},{"krate":0,"index":1123},{"krate":0,"index":1125},{"krate":0,"index":1127},{"krate":0,"index":1129}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":430320,"byte_end":430328,"line_start":609,"line_end":609,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1133},{"krate":0,"index":1134},{"krate":0,"index":1135},{"krate":0,"index":1136},{"krate":0,"index":1137},{"krate":0,"index":1139},{"krate":0,"index":1141},{"krate":0,"index":1143}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":431368,"byte_end":431376,"line_start":649,"line_end":649,"column_start":29,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":431456,"byte_end":431464,"line_start":650,"line_end":650,"column_start":36,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":431573,"byte_end":431581,"line_start":652,"line_end":652,"column_start":64,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":1152}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":431713,"byte_end":431721,"line_start":658,"line_end":658,"column_start":27,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":431794,"byte_end":431802,"line_start":660,"line_end":660,"column_start":65,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":1158}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":432541,"byte_end":432549,"line_start":681,"line_end":681,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1161}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":432696,"byte_end":432704,"line_start":687,"line_end":687,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1164}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":432847,"byte_end":432855,"line_start":693,"line_end":693,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1168},{"krate":0,"index":1169}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":433091,"byte_end":433099,"line_start":702,"line_end":702,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1172},{"krate":0,"index":1173}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":433336,"byte_end":433344,"line_start":711,"line_end":711,"column_start":42,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1176},{"krate":0,"index":1177}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":433533,"byte_end":433541,"line_start":720,"line_end":720,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1180}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":433715,"byte_end":433723,"line_start":726,"line_end":726,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1183}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":433916,"byte_end":433924,"line_start":735,"line_end":735,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1185},{"krate":0,"index":1186}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":434150,"byte_end":434158,"line_start":744,"line_end":744,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1189},{"krate":0,"index":1190}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":434403,"byte_end":434411,"line_start":753,"line_end":753,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1193}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":435063,"byte_end":435071,"line_start":773,"line_end":773,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1195}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":435270,"byte_end":435280,"line_start":780,"line_end":780,"column_start":43,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1198}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":450844,"byte_end":450871,"line_start":1238,"line_end":1238,"column_start":40,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":1238},{"krate":0,"index":1239},{"krate":0,"index":1240},{"krate":0,"index":1242}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":456631,"byte_end":456664,"line_start":1395,"line_end":1395,"column_start":40,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":1262},{"krate":0,"index":1263},{"krate":0,"index":1264},{"krate":0,"index":1266},{"krate":0,"index":1268}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":462137,"byte_end":462165,"line_start":1547,"line_end":1547,"column_start":40,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":1290},{"krate":0,"index":1291},{"krate":0,"index":1292},{"krate":0,"index":1294}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":468418,"byte_end":468452,"line_start":1714,"line_end":1714,"column_start":40,"column_end":74},"value":"","parent":null,"children":[{"krate":0,"index":1316},{"krate":0,"index":1317},{"krate":0,"index":1318},{"krate":0,"index":1320},{"krate":0,"index":1322}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":473781,"byte_end":473804,"line_start":1866,"line_end":1866,"column_start":40,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":1343},{"krate":0,"index":1344},{"krate":0,"index":1345},{"krate":0,"index":1347}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":479141,"byte_end":479170,"line_start":2014,"line_end":2014,"column_start":40,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":1367},{"krate":0,"index":1368},{"krate":0,"index":1369},{"krate":0,"index":1371},{"krate":0,"index":1373}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":480240,"byte_end":480248,"line_start":2047,"line_end":2047,"column_start":43,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1377}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":480688,"byte_end":480701,"line_start":2060,"line_end":2060,"column_start":54,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":1386}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":481074,"byte_end":481089,"line_start":2073,"line_end":2073,"column_start":36,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1391},{"krate":0,"index":1392},{"krate":0,"index":1393}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":481862,"byte_end":481870,"line_start":2095,"line_end":2095,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1398}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":482348,"byte_end":482356,"line_start":2110,"line_end":2110,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1402}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":482941,"byte_end":482949,"line_start":2127,"line_end":2127,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1407}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":505693,"byte_end":505708,"line_start":141,"line_end":141,"column_start":16,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1435}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":505798,"byte_end":505813,"line_start":147,"line_end":147,"column_start":20,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1437}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":505919,"byte_end":505934,"line_start":153,"line_end":153,"column_start":13,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":505959,"byte_end":505974,"line_start":155,"line_end":155,"column_start":21,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1440}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":513263,"byte_end":513273,"line_start":358,"line_end":358,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1451}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":514022,"byte_end":514032,"line_start":373,"line_end":373,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1453}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":540075,"byte_end":540081,"line_start":129,"line_end":129,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1541}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":540757,"byte_end":540763,"line_start":157,"line_end":157,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1543},{"krate":0,"index":1544},{"krate":0,"index":1545},{"krate":0,"index":1546},{"krate":0,"index":1547},{"krate":0,"index":1548},{"krate":0,"index":1549},{"krate":0,"index":1550},{"krate":0,"index":1551},{"krate":0,"index":1552},{"krate":0,"index":1553},{"krate":0,"index":1554},{"krate":0,"index":1555},{"krate":0,"index":1556},{"krate":0,"index":1557},{"krate":0,"index":1558},{"krate":0,"index":1559},{"krate":0,"index":1560},{"krate":0,"index":1561},{"krate":0,"index":1562},{"krate":0,"index":1563},{"krate":0,"index":1564},{"krate":0,"index":1565},{"krate":0,"index":1573},{"krate":0,"index":1574},{"krate":0,"index":1579},{"krate":0,"index":1580},{"krate":0,"index":1581}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parse.rs","byte_start":609606,"byte_end":609614,"line_start":456,"line_end":456,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1649},{"krate":0,"index":1650}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\strftime.rs","byte_start":656796,"byte_end":656809,"line_start":208,"line_end":208,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1712},{"krate":0,"index":1713}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\strftime.rs","byte_start":658304,"byte_end":658317,"line_start":257,"line_end":257,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1719},{"krate":0,"index":1720}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":529388,"byte_end":529401,"line_start":733,"line_end":733,"column_start":62,"column_end":75},"value":"","parent":null,"children":[{"krate":0,"index":1732},{"krate":0,"index":1733}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":531374,"byte_end":531387,"line_start":794,"line_end":794,"column_start":79,"column_end":92},"value":"","parent":null,"children":[{"krate":0,"index":1739}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":532674,"byte_end":532681,"line_start":840,"line_end":840,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1741},{"krate":0,"index":1742}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":534639,"byte_end":534644,"line_start":914,"line_end":914,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1744},{"krate":0,"index":1745}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":676929,"byte_end":676930,"line_start":48,"line_end":48,"column_start":25,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1763},{"krate":0,"index":1764}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":680311,"byte_end":680319,"line_start":149,"line_end":149,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1773},{"krate":0,"index":1774},{"krate":0,"index":1775}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":683781,"byte_end":683794,"line_start":244,"line_end":244,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1777}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":684373,"byte_end":684386,"line_start":261,"line_end":261,"column_start":28,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1779}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":25363,"byte_end":25373,"line_start":599,"line_end":599,"column_start":55,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":1796}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":25663,"byte_end":25673,"line_start":607,"line_end":607,"column_start":57,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":1800}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":26788,"byte_end":26795,"line_start":646,"line_end":646,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1802},{"krate":0,"index":1803},{"krate":0,"index":1804},{"krate":0,"index":1805},{"krate":0,"index":1806},{"krate":0,"index":1807}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":30786,"byte_end":30793,"line_start":756,"line_end":756,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1809}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":31441,"byte_end":31448,"line_start":773,"line_end":773,"column_start":36,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1811},{"krate":0,"index":1812}],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":32387,"byte_end":32404,"line_start":811,"line_end":811,"column_start":21,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1815}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":32766,"byte_end":32773,"line_start":825,"line_end":825,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1823}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":33027,"byte_end":33041,"line_start":836,"line_end":836,"column_start":36,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1829},{"krate":0,"index":1830},{"krate":0,"index":1831}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":33452,"byte_end":33459,"line_start":851,"line_end":851,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1836}],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":36880,"byte_end":36885,"line_start":976,"line_end":976,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1839},{"krate":0,"index":1840},{"krate":0,"index":1841},{"krate":0,"index":1842}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":40115,"byte_end":40120,"line_start":1071,"line_end":1071,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1844},{"krate":0,"index":1845},{"krate":0,"index":1846}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":41449,"byte_end":41464,"line_start":1114,"line_end":1114,"column_start":21,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1848}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":41725,"byte_end":41730,"line_start":1127,"line_end":1127,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1856}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":41988,"byte_end":42000,"line_start":1138,"line_end":1138,"column_start":36,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1862},{"krate":0,"index":1863},{"krate":0,"index":1864}],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":42416,"byte_end":42421,"line_start":1153,"line_end":1153,"column_start":40,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1869}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":22993,"byte_end":22999,"line_start":523,"line_end":523,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":67}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":24315,"byte_end":24321,"line_start":564,"line_end":564,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":1410}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":528634,"byte_end":528642,"line_start":713,"line_end":713,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":1697}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":58464,"byte_end":58475,"line_start":41,"line_end":41,"column_start":9,"column_end":20},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":1903},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":59656,"byte_end":59667,"line_start":76,"line_end":76,"column_start":20,"column_end":31},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":1903},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":62877,"byte_end":62888,"line_start":169,"line_end":169,"column_start":21,"column_end":32},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":1903},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":63350,"byte_end":63355,"line_start":183,"line_end":183,"column_start":19,"column_end":24},"kind":"SuperTrait","from":{"krate":2,"index":1538},"to":{"krate":0,"index":100}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":63358,"byte_end":63363,"line_start":183,"line_end":183,"column_start":27,"column_end":32},"kind":"SuperTrait","from":{"krate":2,"index":2181},"to":{"krate":0,"index":100}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":63371,"byte_end":63376,"line_start":183,"line_end":183,"column_start":40,"column_end":45},"kind":"SuperTrait","from":{"krate":2,"index":7643},"to":{"krate":0,"index":100}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":63666,"byte_end":63671,"line_start":192,"line_end":192,"column_start":21,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":1538},"to":{"krate":0,"index":102}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":63674,"byte_end":63679,"line_start":192,"line_end":192,"column_start":29,"column_end":34},"kind":"SuperTrait","from":{"krate":2,"index":2181},"to":{"krate":0,"index":102}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":78235,"byte_end":78246,"line_start":27,"line_end":27,"column_start":6,"column_end":17},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":1937},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":80803,"byte_end":80814,"line_start":101,"line_end":101,"column_start":19,"column_end":30},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":1937},"to":{"krate":0,"index":102}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":81402,"byte_end":81413,"line_start":123,"line_end":123,"column_start":17,"column_end":28},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":1937},"to":{"krate":0,"index":100}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":81494,"byte_end":81505,"line_start":129,"line_end":129,"column_start":21,"column_end":32},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":1937},"to":{"krate":2,"index":7643}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":82003,"byte_end":82014,"line_start":143,"line_end":143,"column_start":23,"column_end":34},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":1937},"to":{"krate":2,"index":7648}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":82782,"byte_end":82791,"line_start":164,"line_end":164,"column_start":27,"column_end":36},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":2133},"to":{"krate":2,"index":1596}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":82979,"byte_end":82988,"line_start":173,"line_end":173,"column_start":27,"column_end":36},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":2133},"to":{"krate":2,"index":1601}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":83177,"byte_end":83190,"line_start":182,"line_end":182,"column_start":27,"column_end":40},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":2043},"to":{"krate":2,"index":1596}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":83386,"byte_end":83399,"line_start":191,"line_end":191,"column_start":27,"column_end":40},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":2043},"to":{"krate":2,"index":1601}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":83610,"byte_end":83618,"line_start":200,"line_end":200,"column_start":41,"column_end":49},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":2189},"to":{"krate":2,"index":1596}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":83830,"byte_end":83838,"line_start":209,"line_end":209,"column_start":41,"column_end":49},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":2189},"to":{"krate":2,"index":1601}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\local.rs","byte_start":88173,"byte_end":88178,"line_start":92,"line_end":92,"column_start":6,"column_end":11},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":1952},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\local.rs","byte_start":89069,"byte_end":89074,"line_start":116,"line_end":116,"column_start":19,"column_end":24},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":1952},"to":{"krate":0,"index":102}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\utc.rs","byte_start":94434,"byte_end":94437,"line_start":39,"line_end":39,"column_start":6,"column_end":9},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":1959},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\utc.rs","byte_start":95226,"byte_end":95229,"line_start":61,"line_end":61,"column_start":19,"column_end":22},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":1959},"to":{"krate":0,"index":102}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\utc.rs","byte_start":95749,"byte_end":95752,"line_start":83,"line_end":83,"column_start":17,"column_end":20},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":1959},"to":{"krate":0,"index":100}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\utc.rs","byte_start":95848,"byte_end":95851,"line_start":89,"line_end":89,"column_start":21,"column_end":24},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":1959},"to":{"krate":2,"index":7643}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\utc.rs","byte_start":95967,"byte_end":95970,"line_start":95,"line_end":95,"column_start":23,"column_end":26},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":1959},"to":{"krate":2,"index":7648}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":101765,"byte_end":101774,"line_start":136,"line_end":136,"column_start":6,"column_end":15},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":1970},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":139683,"byte_end":139692,"line_start":1105,"line_end":1105,"column_start":19,"column_end":28},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":1970},"to":{"krate":0,"index":1871}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":152024,"byte_end":152033,"line_start":1472,"line_end":1472,"column_start":27,"column_end":36},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":1970},"to":{"krate":2,"index":1596}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":152252,"byte_end":152261,"line_start":1481,"line_end":1481,"column_start":33,"column_end":42},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":1970},"to":{"krate":2,"index":1629}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":153676,"byte_end":153685,"line_start":1514,"line_end":1514,"column_start":27,"column_end":36},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":1970},"to":{"krate":2,"index":1601}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":153904,"byte_end":153913,"line_start":1523,"line_end":1523,"column_start":33,"column_end":42},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":1970},"to":{"krate":2,"index":1633}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":155169,"byte_end":155178,"line_start":1557,"line_end":1557,"column_start":25,"column_end":34},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":1970},"to":{"krate":2,"index":1601}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":155531,"byte_end":155552,"line_start":1572,"line_end":1572,"column_start":19,"column_end":40},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":1993},"to":{"krate":2,"index":3653}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":156129,"byte_end":156150,"line_start":1592,"line_end":1592,"column_start":28,"column_end":49},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":1993},"to":{"krate":2,"index":3939}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":156302,"byte_end":156324,"line_start":1599,"line_end":1599,"column_start":19,"column_end":41},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":2018},"to":{"krate":2,"index":3653}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":156839,"byte_end":156861,"line_start":1617,"line_end":1617,"column_start":28,"column_end":50},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":2018},"to":{"krate":2,"index":3939}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":157908,"byte_end":157917,"line_start":1645,"line_end":1645,"column_start":21,"column_end":30},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":1970},"to":{"krate":2,"index":7643}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":159176,"byte_end":159185,"line_start":1680,"line_end":1680,"column_start":23,"column_end":32},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":1970},"to":{"krate":2,"index":7648}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":159787,"byte_end":159796,"line_start":1702,"line_end":1702,"column_start":23,"column_end":32},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1970},"to":{"krate":2,"index":6815}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":163750,"byte_end":163759,"line_start":1812,"line_end":1812,"column_start":29,"column_end":38},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":1970},"to":{"krate":18,"index":1680}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":164035,"byte_end":164048,"line_start":1821,"line_end":1821,"column_start":54,"column_end":67},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":403},"to":{"krate":2,"index":7648}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":164350,"byte_end":164366,"line_start":1833,"line_end":1833,"column_start":36,"column_end":52},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":411},"to":{"krate":18,"index":1276}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":165029,"byte_end":165038,"line_start":1857,"line_end":1857,"column_start":40,"column_end":49},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":1970},"to":{"krate":18,"index":1192}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":191107,"byte_end":191120,"line_start":67,"line_end":67,"column_start":6,"column_end":19},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":2043},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":217574,"byte_end":217587,"line_start":710,"line_end":710,"column_start":19,"column_end":32},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":2043},"to":{"krate":0,"index":1871}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":228643,"byte_end":228656,"line_start":1028,"line_end":1028,"column_start":19,"column_end":32},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":2043},"to":{"krate":0,"index":1890}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":234852,"byte_end":234865,"line_start":1200,"line_end":1200,"column_start":21,"column_end":34},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":2043},"to":{"krate":2,"index":7285}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":237480,"byte_end":237493,"line_start":1262,"line_end":1262,"column_start":27,"column_end":40},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":2043},"to":{"krate":2,"index":1596}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":237724,"byte_end":237737,"line_start":1271,"line_end":1271,"column_start":33,"column_end":46},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":2043},"to":{"krate":2,"index":1629}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":240248,"byte_end":240261,"line_start":1332,"line_end":1332,"column_start":27,"column_end":40},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":2043},"to":{"krate":2,"index":1601}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":240492,"byte_end":240505,"line_start":1341,"line_end":1341,"column_start":33,"column_end":46},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":2043},"to":{"krate":2,"index":1633}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":242443,"byte_end":242456,"line_start":1394,"line_end":1394,"column_start":29,"column_end":42},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":2043},"to":{"krate":2,"index":1601}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":243664,"byte_end":243677,"line_start":1430,"line_end":1430,"column_start":21,"column_end":34},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":2043},"to":{"krate":2,"index":7643}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":244773,"byte_end":244786,"line_start":1461,"line_end":1461,"column_start":23,"column_end":36},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":2043},"to":{"krate":2,"index":7648}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":245524,"byte_end":245537,"line_start":1483,"line_end":1483,"column_start":23,"column_end":36},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":2043},"to":{"krate":2,"index":6815}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":253303,"byte_end":253316,"line_start":1716,"line_end":1716,"column_start":29,"column_end":42},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":2043},"to":{"krate":18,"index":1680}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":253592,"byte_end":253605,"line_start":1725,"line_end":1725,"column_start":54,"column_end":67},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":560},"to":{"krate":2,"index":7648}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":253911,"byte_end":253931,"line_start":1737,"line_end":1737,"column_start":36,"column_end":56},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":568},"to":{"krate":18,"index":1276}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":254347,"byte_end":254360,"line_start":1752,"line_end":1752,"column_start":40,"column_end":53},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":2043},"to":{"krate":18,"index":1192}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":259190,"byte_end":259225,"line_start":1882,"line_end":1882,"column_start":40,"column_end":75},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":593},"to":{"krate":18,"index":1276}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":264810,"byte_end":264846,"line_start":2034,"line_end":2034,"column_start":40,"column_end":76},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":618},"to":{"krate":18,"index":1276}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":270247,"byte_end":270278,"line_start":2183,"line_end":2183,"column_start":40,"column_end":71},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":643},"to":{"krate":18,"index":1276}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\internals.rs","byte_start":289744,"byte_end":289753,"line_start":113,"line_end":113,"column_start":6,"column_end":15},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":2068},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\internals.rs","byte_start":290550,"byte_end":290559,"line_start":148,"line_end":148,"column_start":21,"column_end":30},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":2068},"to":{"krate":2,"index":7643}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\internals.rs","byte_start":298700,"byte_end":298702,"line_start":270,"line_end":270,"column_start":6,"column_end":8},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":2081},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\internals.rs","byte_start":300781,"byte_end":300783,"line_start":359,"line_end":359,"column_start":21,"column_end":23},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":2081},"to":{"krate":2,"index":7643}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\internals.rs","byte_start":301382,"byte_end":301385,"line_start":380,"line_end":380,"column_start":6,"column_end":9},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":2097},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\internals.rs","byte_start":303348,"byte_end":303351,"line_start":469,"line_end":469,"column_start":21,"column_end":24},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":2097},"to":{"krate":2,"index":7643}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\isoweek.rs","byte_start":317574,"byte_end":317581,"line_start":48,"line_end":48,"column_start":6,"column_end":13},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":2113},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\isoweek.rs","byte_start":320127,"byte_end":320134,"line_start":130,"line_end":130,"column_start":21,"column_end":28},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":2113},"to":{"krate":2,"index":7643}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":329153,"byte_end":329162,"line_start":187,"line_end":187,"column_start":6,"column_end":15},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":2133},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":353694,"byte_end":353703,"line_start":807,"line_end":807,"column_start":19,"column_end":28},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":2133},"to":{"krate":0,"index":1890}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":360932,"byte_end":360941,"line_start":1020,"line_end":1020,"column_start":21,"column_end":30},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":2133},"to":{"krate":2,"index":7285}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":363948,"byte_end":363957,"line_start":1085,"line_end":1085,"column_start":27,"column_end":36},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":2133},"to":{"krate":2,"index":1596}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":364138,"byte_end":364147,"line_start":1094,"line_end":1094,"column_start":33,"column_end":42},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":2133},"to":{"krate":2,"index":1629}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":366750,"byte_end":366759,"line_start":1155,"line_end":1155,"column_start":27,"column_end":36},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":2133},"to":{"krate":2,"index":1601}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":366940,"byte_end":366949,"line_start":1164,"line_end":1164,"column_start":33,"column_end":42},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":2133},"to":{"krate":2,"index":1633}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":369484,"byte_end":369493,"line_start":1222,"line_end":1222,"column_start":25,"column_end":34},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":2133},"to":{"krate":2,"index":1601}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":370881,"byte_end":370890,"line_start":1259,"line_end":1259,"column_start":21,"column_end":30},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":2133},"to":{"krate":2,"index":7643}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":372743,"byte_end":372752,"line_start":1309,"line_end":1309,"column_start":23,"column_end":32},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":2133},"to":{"krate":2,"index":7648}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":373524,"byte_end":373533,"line_start":1334,"line_end":1334,"column_start":23,"column_end":32},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":2133},"to":{"krate":2,"index":6815}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":378462,"byte_end":378471,"line_start":1474,"line_end":1474,"column_start":29,"column_end":38},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":2133},"to":{"krate":18,"index":1680}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":378727,"byte_end":378743,"line_start":1485,"line_end":1485,"column_start":36,"column_end":52},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":844},"to":{"krate":18,"index":1276}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":379142,"byte_end":379151,"line_start":1500,"line_end":1500,"column_start":40,"column_end":49},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":2133},"to":{"krate":18,"index":1192}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":394816,"byte_end":394820,"line_start":57,"line_end":57,"column_start":20,"column_end":24},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":2158},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":402920,"byte_end":402924,"line_start":277,"line_end":277,"column_start":20,"column_end":24},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":2158},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":404801,"byte_end":404805,"line_start":336,"line_end":336,"column_start":33,"column_end":37},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":2158},"to":{"krate":0,"index":1871}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":406640,"byte_end":406644,"line_start":411,"line_end":411,"column_start":29,"column_end":33},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":2158},"to":{"krate":2,"index":1543}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":406724,"byte_end":406728,"line_start":412,"line_end":412,"column_start":36,"column_end":40},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":2158},"to":{"krate":2,"index":1533}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":406833,"byte_end":406837,"line_start":414,"line_end":414,"column_start":60,"column_end":64},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":2158},"to":{"krate":2,"index":2040}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":406957,"byte_end":406961,"line_start":420,"line_end":420,"column_start":27,"column_end":31},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":2158},"to":{"krate":2,"index":2045}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":407004,"byte_end":407008,"line_start":422,"line_end":422,"column_start":35,"column_end":39},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":2158},"to":{"krate":2,"index":2077}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":407160,"byte_end":407164,"line_start":428,"line_end":428,"column_start":28,"column_end":32},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":2158},"to":{"krate":2,"index":2066}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":407299,"byte_end":407303,"line_start":434,"line_end":434,"column_start":35,"column_end":39},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":2158},"to":{"krate":2,"index":7285}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":407442,"byte_end":407446,"line_start":440,"line_end":440,"column_start":41,"column_end":45},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":2158},"to":{"krate":2,"index":1596}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":407670,"byte_end":407674,"line_start":449,"line_end":449,"column_start":41,"column_end":45},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":2158},"to":{"krate":2,"index":1601}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":407895,"byte_end":407899,"line_start":458,"line_end":458,"column_start":38,"column_end":42},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":2158},"to":{"krate":2,"index":1601}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":408084,"byte_end":408088,"line_start":467,"line_end":467,"column_start":35,"column_end":39},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":2158},"to":{"krate":2,"index":7643}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":408262,"byte_end":408266,"line_start":473,"line_end":473,"column_start":37,"column_end":41},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":2158},"to":{"krate":2,"index":7648}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":411192,"byte_end":411200,"line_start":80,"line_end":80,"column_start":20,"column_end":28},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":2189},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":417247,"byte_end":417255,"line_start":257,"line_end":257,"column_start":30,"column_end":38},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":2189},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":417761,"byte_end":417769,"line_start":269,"line_end":269,"column_start":30,"column_end":38},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":2189},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":418179,"byte_end":418187,"line_start":279,"line_end":279,"column_start":38,"column_end":46},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":2189},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":418639,"byte_end":418647,"line_start":291,"line_end":291,"column_start":38,"column_end":46},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":2189},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":419095,"byte_end":419103,"line_start":303,"line_end":303,"column_start":32,"column_end":40},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":2189},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":419541,"byte_end":419549,"line_start":315,"line_end":315,"column_start":32,"column_end":40},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":2189},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":420265,"byte_end":420273,"line_start":333,"line_end":333,"column_start":6,"column_end":14},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":2189},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":422965,"byte_end":422973,"line_start":393,"line_end":393,"column_start":20,"column_end":28},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":2189},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":428455,"byte_end":428463,"line_start":535,"line_end":535,"column_start":33,"column_end":41},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":2189},"to":{"krate":0,"index":1871}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":430320,"byte_end":430328,"line_start":609,"line_end":609,"column_start":33,"column_end":41},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":2189},"to":{"krate":0,"index":1890}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":431368,"byte_end":431376,"line_start":649,"line_end":649,"column_start":29,"column_end":37},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":2189},"to":{"krate":2,"index":1543}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":431456,"byte_end":431464,"line_start":650,"line_end":650,"column_start":36,"column_end":44},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":2189},"to":{"krate":2,"index":1533}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":431573,"byte_end":431581,"line_start":652,"line_end":652,"column_start":64,"column_end":72},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":2189},"to":{"krate":2,"index":2040}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":431713,"byte_end":431721,"line_start":658,"line_end":658,"column_start":27,"column_end":35},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":2189},"to":{"krate":2,"index":2045}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":431794,"byte_end":431802,"line_start":660,"line_end":660,"column_start":65,"column_end":73},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":2189},"to":{"krate":2,"index":2077}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":432541,"byte_end":432549,"line_start":681,"line_end":681,"column_start":28,"column_end":36},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":2189},"to":{"krate":2,"index":2066}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":432696,"byte_end":432704,"line_start":687,"line_end":687,"column_start":35,"column_end":43},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":2189},"to":{"krate":2,"index":7285}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":432847,"byte_end":432855,"line_start":693,"line_end":693,"column_start":41,"column_end":49},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":2189},"to":{"krate":2,"index":1596}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":433091,"byte_end":433099,"line_start":702,"line_end":702,"column_start":41,"column_end":49},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":2189},"to":{"krate":2,"index":1601}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":433336,"byte_end":433344,"line_start":711,"line_end":711,"column_start":42,"column_end":50},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":2189},"to":{"krate":2,"index":1601}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":433533,"byte_end":433541,"line_start":720,"line_end":720,"column_start":35,"column_end":43},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":2189},"to":{"krate":2,"index":7643}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":433715,"byte_end":433723,"line_start":726,"line_end":726,"column_start":37,"column_end":45},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":2189},"to":{"krate":2,"index":7648}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":433916,"byte_end":433924,"line_start":735,"line_end":735,"column_start":23,"column_end":31},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":2189},"to":{"krate":2,"index":6815}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":434150,"byte_end":434158,"line_start":744,"line_end":744,"column_start":23,"column_end":31},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":2189},"to":{"krate":2,"index":6815}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":434403,"byte_end":434411,"line_start":753,"line_end":753,"column_start":27,"column_end":35},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":2189},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":435063,"byte_end":435071,"line_start":773,"line_end":773,"column_start":27,"column_end":35},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":2189},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":435270,"byte_end":435280,"line_start":780,"line_end":780,"column_start":43,"column_end":53},"kind":{"Impl":{"id":122}},"from":{"krate":1,"index":7446},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":450844,"byte_end":450871,"line_start":1238,"line_end":1238,"column_start":40,"column_end":67},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":2200},"to":{"krate":18,"index":1276}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":456631,"byte_end":456664,"line_start":1395,"line_end":1395,"column_start":40,"column_end":73},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":1258},"to":{"krate":18,"index":1276}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":462137,"byte_end":462165,"line_start":1547,"line_end":1547,"column_start":40,"column_end":68},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":2204},"to":{"krate":18,"index":1276}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":468418,"byte_end":468452,"line_start":1714,"line_end":1714,"column_start":40,"column_end":74},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":1312},"to":{"krate":18,"index":1276}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":473781,"byte_end":473804,"line_start":1866,"line_end":1866,"column_start":40,"column_end":63},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":2196},"to":{"krate":18,"index":1276}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":479141,"byte_end":479170,"line_start":2014,"line_end":2014,"column_start":40,"column_end":69},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":1363},"to":{"krate":18,"index":1276}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":480240,"byte_end":480248,"line_start":2047,"line_end":2047,"column_start":43,"column_end":51},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":2189},"to":{"krate":18,"index":1680}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":480688,"byte_end":480701,"line_start":2060,"line_end":2060,"column_start":54,"column_end":67},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":1379},"to":{"krate":2,"index":7648}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":481074,"byte_end":481089,"line_start":2073,"line_end":2073,"column_start":36,"column_end":51},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":1387},"to":{"krate":18,"index":1276}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":481862,"byte_end":481870,"line_start":2095,"line_end":2095,"column_start":40,"column_end":48},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":2189},"to":{"krate":18,"index":1192}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":482348,"byte_end":482356,"line_start":2110,"line_end":2110,"column_start":40,"column_end":48},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":2189},"to":{"krate":18,"index":1192}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":482941,"byte_end":482949,"line_start":2127,"line_end":2127,"column_start":40,"column_end":48},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":2189},"to":{"krate":18,"index":1192}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":505693,"byte_end":505708,"line_start":141,"line_end":141,"column_start":16,"column_end":31},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":1432},"to":{"krate":2,"index":2181}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":505798,"byte_end":505813,"line_start":147,"line_end":147,"column_start":20,"column_end":35},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":1432},"to":{"krate":2,"index":2040}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":505919,"byte_end":505934,"line_start":153,"line_end":153,"column_start":13,"column_end":28},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":1432},"to":{"krate":2,"index":2045}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":505959,"byte_end":505974,"line_start":155,"line_end":155,"column_start":21,"column_end":36},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":1432},"to":{"krate":2,"index":7643}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":513263,"byte_end":513273,"line_start":358,"line_end":358,"column_start":23,"column_end":33},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":2415},"to":{"krate":2,"index":7648}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":514022,"byte_end":514032,"line_start":373,"line_end":373,"column_start":16,"column_end":26},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":2415},"to":{"krate":1,"index":1592}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":540075,"byte_end":540081,"line_start":129,"line_end":129,"column_start":18,"column_end":24},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":2456},"to":{"krate":2,"index":2206}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":540757,"byte_end":540763,"line_start":157,"line_end":157,"column_start":6,"column_end":12},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":2456},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parse.rs","byte_start":609606,"byte_end":609614,"line_start":456,"line_end":456,"column_start":23,"column_end":31},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":2189},"to":{"krate":2,"index":6815}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\strftime.rs","byte_start":656796,"byte_end":656809,"line_start":208,"line_end":208,"column_start":10,"column_end":23},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":2487},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\strftime.rs","byte_start":658304,"byte_end":658317,"line_start":257,"line_end":257,"column_start":23,"column_end":36},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":2487},"to":{"krate":2,"index":3653}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":529388,"byte_end":529401,"line_start":733,"line_end":733,"column_start":62,"column_end":75},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":2506},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":531374,"byte_end":531387,"line_start":794,"line_end":794,"column_start":79,"column_end":92},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":2506},"to":{"krate":2,"index":7648}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":532674,"byte_end":532681,"line_start":840,"line_end":840,"column_start":18,"column_end":25},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":2534},"to":{"krate":2,"index":6815}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":534639,"byte_end":534644,"line_start":914,"line_end":914,"column_start":18,"column_end":23},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":2578},"to":{"krate":2,"index":6815}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":676929,"byte_end":676930,"line_start":48,"line_end":48,"column_start":25,"column_end":26},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":1762},"to":{"krate":0,"index":1758}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":678627,"byte_end":678632,"line_start":102,"line_end":102,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":1538},"to":{"krate":0,"index":1766}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":680311,"byte_end":680319,"line_start":149,"line_end":149,"column_start":38,"column_end":46},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":2189},"to":{"krate":0,"index":1766}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":683781,"byte_end":683794,"line_start":244,"line_end":244,"column_start":23,"column_end":36},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":2516},"to":{"krate":2,"index":7648}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":684373,"byte_end":684386,"line_start":261,"line_end":261,"column_start":28,"column_end":41},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":2516},"to":{"krate":1,"index":1592}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":25363,"byte_end":25373,"line_start":599,"line_end":599,"column_start":55,"column_end":65},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":1782},"to":{"krate":2,"index":7643}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":25663,"byte_end":25673,"line_start":607,"line_end":607,"column_start":57,"column_end":67},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":1782},"to":{"krate":2,"index":7648}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":26788,"byte_end":26795,"line_start":646,"line_end":646,"column_start":6,"column_end":13},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":2534},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":30786,"byte_end":30793,"line_start":756,"line_end":756,"column_start":23,"column_end":30},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":2534},"to":{"krate":2,"index":7648}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":31441,"byte_end":31448,"line_start":773,"line_end":773,"column_start":36,"column_end":43},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":2534},"to":{"krate":17,"index":149}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":32387,"byte_end":32404,"line_start":811,"line_end":811,"column_start":21,"column_end":38},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":2570},"to":{"krate":2,"index":7643}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":32766,"byte_end":32773,"line_start":825,"line_end":825,"column_start":29,"column_end":36},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":2534},"to":{"krate":18,"index":1680}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":33027,"byte_end":33041,"line_start":836,"line_end":836,"column_start":36,"column_end":50},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":1825},"to":{"krate":18,"index":1276}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":33452,"byte_end":33459,"line_start":851,"line_end":851,"column_start":40,"column_end":47},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":2534},"to":{"krate":18,"index":1192}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":36880,"byte_end":36885,"line_start":976,"line_end":976,"column_start":6,"column_end":11},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":2578},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":40115,"byte_end":40120,"line_start":1071,"line_end":1071,"column_start":36,"column_end":41},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":2578},"to":{"krate":17,"index":149}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":41449,"byte_end":41464,"line_start":1114,"line_end":1114,"column_start":21,"column_end":36},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":2629},"to":{"krate":2,"index":7643}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":41725,"byte_end":41730,"line_start":1127,"line_end":1127,"column_start":29,"column_end":34},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":2578},"to":{"krate":18,"index":1680}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":41988,"byte_end":42000,"line_start":1138,"line_end":1138,"column_start":36,"column_end":48},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":1858},"to":{"krate":18,"index":1276}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":42416,"byte_end":42421,"line_start":1153,"line_end":1153,"column_start":40,"column_end":45},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":2578},"to":{"krate":18,"index":1192}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":44552,"byte_end":44557,"line_start":1228,"line_end":1228,"column_start":21,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":1538},"to":{"krate":0,"index":1871}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":48788,"byte_end":48793,"line_start":1346,"line_end":1346,"column_start":21,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":1538},"to":{"krate":0,"index":1890}}]}