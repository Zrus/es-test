{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12","program":"C:\\Users\\Zrus\\.rustup\\toolchains\\stable-i686-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","num_traits","C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=77164c16ec2f7ac5","-C","extra-filename=-77164c16ec2f7ac5","--out-dir","d:\\Workspace\\Rust\\es-test\\target\\rls\\debug\\deps","-L","dependency=d:\\Workspace\\Rust\\es-test\\target\\rls\\debug\\deps","--cap-lints","allow","--cfg","has_i128","--error-format=json","--sysroot","C:\\Users\\Zrus\\.rustup/toolchains/stable-i686-pc-windows-msvc"],"output":"d:\\Workspace\\Rust\\es-test\\target\\rls\\debug\\deps\\libnum_traits-77164c16ec2f7ac5.rmeta"},"prelude":{"crate_id":{"name":"num_traits","disambiguator":[16254062875512551972,7392369631303827764]},"crate_root":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src","external_crates":[{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","num":1,"id":{"name":"core","disambiguator":[6764811272097449003,13681722573116367099]}},{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[9485826678459717252,15756974541460141494]}},{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[15954912595519161470,12922162993496933985]}}],"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":472,"byte_end":19215,"line_start":11,"line_end":571,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":90},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1043,"byte_end":1050,"line_start":32,"line_end":32,"column_start":17,"column_end":24},"alias_span":null,"name":"Bounded","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1856},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1136,"byte_end":1146,"line_start":35,"line_end":35,"column_start":16,"column_end":26},"alias_span":null,"name":"FloatConst","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":171},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1255,"byte_end":1259,"line_start":37,"line_end":37,"column_start":16,"column_end":20},"alias_span":null,"name":"cast","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":182},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1261,"byte_end":1272,"line_start":37,"line_end":37,"column_start":22,"column_end":33},"alias_span":null,"name":"AsPrimitive","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":149},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1274,"byte_end":1287,"line_start":37,"line_end":37,"column_start":35,"column_end":48},"alias_span":null,"name":"FromPrimitive","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":174},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1289,"byte_end":1296,"line_start":37,"line_end":37,"column_start":50,"column_end":57},"alias_span":null,"name":"NumCast","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":123},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1298,"byte_end":1309,"line_start":37,"line_end":37,"column_start":59,"column_end":70},"alias_span":null,"name":"ToPrimitive","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":273},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1333,"byte_end":1336,"line_start":38,"line_end":38,"column_start":22,"column_end":25},"alias_span":null,"name":"one","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":271},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1338,"byte_end":1342,"line_start":38,"line_end":38,"column_start":27,"column_end":31},"alias_span":null,"name":"zero","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":262},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1344,"byte_end":1347,"line_start":38,"line_end":38,"column_start":33,"column_end":36},"alias_span":null,"name":"One","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":252},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1349,"byte_end":1353,"line_start":38,"line_end":38,"column_start":38,"column_end":42},"alias_span":null,"name":"Zero","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":289},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1369,"byte_end":1376,"line_start":39,"line_end":39,"column_start":14,"column_end":21},"alias_span":null,"name":"PrimInt","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":317},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1406,"byte_end":1416,"line_start":41,"line_end":41,"column_start":5,"column_end":15},"alias_span":null,"name":"CheckedAdd","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":324},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1418,"byte_end":1428,"line_start":41,"line_end":41,"column_start":17,"column_end":27},"alias_span":null,"name":"CheckedDiv","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":322},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1430,"byte_end":1440,"line_start":41,"line_end":41,"column_start":29,"column_end":39},"alias_span":null,"name":"CheckedMul","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":329},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1442,"byte_end":1452,"line_start":41,"line_end":41,"column_start":41,"column_end":51},"alias_span":null,"name":"CheckedNeg","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":326},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1454,"byte_end":1464,"line_start":41,"line_end":41,"column_start":53,"column_end":63},"alias_span":null,"name":"CheckedRem","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":331},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1466,"byte_end":1476,"line_start":41,"line_end":41,"column_start":65,"column_end":75},"alias_span":null,"name":"CheckedShl","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":334},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1478,"byte_end":1488,"line_start":41,"line_end":41,"column_start":77,"column_end":87},"alias_span":null,"name":"CheckedShr","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":320},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1490,"byte_end":1500,"line_start":41,"line_end":41,"column_start":89,"column_end":99},"alias_span":null,"name":"CheckedSub","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":337},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1523,"byte_end":1526,"line_start":43,"line_end":43,"column_start":19,"column_end":22},"alias_span":null,"name":"Inv","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":355},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1551,"byte_end":1557,"line_start":44,"line_end":44,"column_start":24,"column_end":30},"alias_span":null,"name":"MulAdd","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":360},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1559,"byte_end":1571,"line_start":44,"line_end":44,"column_start":32,"column_end":44},"alias_span":null,"name":"MulAddAssign","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":371},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1600,"byte_end":1610,"line_start":45,"line_end":45,"column_start":27,"column_end":37},"alias_span":null,"name":"Saturating","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":376},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1612,"byte_end":1625,"line_start":45,"line_end":45,"column_start":39,"column_end":52},"alias_span":null,"name":"SaturatingAdd","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":380},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1627,"byte_end":1640,"line_start":45,"line_end":45,"column_start":54,"column_end":67},"alias_span":null,"name":"SaturatingMul","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":378},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1642,"byte_end":1655,"line_start":45,"line_end":45,"column_start":69,"column_end":82},"alias_span":null,"name":"SaturatingSub","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":392},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1687,"byte_end":1698,"line_start":47,"line_end":47,"column_start":5,"column_end":16},"alias_span":null,"name":"WrappingAdd","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":396},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1700,"byte_end":1711,"line_start":47,"line_end":47,"column_start":18,"column_end":29},"alias_span":null,"name":"WrappingMul","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":399},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1713,"byte_end":1724,"line_start":47,"line_end":47,"column_start":31,"column_end":42},"alias_span":null,"name":"WrappingNeg","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":402},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1726,"byte_end":1737,"line_start":47,"line_end":47,"column_start":44,"column_end":55},"alias_span":null,"name":"WrappingShl","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":404},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1739,"byte_end":1750,"line_start":47,"line_end":47,"column_start":57,"column_end":68},"alias_span":null,"name":"WrappingShr","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":394},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1752,"byte_end":1763,"line_start":47,"line_end":47,"column_start":70,"column_end":81},"alias_span":null,"name":"WrappingSub","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":437},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1782,"byte_end":1793,"line_start":49,"line_end":49,"column_start":15,"column_end":26},"alias_span":null,"name":"checked_pow","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":435},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1795,"byte_end":1798,"line_start":49,"line_end":49,"column_start":28,"column_end":31},"alias_span":null,"name":"pow","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":430},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1800,"byte_end":1803,"line_start":49,"line_end":49,"column_start":33,"column_end":36},"alias_span":null,"name":"Pow","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":460},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1821,"byte_end":1824,"line_start":50,"line_end":50,"column_start":16,"column_end":19},"alias_span":null,"name":"abs","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":462},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1826,"byte_end":1833,"line_start":50,"line_end":50,"column_start":21,"column_end":28},"alias_span":null,"name":"abs_sub","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":464},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1835,"byte_end":1841,"line_start":50,"line_end":50,"column_start":30,"column_end":36},"alias_span":null,"name":"signum","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":445},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1843,"byte_end":1849,"line_start":50,"line_end":50,"column_start":38,"column_end":44},"alias_span":null,"name":"Signed","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":466},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1851,"byte_end":1859,"line_start":50,"line_end":50,"column_start":46,"column_end":54},"alias_span":null,"name":"Unsigned","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":472,"byte_end":19215,"line_start":11,"line_end":571,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":12},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":26},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":45},{"krate":0,"index":50},{"krate":0,"index":57},{"krate":0,"index":61},{"krate":0,"index":67},{"krate":0,"index":70},{"krate":0,"index":101},{"krate":0,"index":186},{"krate":0,"index":247},{"krate":0,"index":275},{"krate":0,"index":307},{"krate":0,"index":424},{"krate":0,"index":440},{"krate":0,"index":470},{"krate":0,"index":473},{"krate":0,"index":476},{"krate":0,"index":480},{"krate":0,"index":482},{"krate":0,"index":485},{"krate":0,"index":488},{"krate":0,"index":492},{"krate":0,"index":494},{"krate":0,"index":497},{"krate":0,"index":498},{"krate":0,"index":500},{"krate":0,"index":502},{"krate":0,"index":505},{"krate":0,"index":3914},{"krate":0,"index":3917},{"krate":0,"index":3920},{"krate":0,"index":3923},{"krate":0,"index":3926},{"krate":0,"index":3929},{"krate":0,"index":3932},{"krate":0,"index":3935},{"krate":0,"index":3938},{"krate":0,"index":3941},{"krate":0,"index":3944},{"krate":0,"index":3947},{"krate":0,"index":506},{"krate":0,"index":3950},{"krate":0,"index":3955},{"krate":0,"index":3957},{"krate":0,"index":3959},{"krate":0,"index":510},{"krate":0,"index":512},{"krate":0,"index":3961},{"krate":0,"index":3967},{"krate":0,"index":513},{"krate":0,"index":515},{"krate":0,"index":517}],"decl_id":null,"docs":" Numeric traits for generic mathematics","sig":null,"attributes":[{"value":"deny(unconditional_recursion)","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":667,"byte_end":700,"line_start":18,"line_end":18,"column_start":1,"column_end":34}},{"value":"no_std","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":701,"byte_end":711,"line_start":19,"line_end":19,"column_start":1,"column_end":11}}]},{"kind":"Mod","id":{"krate":0,"index":70},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\bounds.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"bounds","qualname":"::bounds","value":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\bounds.rs","parent":null,"children":[{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":75},{"krate":0,"index":78},{"krate":0,"index":84},{"krate":0,"index":90},{"krate":0,"index":93},{"krate":0,"index":519},{"krate":0,"index":522},{"krate":0,"index":525},{"krate":0,"index":528},{"krate":0,"index":531},{"krate":0,"index":534},{"krate":0,"index":537},{"krate":0,"index":540},{"krate":0,"index":543},{"krate":0,"index":546},{"krate":0,"index":549},{"krate":0,"index":552},{"krate":0,"index":94},{"krate":0,"index":555},{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":558},{"krate":0,"index":581},{"krate":0,"index":603},{"krate":0,"index":624},{"krate":0,"index":644},{"krate":0,"index":663},{"krate":0,"index":681},{"krate":0,"index":698},{"krate":0,"index":714},{"krate":0,"index":729},{"krate":0,"index":743},{"krate":0,"index":756},{"krate":0,"index":768},{"krate":0,"index":779},{"krate":0,"index":789},{"krate":0,"index":798},{"krate":0,"index":806},{"krate":0,"index":813},{"krate":0,"index":819},{"krate":0,"index":824},{"krate":0,"index":828},{"krate":0,"index":831}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":90},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\bounds.rs","byte_start":20696,"byte_end":20703,"line_start":9,"line_end":9,"column_start":11,"column_end":18},"name":"Bounded","qualname":"::bounds::Bounded","value":"Bounded","parent":null,"children":[{"krate":0,"index":91},{"krate":0,"index":92}],"decl_id":null,"docs":" Numbers which have upper and lower bounds\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":91},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\bounds.rs","byte_start":20839,"byte_end":20848,"line_start":12,"line_end":12,"column_start":8,"column_end":17},"name":"min_value","qualname":"::bounds::Bounded::min_value","value":"fn () -> Self","parent":{"krate":0,"index":90},"children":[],"decl_id":null,"docs":" returns the smallest finite number this type can represent\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\bounds.rs","byte_start":20933,"byte_end":20942,"line_start":14,"line_end":14,"column_start":8,"column_end":17},"name":"max_value","qualname":"::bounds::Bounded::max_value","value":"fn () -> Self","parent":{"krate":0,"index":90},"children":[],"decl_id":null,"docs":" returns the largest finite number this type can represent\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":101},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"cast","qualname":"::cast","value":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","parent":null,"children":[{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":107},{"krate":0,"index":110},{"krate":0,"index":116},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":834},{"krate":0,"index":849},{"krate":0,"index":864},{"krate":0,"index":879},{"krate":0,"index":894},{"krate":0,"index":909},{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":924},{"krate":0,"index":939},{"krate":0,"index":954},{"krate":0,"index":969},{"krate":0,"index":984},{"krate":0,"index":999},{"krate":0,"index":144},{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":1014},{"krate":0,"index":1065},{"krate":0,"index":149},{"krate":0,"index":164},{"krate":0,"index":1116},{"krate":0,"index":1131},{"krate":0,"index":1146},{"krate":0,"index":1161},{"krate":0,"index":1176},{"krate":0,"index":1191},{"krate":0,"index":1206},{"krate":0,"index":1221},{"krate":0,"index":1236},{"krate":0,"index":1251},{"krate":0,"index":1266},{"krate":0,"index":1281},{"krate":0,"index":1296},{"krate":0,"index":1311},{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":171},{"krate":0,"index":174},{"krate":0,"index":177},{"krate":0,"index":1354},{"krate":0,"index":1357},{"krate":0,"index":1360},{"krate":0,"index":1363},{"krate":0,"index":1366},{"krate":0,"index":1369},{"krate":0,"index":1372},{"krate":0,"index":1375},{"krate":0,"index":1378},{"krate":0,"index":1381},{"krate":0,"index":1384},{"krate":0,"index":1387},{"krate":0,"index":1390},{"krate":0,"index":1393},{"krate":0,"index":178},{"krate":0,"index":182},{"krate":0,"index":185},{"krate":0,"index":1396},{"krate":0,"index":1398},{"krate":0,"index":1400},{"krate":0,"index":1402},{"krate":0,"index":1404},{"krate":0,"index":1406},{"krate":0,"index":1408},{"krate":0,"index":1410},{"krate":0,"index":1412},{"krate":0,"index":1414},{"krate":0,"index":1416},{"krate":0,"index":1418},{"krate":0,"index":1420},{"krate":0,"index":1422},{"krate":0,"index":1424},{"krate":0,"index":1426},{"krate":0,"index":1428},{"krate":0,"index":1430},{"krate":0,"index":1432},{"krate":0,"index":1434},{"krate":0,"index":1436},{"krate":0,"index":1438},{"krate":0,"index":1440},{"krate":0,"index":1442},{"krate":0,"index":1444},{"krate":0,"index":1446},{"krate":0,"index":1448},{"krate":0,"index":1450},{"krate":0,"index":1452},{"krate":0,"index":1454},{"krate":0,"index":1456},{"krate":0,"index":1458},{"krate":0,"index":1460},{"krate":0,"index":1462},{"krate":0,"index":1464},{"krate":0,"index":1466},{"krate":0,"index":1468},{"krate":0,"index":1470},{"krate":0,"index":1472},{"krate":0,"index":1474},{"krate":0,"index":1476},{"krate":0,"index":1478},{"krate":0,"index":1480},{"krate":0,"index":1482},{"krate":0,"index":1484},{"krate":0,"index":1486},{"krate":0,"index":1488},{"krate":0,"index":1490},{"krate":0,"index":1492},{"krate":0,"index":1494},{"krate":0,"index":1496},{"krate":0,"index":1498},{"krate":0,"index":1500},{"krate":0,"index":1502},{"krate":0,"index":1504},{"krate":0,"index":1506},{"krate":0,"index":1508},{"krate":0,"index":1510},{"krate":0,"index":1512},{"krate":0,"index":1514},{"krate":0,"index":1516},{"krate":0,"index":1518},{"krate":0,"index":1520},{"krate":0,"index":1522},{"krate":0,"index":1524},{"krate":0,"index":1526},{"krate":0,"index":1528},{"krate":0,"index":1530},{"krate":0,"index":1532},{"krate":0,"index":1534},{"krate":0,"index":1536},{"krate":0,"index":1538},{"krate":0,"index":1540},{"krate":0,"index":1542},{"krate":0,"index":1544},{"krate":0,"index":1546},{"krate":0,"index":1548},{"krate":0,"index":1550},{"krate":0,"index":1552},{"krate":0,"index":1554},{"krate":0,"index":1556},{"krate":0,"index":1558},{"krate":0,"index":1560},{"krate":0,"index":1562},{"krate":0,"index":1564},{"krate":0,"index":1566},{"krate":0,"index":1568},{"krate":0,"index":1570},{"krate":0,"index":1572},{"krate":0,"index":1574},{"krate":0,"index":1576},{"krate":0,"index":1578},{"krate":0,"index":1580},{"krate":0,"index":1582},{"krate":0,"index":1584},{"krate":0,"index":1586},{"krate":0,"index":1588},{"krate":0,"index":1590},{"krate":0,"index":1592},{"krate":0,"index":1594},{"krate":0,"index":1596},{"krate":0,"index":1598},{"krate":0,"index":1600},{"krate":0,"index":1602},{"krate":0,"index":1604},{"krate":0,"index":1606},{"krate":0,"index":1608},{"krate":0,"index":1610},{"krate":0,"index":1612},{"krate":0,"index":1614},{"krate":0,"index":1616},{"krate":0,"index":1618},{"krate":0,"index":1620},{"krate":0,"index":1622},{"krate":0,"index":1624},{"krate":0,"index":1626},{"krate":0,"index":1628},{"krate":0,"index":1630},{"krate":0,"index":1632},{"krate":0,"index":1634},{"krate":0,"index":1636},{"krate":0,"index":1638},{"krate":0,"index":1640},{"krate":0,"index":1642},{"krate":0,"index":1644},{"krate":0,"index":1646},{"krate":0,"index":1648},{"krate":0,"index":1650},{"krate":0,"index":1652},{"krate":0,"index":1654},{"krate":0,"index":1656},{"krate":0,"index":1658},{"krate":0,"index":1660},{"krate":0,"index":1662},{"krate":0,"index":1664},{"krate":0,"index":1666},{"krate":0,"index":1668},{"krate":0,"index":1670},{"krate":0,"index":1672},{"krate":0,"index":1674},{"krate":0,"index":1676},{"krate":0,"index":1678},{"krate":0,"index":1680},{"krate":0,"index":1682},{"krate":0,"index":1684},{"krate":0,"index":1686},{"krate":0,"index":1688},{"krate":0,"index":1690},{"krate":0,"index":1692},{"krate":0,"index":1694},{"krate":0,"index":1696},{"krate":0,"index":1698},{"krate":0,"index":1700},{"krate":0,"index":1702},{"krate":0,"index":1704},{"krate":0,"index":1706},{"krate":0,"index":1708},{"krate":0,"index":1710},{"krate":0,"index":1712},{"krate":0,"index":1714},{"krate":0,"index":1716},{"krate":0,"index":1718},{"krate":0,"index":1720},{"krate":0,"index":1722},{"krate":0,"index":1724},{"krate":0,"index":1726},{"krate":0,"index":1728},{"krate":0,"index":1730},{"krate":0,"index":1732},{"krate":0,"index":1734},{"krate":0,"index":1736},{"krate":0,"index":1738},{"krate":0,"index":1740},{"krate":0,"index":1742},{"krate":0,"index":1744},{"krate":0,"index":1746},{"krate":0,"index":1748},{"krate":0,"index":1750},{"krate":0,"index":1752},{"krate":0,"index":1754},{"krate":0,"index":1756},{"krate":0,"index":1758},{"krate":0,"index":1760},{"krate":0,"index":1762},{"krate":0,"index":1764},{"krate":0,"index":1766},{"krate":0,"index":1768},{"krate":0,"index":1770},{"krate":0,"index":1772},{"krate":0,"index":1774},{"krate":0,"index":1776},{"krate":0,"index":1778},{"krate":0,"index":1780},{"krate":0,"index":1782},{"krate":0,"index":1784},{"krate":0,"index":1786},{"krate":0,"index":1788},{"krate":0,"index":1790},{"krate":0,"index":1792},{"krate":0,"index":1794},{"krate":0,"index":1796},{"krate":0,"index":1798},{"krate":0,"index":1800},{"krate":0,"index":1802},{"krate":0,"index":1804},{"krate":0,"index":1806},{"krate":0,"index":1808},{"krate":0,"index":1810},{"krate":0,"index":1812},{"krate":0,"index":1814},{"krate":0,"index":1816},{"krate":0,"index":1818},{"krate":0,"index":1820},{"krate":0,"index":1822},{"krate":0,"index":1824},{"krate":0,"index":1826},{"krate":0,"index":1828},{"krate":0,"index":1830},{"krate":0,"index":1832},{"krate":0,"index":1834},{"krate":0,"index":1836},{"krate":0,"index":1838}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":123},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":24037,"byte_end":24048,"line_start":12,"line_end":12,"column_start":11,"column_end":22},"name":"ToPrimitive","qualname":"::cast::ToPrimitive","value":"ToPrimitive","parent":null,"children":[{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":136},{"krate":0,"index":137}],"decl_id":null,"docs":" A generic trait for converting a value to a number.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":24207,"byte_end":24215,"line_start":16,"line_end":16,"column_start":8,"column_end":16},"name":"to_isize","qualname":"::cast::ToPrimitive::to_isize","value":"fn (&self) -> Option<isize>","parent":{"krate":0,"index":123},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `isize`. If the value cannot be\n represented by an `isize`, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":24190,"byte_end":24199,"line_start":15,"line_end":15,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":125},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":24462,"byte_end":24467,"line_start":23,"line_end":23,"column_start":8,"column_end":13},"name":"to_i8","qualname":"::cast::ToPrimitive::to_i8","value":"fn (&self) -> Option<i8>","parent":{"krate":0,"index":123},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `i8`. If the value cannot be\n represented by an `i8`, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":24445,"byte_end":24454,"line_start":22,"line_end":22,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":24710,"byte_end":24716,"line_start":30,"line_end":30,"column_start":8,"column_end":14},"name":"to_i16","qualname":"::cast::ToPrimitive::to_i16","value":"fn (&self) -> Option<i16>","parent":{"krate":0,"index":123},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `i16`. If the value cannot be\n represented by an `i16`, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":24693,"byte_end":24702,"line_start":29,"line_end":29,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":127},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":24961,"byte_end":24967,"line_start":37,"line_end":37,"column_start":8,"column_end":14},"name":"to_i32","qualname":"::cast::ToPrimitive::to_i32","value":"fn (&self) -> Option<i32>","parent":{"krate":0,"index":123},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `i32`. If the value cannot be\n represented by an `i32`, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":24944,"byte_end":24953,"line_start":36,"line_end":36,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":128},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":25198,"byte_end":25204,"line_start":43,"line_end":43,"column_start":8,"column_end":14},"name":"to_i64","qualname":"::cast::ToPrimitive::to_i64","value":"fn (&self) -> Option<i64>","parent":{"krate":0,"index":123},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `i64`. If the value cannot be\n represented by an `i64`, then `None` is returned.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":129},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":25721,"byte_end":25728,"line_start":55,"line_end":55,"column_start":8,"column_end":15},"name":"to_i128","qualname":"::cast::ToPrimitive::to_i128","value":"fn (&self) -> Option<i128>","parent":{"krate":0,"index":123},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `i128`. If the value cannot be\n represented by an `i128` (`i64` under the default implementation), then\n `None` is returned.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":25683,"byte_end":25692,"line_start":53,"line_end":53,"column_start":5,"column_end":14}},{"value":"cfg(has_i128)","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":25697,"byte_end":25713,"line_start":54,"line_end":54,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":130},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":25953,"byte_end":25961,"line_start":62,"line_end":62,"column_start":8,"column_end":16},"name":"to_usize","qualname":"::cast::ToPrimitive::to_usize","value":"fn (&self) -> Option<usize>","parent":{"krate":0,"index":123},"children":[],"decl_id":null,"docs":" Converts the value of `self` to a `usize`. If the value cannot be\n represented by a `usize`, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":25936,"byte_end":25945,"line_start":61,"line_end":61,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":131},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":26206,"byte_end":26211,"line_start":69,"line_end":69,"column_start":8,"column_end":13},"name":"to_u8","qualname":"::cast::ToPrimitive::to_u8","value":"fn (&self) -> Option<u8>","parent":{"krate":0,"index":123},"children":[],"decl_id":null,"docs":" Converts the value of `self` to a `u8`. If the value cannot be\n represented by a `u8`, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":26189,"byte_end":26198,"line_start":68,"line_end":68,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":26452,"byte_end":26458,"line_start":76,"line_end":76,"column_start":8,"column_end":14},"name":"to_u16","qualname":"::cast::ToPrimitive::to_u16","value":"fn (&self) -> Option<u16>","parent":{"krate":0,"index":123},"children":[],"decl_id":null,"docs":" Converts the value of `self` to a `u16`. If the value cannot be\n represented by a `u16`, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":26435,"byte_end":26444,"line_start":75,"line_end":75,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":133},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":26701,"byte_end":26707,"line_start":83,"line_end":83,"column_start":8,"column_end":14},"name":"to_u32","qualname":"::cast::ToPrimitive::to_u32","value":"fn (&self) -> Option<u32>","parent":{"krate":0,"index":123},"children":[],"decl_id":null,"docs":" Converts the value of `self` to a `u32`. If the value cannot be\n represented by a `u32`, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":26684,"byte_end":26693,"line_start":82,"line_end":82,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":26936,"byte_end":26942,"line_start":89,"line_end":89,"column_start":8,"column_end":14},"name":"to_u64","qualname":"::cast::ToPrimitive::to_u64","value":"fn (&self) -> Option<u64>","parent":{"krate":0,"index":123},"children":[],"decl_id":null,"docs":" Converts the value of `self` to a `u64`. If the value cannot be\n represented by a `u64`, then `None` is returned.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":135},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":27458,"byte_end":27465,"line_start":101,"line_end":101,"column_start":8,"column_end":15},"name":"to_u128","qualname":"::cast::ToPrimitive::to_u128","value":"fn (&self) -> Option<u128>","parent":{"krate":0,"index":123},"children":[],"decl_id":null,"docs":" Converts the value of `self` to a `u128`. If the value cannot be\n represented by a `u128` (`u64` under the default implementation), then\n `None` is returned.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":27420,"byte_end":27429,"line_start":99,"line_end":99,"column_start":5,"column_end":14}},{"value":"cfg(has_i128)","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":27434,"byte_end":27450,"line_start":100,"line_end":100,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":27688,"byte_end":27694,"line_start":108,"line_end":108,"column_start":8,"column_end":14},"name":"to_f32","qualname":"::cast::ToPrimitive::to_f32","value":"fn (&self) -> Option<f32>","parent":{"krate":0,"index":123},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `f32`. If the value cannot be\n represented by an `f32`, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":27671,"byte_end":27680,"line_start":107,"line_end":107,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":137},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":27939,"byte_end":27945,"line_start":115,"line_end":115,"column_start":8,"column_end":14},"name":"to_f64","qualname":"::cast::ToPrimitive::to_f64","value":"fn (&self) -> Option<f64>","parent":{"krate":0,"index":123},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `f64`. If the value cannot be\n represented by an `f64`, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":27922,"byte_end":27931,"line_start":114,"line_end":114,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":149},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":36930,"byte_end":36943,"line_start":395,"line_end":395,"column_start":11,"column_end":24},"name":"FromPrimitive","qualname":"::cast::FromPrimitive","value":"FromPrimitive: Sized","parent":null,"children":[{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":163}],"decl_id":null,"docs":" A generic trait for converting a number to a value.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":37126,"byte_end":37136,"line_start":399,"line_end":399,"column_start":8,"column_end":18},"name":"from_isize","qualname":"::cast::FromPrimitive::from_isize","value":"fn (n: isize) -> Option<Self>","parent":{"krate":0,"index":149},"children":[],"decl_id":null,"docs":" Converts an `isize` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":37109,"byte_end":37118,"line_start":398,"line_end":398,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":151},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":37395,"byte_end":37402,"line_start":406,"line_end":406,"column_start":8,"column_end":15},"name":"from_i8","qualname":"::cast::FromPrimitive::from_i8","value":"fn (n: i8) -> Option<Self>","parent":{"krate":0,"index":149},"children":[],"decl_id":null,"docs":" Converts an `i8` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":37378,"byte_end":37387,"line_start":405,"line_end":405,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":37653,"byte_end":37661,"line_start":413,"line_end":413,"column_start":8,"column_end":16},"name":"from_i16","qualname":"::cast::FromPrimitive::from_i16","value":"fn (n: i16) -> Option<Self>","parent":{"krate":0,"index":149},"children":[],"decl_id":null,"docs":" Converts an `i16` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":37636,"byte_end":37645,"line_start":412,"line_end":412,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":37913,"byte_end":37921,"line_start":420,"line_end":420,"column_start":8,"column_end":16},"name":"from_i32","qualname":"::cast::FromPrimitive::from_i32","value":"fn (n: i32) -> Option<Self>","parent":{"krate":0,"index":149},"children":[],"decl_id":null,"docs":" Converts an `i32` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":37896,"byte_end":37905,"line_start":419,"line_end":419,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":38159,"byte_end":38167,"line_start":426,"line_end":426,"column_start":8,"column_end":16},"name":"from_i64","qualname":"::cast::FromPrimitive::from_i64","value":"fn (n: i64) -> Option<Self>","parent":{"krate":0,"index":149},"children":[],"decl_id":null,"docs":" Converts an `i64` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":155},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":38657,"byte_end":38666,"line_start":437,"line_end":437,"column_start":8,"column_end":17},"name":"from_i128","qualname":"::cast::FromPrimitive::from_i128","value":"fn (n: i128) -> Option<Self>","parent":{"krate":0,"index":149},"children":[],"decl_id":null,"docs":" Converts an `i128` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":38619,"byte_end":38628,"line_start":435,"line_end":435,"column_start":5,"column_end":14}},{"value":"cfg(has_i128)","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":38633,"byte_end":38649,"line_start":436,"line_end":436,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":38926,"byte_end":38936,"line_start":444,"line_end":444,"column_start":8,"column_end":18},"name":"from_usize","qualname":"::cast::FromPrimitive::from_usize","value":"fn (n: usize) -> Option<Self>","parent":{"krate":0,"index":149},"children":[],"decl_id":null,"docs":" Converts a `usize` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":38909,"byte_end":38918,"line_start":443,"line_end":443,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":157},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":39195,"byte_end":39202,"line_start":451,"line_end":451,"column_start":8,"column_end":15},"name":"from_u8","qualname":"::cast::FromPrimitive::from_u8","value":"fn (n: u8) -> Option<Self>","parent":{"krate":0,"index":149},"children":[],"decl_id":null,"docs":" Converts an `u8` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":39178,"byte_end":39187,"line_start":450,"line_end":450,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":39453,"byte_end":39461,"line_start":458,"line_end":458,"column_start":8,"column_end":16},"name":"from_u16","qualname":"::cast::FromPrimitive::from_u16","value":"fn (n: u16) -> Option<Self>","parent":{"krate":0,"index":149},"children":[],"decl_id":null,"docs":" Converts an `u16` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":39436,"byte_end":39445,"line_start":457,"line_end":457,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":159},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":39713,"byte_end":39721,"line_start":465,"line_end":465,"column_start":8,"column_end":16},"name":"from_u32","qualname":"::cast::FromPrimitive::from_u32","value":"fn (n: u32) -> Option<Self>","parent":{"krate":0,"index":149},"children":[],"decl_id":null,"docs":" Converts an `u32` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":39696,"byte_end":39705,"line_start":464,"line_end":464,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":39959,"byte_end":39967,"line_start":471,"line_end":471,"column_start":8,"column_end":16},"name":"from_u64","qualname":"::cast::FromPrimitive::from_u64","value":"fn (n: u64) -> Option<Self>","parent":{"krate":0,"index":149},"children":[],"decl_id":null,"docs":" Converts an `u64` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":161},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":40457,"byte_end":40466,"line_start":482,"line_end":482,"column_start":8,"column_end":17},"name":"from_u128","qualname":"::cast::FromPrimitive::from_u128","value":"fn (n: u128) -> Option<Self>","parent":{"krate":0,"index":149},"children":[],"decl_id":null,"docs":" Converts an `u128` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":40419,"byte_end":40428,"line_start":480,"line_end":480,"column_start":5,"column_end":14}},{"value":"cfg(has_i128)","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":40433,"byte_end":40449,"line_start":481,"line_end":481,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":40724,"byte_end":40732,"line_start":489,"line_end":489,"column_start":8,"column_end":16},"name":"from_f32","qualname":"::cast::FromPrimitive::from_f32","value":"fn (n: f32) -> Option<Self>","parent":{"krate":0,"index":149},"children":[],"decl_id":null,"docs":" Converts a `f32` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":40707,"byte_end":40716,"line_start":488,"line_end":488,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":163},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":40983,"byte_end":40991,"line_start":496,"line_end":496,"column_start":8,"column_end":16},"name":"from_f64","qualname":"::cast::FromPrimitive::from_f64","value":"fn (n: f64) -> Option<Self>","parent":{"krate":0,"index":149},"children":[],"decl_id":null,"docs":" Converts a `f64` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":40966,"byte_end":40975,"line_start":495,"line_end":495,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":171},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":45237,"byte_end":45241,"line_start":666,"line_end":666,"column_start":8,"column_end":12},"name":"cast","qualname":"::cast::cast","value":"fn <T, U> (n: T) -> Option<U>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one machine scalar to another.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":45220,"byte_end":45229,"line_start":665,"line_end":665,"column_start":1,"column_end":10}}]},{"kind":"Trait","id":{"krate":0,"index":174},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":45375,"byte_end":45382,"line_start":671,"line_end":671,"column_start":11,"column_end":18},"name":"NumCast","qualname":"::cast::NumCast","value":"NumCast: Sized + ToPrimitive","parent":null,"children":[{"krate":0,"index":175}],"decl_id":null,"docs":" An interface for casting between machine scalars.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":175},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":45628,"byte_end":45632,"line_start":675,"line_end":675,"column_start":8,"column_end":12},"name":"from","qualname":"::cast::NumCast::from","value":"fn <T> (n: T) -> Option<Self>","parent":{"krate":0,"index":174},"children":[],"decl_id":null,"docs":" Creates a number from another value that can be converted into\n a primitive via the `ToPrimitive` trait. If the source value cannot be\n represented by the target type, then `None` is returned.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":182},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":47768,"byte_end":47779,"line_start":750,"line_end":750,"column_start":11,"column_end":22},"name":"AsPrimitive","qualname":"::cast::AsPrimitive","value":"AsPrimitive<T>: 'static + Copy","parent":null,"children":[{"krate":0,"index":184}],"decl_id":null,"docs":" A generic interface for casting between machine scalars with the\n `as` operator, which admits narrowing and precision loss.\n Implementers of this trait `AsPrimitive` should behave like a primitive\n numeric type (e.g. a newtype around another primitive), and the\n intended conversion must never fail.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":47898,"byte_end":47901,"line_start":755,"line_end":755,"column_start":8,"column_end":11},"name":"as_","qualname":"::cast::AsPrimitive::as_","value":"fn (self) -> T","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Convert a value to another, using the `as` operator.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":186},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"float","qualname":"::float","value":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","parent":null,"children":[{"krate":0,"index":187},{"krate":0,"index":188},{"krate":0,"index":189},{"krate":0,"index":193},{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":199},{"krate":0,"index":229},{"krate":0,"index":237},{"krate":0,"index":244},{"krate":0,"index":245},{"krate":0,"index":246},{"krate":0,"index":1856},{"krate":0,"index":1876},{"krate":0,"index":1896}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":199},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":49627,"byte_end":49636,"line_start":16,"line_end":16,"column_start":11,"column_end":20},"name":"FloatCore","qualname":"::float::FloatCore","value":"FloatCore: Num + NumCast + Neg<Output = Self> + PartialOrd + Copy","parent":null,"children":[{"krate":0,"index":200},{"krate":0,"index":201},{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":206},{"krate":0,"index":207},{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":211},{"krate":0,"index":212},{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":216},{"krate":0,"index":217},{"krate":0,"index":218},{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":225},{"krate":0,"index":226},{"krate":0,"index":227},{"krate":0,"index":228}],"decl_id":null,"docs":" Generic trait for floating point numbers that works with `no_std`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":200},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":50033,"byte_end":50041,"line_start":32,"line_end":32,"column_start":8,"column_end":16},"name":"infinity","qualname":"::float::FloatCore::infinity","value":"fn () -> Self","parent":{"krate":0,"index":199},"children":[],"decl_id":null,"docs":" Returns positive infinity.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":201},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":50404,"byte_end":50416,"line_start":49,"line_end":49,"column_start":8,"column_end":20},"name":"neg_infinity","qualname":"::float::FloatCore::neg_infinity","value":"fn () -> Self","parent":{"krate":0,"index":199},"children":[],"decl_id":null,"docs":" Returns negative infinity.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":202},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":50726,"byte_end":50729,"line_start":66,"line_end":66,"column_start":8,"column_end":11},"name":"nan","qualname":"::float::FloatCore::nan","value":"fn () -> Self","parent":{"krate":0,"index":199},"children":[],"decl_id":null,"docs":" Returns NaN.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":203},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":51145,"byte_end":51153,"line_start":85,"line_end":85,"column_start":8,"column_end":16},"name":"neg_zero","qualname":"::float::FloatCore::neg_zero","value":"fn () -> Self","parent":{"krate":0,"index":199},"children":[],"decl_id":null,"docs":" Returns `-0.0`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":204},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":51532,"byte_end":51541,"line_start":102,"line_end":102,"column_start":8,"column_end":17},"name":"min_value","qualname":"::float::FloatCore::min_value","value":"fn () -> Self","parent":{"krate":0,"index":199},"children":[],"decl_id":null,"docs":" Returns the smallest finite value that this type can represent.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":205},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":51961,"byte_end":51979,"line_start":119,"line_end":119,"column_start":8,"column_end":26},"name":"min_positive_value","qualname":"::float::FloatCore::min_positive_value","value":"fn () -> Self","parent":{"krate":0,"index":199},"children":[],"decl_id":null,"docs":" Returns the smallest positive, normalized value that this type can represent.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":206},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":52341,"byte_end":52348,"line_start":136,"line_end":136,"column_start":8,"column_end":15},"name":"epsilon","qualname":"::float::FloatCore::epsilon","value":"fn () -> Self","parent":{"krate":0,"index":199},"children":[],"decl_id":null,"docs":" Returns epsilon, a small positive value.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":207},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":52726,"byte_end":52735,"line_start":153,"line_end":153,"column_start":8,"column_end":17},"name":"max_value","qualname":"::float::FloatCore::max_value","value":"fn () -> Self","parent":{"krate":0,"index":199},"children":[],"decl_id":null,"docs":" Returns the largest finite value that this type can represent.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":208},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":53185,"byte_end":53191,"line_start":173,"line_end":173,"column_start":8,"column_end":14},"name":"is_nan","qualname":"::float::FloatCore::is_nan","value":"fn (self) -> bool","parent":{"krate":0,"index":199},"children":[],"decl_id":null,"docs":" Returns `true` if the number is NaN.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":53168,"byte_end":53177,"line_start":172,"line_end":172,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":209},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":53768,"byte_end":53779,"line_start":197,"line_end":197,"column_start":8,"column_end":19},"name":"is_infinite","qualname":"::float::FloatCore::is_infinite","value":"fn (self) -> bool","parent":{"krate":0,"index":199},"children":[],"decl_id":null,"docs":" Returns `true` if the number is infinite.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":53751,"byte_end":53760,"line_start":196,"line_end":196,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":210},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":54380,"byte_end":54389,"line_start":220,"line_end":220,"column_start":8,"column_end":17},"name":"is_finite","qualname":"::float::FloatCore::is_finite","value":"fn (self) -> bool","parent":{"krate":0,"index":199},"children":[],"decl_id":null,"docs":" Returns `true` if the number is neither infinite or NaN.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":54363,"byte_end":54372,"line_start":219,"line_end":219,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":211},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":54987,"byte_end":54996,"line_start":243,"line_end":243,"column_start":8,"column_end":17},"name":"is_normal","qualname":"::float::FloatCore::is_normal","value":"fn (self) -> bool","parent":{"krate":0,"index":199},"children":[],"decl_id":null,"docs":" Returns `true` if the number is neither zero, infinite, subnormal or NaN.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":54970,"byte_end":54979,"line_start":242,"line_end":242,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":212},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":55835,"byte_end":55843,"line_start":269,"line_end":269,"column_start":8,"column_end":16},"name":"classify","qualname":"::float::FloatCore::classify","value":"fn (self) -> FpCategory","parent":{"krate":0,"index":199},"children":[],"decl_id":null,"docs":" Returns the floating point category of the number. If only one property\n is going to be tested, it is generally faster to use the specific\n predicate instead.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":213},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":56476,"byte_end":56481,"line_start":294,"line_end":294,"column_start":8,"column_end":13},"name":"floor","qualname":"::float::FloatCore::floor","value":"fn (self) -> Self","parent":{"krate":0,"index":199},"children":[],"decl_id":null,"docs":" Returns the largest integer less than or equal to a number.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":56459,"byte_end":56468,"line_start":293,"line_end":293,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":214},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":57327,"byte_end":57331,"line_start":328,"line_end":328,"column_start":8,"column_end":12},"name":"ceil","qualname":"::float::FloatCore::ceil","value":"fn (self) -> Self","parent":{"krate":0,"index":199},"children":[],"decl_id":null,"docs":" Returns the smallest integer greater than or equal to a number.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":57310,"byte_end":57319,"line_start":327,"line_end":327,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":215},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":58163,"byte_end":58168,"line_start":361,"line_end":361,"column_start":8,"column_end":13},"name":"round","qualname":"::float::FloatCore::round","value":"fn (self) -> Self","parent":{"krate":0,"index":199},"children":[],"decl_id":null,"docs":" Returns the nearest integer to a number. Round half-way cases away from `0.0`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":58146,"byte_end":58155,"line_start":360,"line_end":360,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":216},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":59259,"byte_end":59264,"line_start":405,"line_end":405,"column_start":8,"column_end":13},"name":"trunc","qualname":"::float::FloatCore::trunc","value":"fn (self) -> Self","parent":{"krate":0,"index":199},"children":[],"decl_id":null,"docs":" Return the integer part of a number.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":59242,"byte_end":59251,"line_start":404,"line_end":404,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":217},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":59985,"byte_end":59990,"line_start":437,"line_end":437,"column_start":8,"column_end":13},"name":"fract","qualname":"::float::FloatCore::fract","value":"fn (self) -> Self","parent":{"krate":0,"index":199},"children":[],"decl_id":null,"docs":" Returns the fractional part of a number.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":59968,"byte_end":59977,"line_start":436,"line_end":436,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":218},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":60695,"byte_end":60698,"line_start":466,"line_end":466,"column_start":8,"column_end":11},"name":"abs","qualname":"::float::FloatCore::abs","value":"fn (self) -> Self","parent":{"krate":0,"index":199},"children":[],"decl_id":null,"docs":" Computes the absolute value of `self`. Returns `FloatCore::nan()` if the\n number is `FloatCore::nan()`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":60678,"byte_end":60687,"line_start":465,"line_end":465,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":219},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":61622,"byte_end":61628,"line_start":500,"line_end":500,"column_start":8,"column_end":14},"name":"signum","qualname":"::float::FloatCore::signum","value":"fn (self) -> Self","parent":{"krate":0,"index":199},"children":[],"decl_id":null,"docs":" Returns a number that represents the sign of `self`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":61605,"byte_end":61614,"line_start":499,"line_end":499,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":220},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":62490,"byte_end":62506,"line_start":533,"line_end":533,"column_start":8,"column_end":24},"name":"is_sign_positive","qualname":"::float::FloatCore::is_sign_positive","value":"fn (self) -> bool","parent":{"krate":0,"index":199},"children":[],"decl_id":null,"docs":" Returns `true` if `self` is positive, including `+0.0` and\n `FloatCore::infinity()`, and since Rust 1.20 also\n `FloatCore::nan()`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":62473,"byte_end":62482,"line_start":532,"line_end":532,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":221},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":63236,"byte_end":63252,"line_start":560,"line_end":560,"column_start":8,"column_end":24},"name":"is_sign_negative","qualname":"::float::FloatCore::is_sign_negative","value":"fn (self) -> bool","parent":{"krate":0,"index":199},"children":[],"decl_id":null,"docs":" Returns `true` if `self` is negative, including `-0.0` and\n `FloatCore::neg_infinity()`, and since Rust 1.20 also\n `-FloatCore::nan()`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":63219,"byte_end":63228,"line_start":559,"line_end":559,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":222},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":63885,"byte_end":63888,"line_start":585,"line_end":585,"column_start":8,"column_end":11},"name":"min","qualname":"::float::FloatCore::min","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":199},"children":[],"decl_id":null,"docs":" Returns the minimum of the two numbers.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":63868,"byte_end":63877,"line_start":584,"line_end":584,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":223},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":64685,"byte_end":64688,"line_start":619,"line_end":619,"column_start":8,"column_end":11},"name":"max","qualname":"::float::FloatCore::max","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":199},"children":[],"decl_id":null,"docs":" Returns the maximum of the two numbers.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":64668,"byte_end":64677,"line_start":618,"line_end":618,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":224},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":65443,"byte_end":65448,"line_start":652,"line_end":652,"column_start":8,"column_end":13},"name":"recip","qualname":"::float::FloatCore::recip","value":"fn (self) -> Self","parent":{"krate":0,"index":199},"children":[],"decl_id":null,"docs":" Returns the reciprocal (multiplicative inverse) of the number.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":65426,"byte_end":65435,"line_start":651,"line_end":651,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":225},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":66042,"byte_end":66046,"line_start":676,"line_end":676,"column_start":8,"column_end":12},"name":"powi","qualname":"::float::FloatCore::powi","value":"fn (mut self, mut exp: i32) -> Self","parent":{"krate":0,"index":199},"children":[],"decl_id":null,"docs":" Raise a number to an integer power.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":66025,"byte_end":66034,"line_start":675,"line_end":675,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":226},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":66963,"byte_end":66973,"line_start":704,"line_end":704,"column_start":8,"column_end":18},"name":"to_degrees","qualname":"::float::FloatCore::to_degrees","value":"fn (self) -> Self","parent":{"krate":0,"index":199},"children":[],"decl_id":null,"docs":" Converts to degrees, assuming the number is in radians.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":227},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":67469,"byte_end":67479,"line_start":723,"line_end":723,"column_start":8,"column_end":18},"name":"to_radians","qualname":"::float::FloatCore::to_radians","value":"fn (self) -> Self","parent":{"krate":0,"index":199},"children":[],"decl_id":null,"docs":" Converts to radians, assuming the number is in degrees.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":228},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":68238,"byte_end":68252,"line_start":746,"line_end":746,"column_start":8,"column_end":22},"name":"integer_decode","qualname":"::float::FloatCore::integer_decode","value":"fn (self) -> (u64, i16, i8)","parent":{"krate":0,"index":199},"children":[],"decl_id":null,"docs":" Returns the mantissa, base 2 exponent, and sign as integers, respectively.\n The original number can be recovered by `sign * mantissa * 2 ^ exponent`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1857},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":108939,"byte_end":108940,"line_start":2283,"line_end":2283,"column_start":5,"column_end":6},"name":"E","qualname":"::float::FloatConst::E","value":"fn () -> Self","parent":{"krate":0,"index":1856},"children":[],"decl_id":null,"docs":"Return Euler’s number.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1858},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":108980,"byte_end":108989,"line_start":2285,"line_end":2285,"column_start":5,"column_end":14},"name":"FRAC_1_PI","qualname":"::float::FloatConst::FRAC_1_PI","value":"fn () -> Self","parent":{"krate":0,"index":1856},"children":[],"decl_id":null,"docs":"Return `1.0 / π`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1859},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":109036,"byte_end":109049,"line_start":2287,"line_end":2287,"column_start":5,"column_end":18},"name":"FRAC_1_SQRT_2","qualname":"::float::FloatConst::FRAC_1_SQRT_2","value":"fn () -> Self","parent":{"krate":0,"index":1856},"children":[],"decl_id":null,"docs":"Return `1.0 / sqrt(2.0)`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1860},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":109089,"byte_end":109098,"line_start":2289,"line_end":2289,"column_start":5,"column_end":14},"name":"FRAC_2_PI","qualname":"::float::FloatConst::FRAC_2_PI","value":"fn () -> Self","parent":{"krate":0,"index":1856},"children":[],"decl_id":null,"docs":"Return `2.0 / π`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1861},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":109144,"byte_end":109158,"line_start":2291,"line_end":2291,"column_start":5,"column_end":19},"name":"FRAC_2_SQRT_PI","qualname":"::float::FloatConst::FRAC_2_SQRT_PI","value":"fn () -> Self","parent":{"krate":0,"index":1856},"children":[],"decl_id":null,"docs":"Return `2.0 / sqrt(π)`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1862},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":109198,"byte_end":109207,"line_start":2293,"line_end":2293,"column_start":5,"column_end":14},"name":"FRAC_PI_2","qualname":"::float::FloatConst::FRAC_PI_2","value":"fn () -> Self","parent":{"krate":0,"index":1856},"children":[],"decl_id":null,"docs":"Return `π / 2.0`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1863},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":109247,"byte_end":109256,"line_start":2295,"line_end":2295,"column_start":5,"column_end":14},"name":"FRAC_PI_3","qualname":"::float::FloatConst::FRAC_PI_3","value":"fn () -> Self","parent":{"krate":0,"index":1856},"children":[],"decl_id":null,"docs":"Return `π / 3.0`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1864},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":109296,"byte_end":109305,"line_start":2297,"line_end":2297,"column_start":5,"column_end":14},"name":"FRAC_PI_4","qualname":"::float::FloatConst::FRAC_PI_4","value":"fn () -> Self","parent":{"krate":0,"index":1856},"children":[],"decl_id":null,"docs":"Return `π / 4.0`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1865},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":109345,"byte_end":109354,"line_start":2299,"line_end":2299,"column_start":5,"column_end":14},"name":"FRAC_PI_6","qualname":"::float::FloatConst::FRAC_PI_6","value":"fn () -> Self","parent":{"krate":0,"index":1856},"children":[],"decl_id":null,"docs":"Return `π / 6.0`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1866},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":109394,"byte_end":109403,"line_start":2301,"line_end":2301,"column_start":5,"column_end":14},"name":"FRAC_PI_8","qualname":"::float::FloatConst::FRAC_PI_8","value":"fn () -> Self","parent":{"krate":0,"index":1856},"children":[],"decl_id":null,"docs":"Return `π / 8.0`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1867},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":109443,"byte_end":109448,"line_start":2303,"line_end":2303,"column_start":5,"column_end":10},"name":"LN_10","qualname":"::float::FloatConst::LN_10","value":"fn () -> Self","parent":{"krate":0,"index":1856},"children":[],"decl_id":null,"docs":"Return `ln(10.0)`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1868},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":109487,"byte_end":109491,"line_start":2305,"line_end":2305,"column_start":5,"column_end":9},"name":"LN_2","qualname":"::float::FloatConst::LN_2","value":"fn () -> Self","parent":{"krate":0,"index":1856},"children":[],"decl_id":null,"docs":"Return `ln(2.0)`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1869},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":109531,"byte_end":109538,"line_start":2307,"line_end":2307,"column_start":5,"column_end":12},"name":"LOG10_E","qualname":"::float::FloatConst::LOG10_E","value":"fn () -> Self","parent":{"krate":0,"index":1856},"children":[],"decl_id":null,"docs":"Return `log10(e)`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1870},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":109577,"byte_end":109583,"line_start":2309,"line_end":2309,"column_start":5,"column_end":11},"name":"LOG2_E","qualname":"::float::FloatConst::LOG2_E","value":"fn () -> Self","parent":{"krate":0,"index":1856},"children":[],"decl_id":null,"docs":"Return `log2(e)`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1871},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":109640,"byte_end":109642,"line_start":2311,"line_end":2311,"column_start":5,"column_end":7},"name":"PI","qualname":"::float::FloatConst::PI","value":"fn () -> Self","parent":{"krate":0,"index":1856},"children":[],"decl_id":null,"docs":"Return Archimedes’ constant `π`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1872},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":109683,"byte_end":109689,"line_start":2313,"line_end":2313,"column_start":5,"column_end":11},"name":"SQRT_2","qualname":"::float::FloatConst::SQRT_2","value":"fn () -> Self","parent":{"krate":0,"index":1856},"children":[],"decl_id":null,"docs":"Return `sqrt(2.0)`.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":247},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"identities","qualname":"::identities","value":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","parent":null,"children":[{"krate":0,"index":248},{"krate":0,"index":249},{"krate":0,"index":252},{"krate":0,"index":256},{"krate":0,"index":1916},{"krate":0,"index":1919},{"krate":0,"index":1922},{"krate":0,"index":1925},{"krate":0,"index":1928},{"krate":0,"index":1931},{"krate":0,"index":1934},{"krate":0,"index":1937},{"krate":0,"index":1940},{"krate":0,"index":1943},{"krate":0,"index":1946},{"krate":0,"index":1949},{"krate":0,"index":1952},{"krate":0,"index":1955},{"krate":0,"index":257},{"krate":0,"index":262},{"krate":0,"index":266},{"krate":0,"index":1958},{"krate":0,"index":1961},{"krate":0,"index":1964},{"krate":0,"index":1967},{"krate":0,"index":1970},{"krate":0,"index":1973},{"krate":0,"index":1976},{"krate":0,"index":1979},{"krate":0,"index":1982},{"krate":0,"index":1985},{"krate":0,"index":1988},{"krate":0,"index":1991},{"krate":0,"index":1994},{"krate":0,"index":1997},{"krate":0,"index":267},{"krate":0,"index":271},{"krate":0,"index":273}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":252},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":112219,"byte_end":112223,"line_start":12,"line_end":12,"column_start":11,"column_end":15},"name":"Zero","qualname":"::identities::Zero","value":"Zero: Sized + Add<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":253},{"krate":0,"index":254},{"krate":0,"index":255}],"decl_id":null,"docs":" Defines an additive identity element for `Self`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":253},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":112593,"byte_end":112597,"line_start":20,"line_end":20,"column_start":8,"column_end":12},"name":"zero","qualname":"::identities::Zero::zero","value":"fn () -> Self","parent":{"krate":0,"index":252},"children":[],"decl_id":null,"docs":" Returns the additive identity element of `Self`, `0`.\n # Purity","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":254},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":112686,"byte_end":112694,"line_start":23,"line_end":23,"column_start":8,"column_end":16},"name":"set_zero","qualname":"::identities::Zero::set_zero","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":252},"children":[],"decl_id":null,"docs":" Sets `self` to the additive identity element of `Self`, `0`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":255},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":112820,"byte_end":112827,"line_start":28,"line_end":28,"column_start":8,"column_end":15},"name":"is_zero","qualname":"::identities::Zero::is_zero","value":"fn (&self) -> bool","parent":{"krate":0,"index":252},"children":[],"decl_id":null,"docs":" Returns `true` if `self` is equal to the additive identity.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":262},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":113914,"byte_end":113917,"line_start":90,"line_end":90,"column_start":11,"column_end":14},"name":"One","qualname":"::identities::One","value":"One: Sized + Mul<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":263},{"krate":0,"index":264},{"krate":0,"index":265}],"decl_id":null,"docs":" Defines a multiplicative identity element for `Self`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":263},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":114301,"byte_end":114304,"line_start":99,"line_end":99,"column_start":8,"column_end":11},"name":"one","qualname":"::identities::One::one","value":"fn () -> Self","parent":{"krate":0,"index":262},"children":[],"decl_id":null,"docs":" Returns the multiplicative identity element of `Self`, `1`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":264},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":114399,"byte_end":114406,"line_start":102,"line_end":102,"column_start":8,"column_end":15},"name":"set_one","qualname":"::identities::One::set_one","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":262},"children":[],"decl_id":null,"docs":" Sets `self` to the multiplicative identity element of `Self`, `1`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":265},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":114751,"byte_end":114757,"line_start":112,"line_end":112,"column_start":8,"column_end":14},"name":"is_one","qualname":"::identities::One::is_one","value":"fn (&self) -> bool","parent":{"krate":0,"index":262},"children":[],"decl_id":null,"docs":" Returns `true` if `self` is equal to the multiplicative identity.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":114734,"byte_end":114743,"line_start":111,"line_end":111,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":271},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":115780,"byte_end":115784,"line_start":171,"line_end":171,"column_start":8,"column_end":12},"name":"zero","qualname":"::identities::zero","value":"fn <T> () -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the additive identity, `0`.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":115755,"byte_end":115772,"line_start":170,"line_end":170,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":273},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":115894,"byte_end":115897,"line_start":177,"line_end":177,"column_start":8,"column_end":11},"name":"one","qualname":"::identities::one","value":"fn <T> () -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the multiplicative identity, `1`.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":115869,"byte_end":115886,"line_start":176,"line_end":176,"column_start":1,"column_end":18}}]},{"kind":"Mod","id":{"krate":0,"index":275},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"int","qualname":"::int","value":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","parent":null,"children":[{"krate":0,"index":276},{"krate":0,"index":283},{"krate":0,"index":284},{"krate":0,"index":285},{"krate":0,"index":286},{"krate":0,"index":289},{"krate":0,"index":306},{"krate":0,"index":2000},{"krate":0,"index":2017},{"krate":0,"index":2034},{"krate":0,"index":2051},{"krate":0,"index":2068},{"krate":0,"index":2085},{"krate":0,"index":2102},{"krate":0,"index":2119},{"krate":0,"index":2136},{"krate":0,"index":2153},{"krate":0,"index":2170},{"krate":0,"index":2187}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":289},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":118469,"byte_end":118476,"line_start":34,"line_end":34,"column_start":11,"column_end":18},"name":"PrimInt","qualname":"::int::PrimInt","value":"PrimInt: Sized + Copy + Num + NumCast + Bounded + PartialOrd + Ord + Eq + Not<Output =\nSelf> + BitAnd<Output = Self> + BitOr<Output = Self> + BitXor<Output = Self> +\nShl<usize, Output = Self> + Shr<usize, Output = Self> + CheckedAdd<Output =\nSelf> + CheckedSub<Output = Self> + CheckedMul<Output = Self> +\nCheckedDiv<Output = Self> + Saturating","parent":null,"children":[{"krate":0,"index":290},{"krate":0,"index":291},{"krate":0,"index":292},{"krate":0,"index":293},{"krate":0,"index":294},{"krate":0,"index":295},{"krate":0,"index":296},{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":300},{"krate":0,"index":301},{"krate":0,"index":302},{"krate":0,"index":303},{"krate":0,"index":304},{"krate":0,"index":305}],"decl_id":null,"docs":" Generic trait for primitive integers.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":290},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":119151,"byte_end":119161,"line_start":66,"line_end":66,"column_start":8,"column_end":18},"name":"count_ones","qualname":"::int::PrimInt::count_ones","value":"fn (self) -> u32","parent":{"krate":0,"index":289},"children":[],"decl_id":null,"docs":" Returns the number of ones in the binary representation of `self`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":291},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":119438,"byte_end":119449,"line_start":79,"line_end":79,"column_start":8,"column_end":19},"name":"count_zeros","qualname":"::int::PrimInt::count_zeros","value":"fn (self) -> u32","parent":{"krate":0,"index":289},"children":[],"decl_id":null,"docs":" Returns the number of zeros in the binary representation of `self`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":292},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":119745,"byte_end":119758,"line_start":93,"line_end":93,"column_start":8,"column_end":21},"name":"leading_zeros","qualname":"::int::PrimInt::leading_zeros","value":"fn (self) -> u32","parent":{"krate":0,"index":289},"children":[],"decl_id":null,"docs":" Returns the number of leading zeros in the binary representation\n of `self`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":293},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":120055,"byte_end":120069,"line_start":107,"line_end":107,"column_start":8,"column_end":22},"name":"trailing_zeros","qualname":"::int::PrimInt::trailing_zeros","value":"fn (self) -> u32","parent":{"krate":0,"index":289},"children":[],"decl_id":null,"docs":" Returns the number of trailing zeros in the binary representation\n of `self`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":294},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":120457,"byte_end":120468,"line_start":122,"line_end":122,"column_start":8,"column_end":19},"name":"rotate_left","qualname":"::int::PrimInt::rotate_left","value":"fn (self, n: u32) -> Self","parent":{"krate":0,"index":289},"children":[],"decl_id":null,"docs":" Shifts the bits to the left by a specified amount, `n`, wrapping\n the truncated bits to the end of the resulting integer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":295},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":120873,"byte_end":120885,"line_start":137,"line_end":137,"column_start":8,"column_end":20},"name":"rotate_right","qualname":"::int::PrimInt::rotate_right","value":"fn (self, n: u32) -> Self","parent":{"krate":0,"index":289},"children":[],"decl_id":null,"docs":" Shifts the bits to the right by a specified amount, `n`, wrapping\n the truncated bits to the beginning of the resulting integer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":296},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":121321,"byte_end":121331,"line_start":154,"line_end":154,"column_start":8,"column_end":18},"name":"signed_shl","qualname":"::int::PrimInt::signed_shl","value":"fn (self, n: u32) -> Self","parent":{"krate":0,"index":289},"children":[],"decl_id":null,"docs":" Shifts the bits to the left by a specified amount, `n`, filling\n zeros in the least significant bits.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":297},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":121800,"byte_end":121810,"line_start":171,"line_end":171,"column_start":8,"column_end":18},"name":"signed_shr","qualname":"::int::PrimInt::signed_shr","value":"fn (self, n: u32) -> Self","parent":{"krate":0,"index":289},"children":[],"decl_id":null,"docs":" Shifts the bits to the right by a specified amount, `n`, copying\n the \"sign bit\" in the most significant bits even for unsigned types.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":298},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":122250,"byte_end":122262,"line_start":188,"line_end":188,"column_start":8,"column_end":20},"name":"unsigned_shl","qualname":"::int::PrimInt::unsigned_shl","value":"fn (self, n: u32) -> Self","parent":{"krate":0,"index":289},"children":[],"decl_id":null,"docs":" Shifts the bits to the left by a specified amount, `n`, filling\n zeros in the least significant bits.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":299},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":122695,"byte_end":122707,"line_start":205,"line_end":205,"column_start":8,"column_end":20},"name":"unsigned_shr","qualname":"::int::PrimInt::unsigned_shr","value":"fn (self, n: u32) -> Self","parent":{"krate":0,"index":289},"children":[],"decl_id":null,"docs":" Shifts the bits to the right by a specified amount, `n`, filling\n zeros in the most significant bits.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":300},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":123012,"byte_end":123022,"line_start":219,"line_end":219,"column_start":8,"column_end":18},"name":"swap_bytes","qualname":"::int::PrimInt::swap_bytes","value":"fn (self) -> Self","parent":{"krate":0,"index":289},"children":[],"decl_id":null,"docs":" Reverses the byte order of the integer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":301},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":123518,"byte_end":123525,"line_start":238,"line_end":238,"column_start":8,"column_end":15},"name":"from_be","qualname":"::int::PrimInt::from_be","value":"fn (x: Self) -> Self","parent":{"krate":0,"index":289},"children":[],"decl_id":null,"docs":" Convert an integer from big endian to the target's endianness.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":302},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":124030,"byte_end":124037,"line_start":257,"line_end":257,"column_start":8,"column_end":15},"name":"from_le","qualname":"::int::PrimInt::from_le","value":"fn (x: Self) -> Self","parent":{"krate":0,"index":289},"children":[],"decl_id":null,"docs":" Convert an integer from little endian to the target's endianness.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":303},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":124520,"byte_end":124525,"line_start":276,"line_end":276,"column_start":8,"column_end":13},"name":"to_be","qualname":"::int::PrimInt::to_be","value":"fn (self) -> Self","parent":{"krate":0,"index":289},"children":[],"decl_id":null,"docs":" Convert `self` to big endian from the target's endianness.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":304},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":125011,"byte_end":125016,"line_start":295,"line_end":295,"column_start":8,"column_end":13},"name":"to_le","qualname":"::int::PrimInt::to_le","value":"fn (self) -> Self","parent":{"krate":0,"index":289},"children":[],"decl_id":null,"docs":" Convert `self` to little endian from the target's endianness.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":305},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":125254,"byte_end":125257,"line_start":306,"line_end":306,"column_start":8,"column_end":11},"name":"pow","qualname":"::int::PrimInt::pow","value":"fn (self, exp: u32) -> Self","parent":{"krate":0,"index":289},"children":[],"decl_id":null,"docs":" Raises self to the power of `exp`, using exponentiation by squaring.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":307},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"ops","qualname":"::ops","value":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\mod.rs","parent":null,"children":[{"krate":0,"index":308},{"krate":0,"index":336},{"krate":0,"index":354},{"krate":0,"index":366},{"krate":0,"index":382}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":308},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"checked","qualname":"::ops::checked","value":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","parent":null,"children":[{"krate":0,"index":309},{"krate":0,"index":317},{"krate":0,"index":319},{"krate":0,"index":2204},{"krate":0,"index":2206},{"krate":0,"index":2208},{"krate":0,"index":2210},{"krate":0,"index":2212},{"krate":0,"index":2214},{"krate":0,"index":2216},{"krate":0,"index":2218},{"krate":0,"index":2220},{"krate":0,"index":2222},{"krate":0,"index":2224},{"krate":0,"index":2226},{"krate":0,"index":320},{"krate":0,"index":2228},{"krate":0,"index":2230},{"krate":0,"index":2232},{"krate":0,"index":2234},{"krate":0,"index":2236},{"krate":0,"index":2238},{"krate":0,"index":2240},{"krate":0,"index":2242},{"krate":0,"index":2244},{"krate":0,"index":2246},{"krate":0,"index":2248},{"krate":0,"index":2250},{"krate":0,"index":322},{"krate":0,"index":2252},{"krate":0,"index":2254},{"krate":0,"index":2256},{"krate":0,"index":2258},{"krate":0,"index":2260},{"krate":0,"index":2262},{"krate":0,"index":2264},{"krate":0,"index":2266},{"krate":0,"index":2268},{"krate":0,"index":2270},{"krate":0,"index":2272},{"krate":0,"index":2274},{"krate":0,"index":324},{"krate":0,"index":2276},{"krate":0,"index":2278},{"krate":0,"index":2280},{"krate":0,"index":2282},{"krate":0,"index":2284},{"krate":0,"index":2286},{"krate":0,"index":2288},{"krate":0,"index":2290},{"krate":0,"index":2292},{"krate":0,"index":2294},{"krate":0,"index":2296},{"krate":0,"index":2298},{"krate":0,"index":326},{"krate":0,"index":2300},{"krate":0,"index":2302},{"krate":0,"index":2304},{"krate":0,"index":2306},{"krate":0,"index":2308},{"krate":0,"index":2310},{"krate":0,"index":2312},{"krate":0,"index":2314},{"krate":0,"index":2316},{"krate":0,"index":2318},{"krate":0,"index":2320},{"krate":0,"index":2322},{"krate":0,"index":328},{"krate":0,"index":329},{"krate":0,"index":2324},{"krate":0,"index":2326},{"krate":0,"index":2328},{"krate":0,"index":2330},{"krate":0,"index":2332},{"krate":0,"index":2334},{"krate":0,"index":2336},{"krate":0,"index":2338},{"krate":0,"index":2340},{"krate":0,"index":2342},{"krate":0,"index":2344},{"krate":0,"index":2346},{"krate":0,"index":331},{"krate":0,"index":333},{"krate":0,"index":2348},{"krate":0,"index":2350},{"krate":0,"index":2352},{"krate":0,"index":2354},{"krate":0,"index":2356},{"krate":0,"index":2358},{"krate":0,"index":2360},{"krate":0,"index":2362},{"krate":0,"index":2364},{"krate":0,"index":2366},{"krate":0,"index":2368},{"krate":0,"index":2370},{"krate":0,"index":334},{"krate":0,"index":2372},{"krate":0,"index":2374},{"krate":0,"index":2376},{"krate":0,"index":2378},{"krate":0,"index":2380},{"krate":0,"index":2382},{"krate":0,"index":2384},{"krate":0,"index":2386},{"krate":0,"index":2388},{"krate":0,"index":2390},{"krate":0,"index":2392},{"krate":0,"index":2394}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":317},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":128037,"byte_end":128047,"line_start":5,"line_end":5,"column_start":11,"column_end":21},"name":"CheckedAdd","qualname":"::ops::checked::CheckedAdd","value":"CheckedAdd: Sized + Add<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":318}],"decl_id":null,"docs":" Performs addition that returns `None` instead of wrapping around on\n overflow.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":318},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":128189,"byte_end":128200,"line_start":8,"line_end":8,"column_start":8,"column_end":19},"name":"checked_add","qualname":"::ops::checked::CheckedAdd::checked_add","value":"fn (&self, v: &Self) -> Option<Self>","parent":{"krate":0,"index":317},"children":[],"decl_id":null,"docs":" Adds two numbers, checking for overflow. If overflow happens, `None` is\n returned.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":320},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":129178,"byte_end":129188,"line_start":39,"line_end":39,"column_start":11,"column_end":21},"name":"CheckedSub","qualname":"::ops::checked::CheckedSub","value":"CheckedSub: Sized + Sub<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":321}],"decl_id":null,"docs":" Performs subtraction that returns `None` instead of wrapping around on underflow.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":321},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":129337,"byte_end":129348,"line_start":42,"line_end":42,"column_start":8,"column_end":19},"name":"checked_sub","qualname":"::ops::checked::CheckedSub::checked_sub","value":"fn (&self, v: &Self) -> Option<Self>","parent":{"krate":0,"index":320},"children":[],"decl_id":null,"docs":" Subtracts two numbers, checking for underflow. If underflow happens,\n `None` is returned.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":322},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":130081,"byte_end":130091,"line_start":63,"line_end":63,"column_start":11,"column_end":21},"name":"CheckedMul","qualname":"::ops::checked::CheckedMul","value":"CheckedMul: Sized + Mul<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":323}],"decl_id":null,"docs":" Performs multiplication that returns `None` instead of wrapping around on underflow or\n overflow.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":323},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":130265,"byte_end":130276,"line_start":66,"line_end":66,"column_start":8,"column_end":19},"name":"checked_mul","qualname":"::ops::checked::CheckedMul::checked_mul","value":"fn (&self, v: &Self) -> Option<Self>","parent":{"krate":0,"index":322},"children":[],"decl_id":null,"docs":" Multiplies two numbers, checking for underflow or overflow. If underflow\n or overflow happens, `None` is returned.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":324},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":131049,"byte_end":131059,"line_start":87,"line_end":87,"column_start":11,"column_end":21},"name":"CheckedDiv","qualname":"::ops::checked::CheckedDiv","value":"CheckedDiv: Sized + Div<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":325}],"decl_id":null,"docs":" Performs division that returns `None` instead of panicking on division by zero and instead of\n wrapping around on underflow and overflow.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":325},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":131239,"byte_end":131250,"line_start":90,"line_end":90,"column_start":8,"column_end":19},"name":"checked_div","qualname":"::ops::checked::CheckedDiv::checked_div","value":"fn (&self, v: &Self) -> Option<Self>","parent":{"krate":0,"index":324},"children":[],"decl_id":null,"docs":" Divides two numbers, checking for underflow, overflow and division by\n zero. If any of that happens, `None` is returned.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":326},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":132036,"byte_end":132046,"line_start":111,"line_end":111,"column_start":11,"column_end":21},"name":"CheckedRem","qualname":"::ops::checked::CheckedRem","value":"CheckedRem: Sized + Rem<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":327}],"decl_id":null,"docs":" Performs an integral remainder that returns `None` instead of panicking on division by zero and\n instead of wrapping around on underflow and overflow.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":327},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":132840,"byte_end":132851,"line_start":131,"line_end":131,"column_start":8,"column_end":19},"name":"checked_rem","qualname":"::ops::checked::CheckedRem::checked_rem","value":"fn (&self, v: &Self) -> Option<Self>","parent":{"krate":0,"index":326},"children":[],"decl_id":null,"docs":" Finds the remainder of dividing two numbers, checking for underflow, overflow and division\n by zero. If any of that happens, `None` is returned.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":329},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":133815,"byte_end":133825,"line_start":162,"line_end":162,"column_start":11,"column_end":21},"name":"CheckedNeg","qualname":"::ops::checked::CheckedNeg","value":"CheckedNeg: Sized","parent":null,"children":[{"krate":0,"index":330}],"decl_id":null,"docs":" Performs negation that returns `None` if the result can't be represented.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":330},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":134475,"byte_end":134486,"line_start":179,"line_end":179,"column_start":8,"column_end":19},"name":"checked_neg","qualname":"::ops::checked::CheckedNeg::checked_neg","value":"fn (&self) -> Option<Self>","parent":{"krate":0,"index":329},"children":[],"decl_id":null,"docs":" Negates a number, returning `None` for results that can't be represented, like signed `MIN`\n values that can't be positive, or non-zero unsigned values that can't be negative.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":331},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":135264,"byte_end":135274,"line_start":200,"line_end":200,"column_start":11,"column_end":21},"name":"CheckedShl","qualname":"::ops::checked::CheckedShl","value":"CheckedShl: Sized + Shl<u32, Output = Self>","parent":null,"children":[{"krate":0,"index":332}],"decl_id":null,"docs":" Performs a left shift that returns `None` on shifts larger than\n the type width.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":332},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":135833,"byte_end":135844,"line_start":214,"line_end":214,"column_start":8,"column_end":19},"name":"checked_shl","qualname":"::ops::checked::CheckedShl::checked_shl","value":"fn (&self, rhs: u32) -> Option<Self>","parent":{"krate":0,"index":331},"children":[],"decl_id":null,"docs":" Checked shift left. Computes `self << rhs`, returning `None`\n if `rhs` is larger than or equal to the number of bits in `self`.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":334},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":136906,"byte_end":136916,"line_start":246,"line_end":246,"column_start":11,"column_end":21},"name":"CheckedShr","qualname":"::ops::checked::CheckedShr","value":"CheckedShr: Sized + Shr<u32, Output = Self>","parent":null,"children":[{"krate":0,"index":335}],"decl_id":null,"docs":" Performs a right shift that returns `None` on shifts larger than\n the type width.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":335},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":137476,"byte_end":137487,"line_start":260,"line_end":260,"column_start":8,"column_end":19},"name":"checked_shr","qualname":"::ops::checked::CheckedShr::checked_shr","value":"fn (&self, rhs: u32) -> Option<Self>","parent":{"krate":0,"index":334},"children":[],"decl_id":null,"docs":" Checked shift right. Computes `self >> rhs`, returning `None`\n if `rhs` is larger than or equal to the number of bits in `self`.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":336},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\inv.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"inv","qualname":"::ops::inv","value":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\inv.rs","parent":null,"children":[{"krate":0,"index":337},{"krate":0,"index":340},{"krate":0,"index":343},{"krate":0,"index":346},{"krate":0,"index":350}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":337},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\inv.rs","byte_start":138276,"byte_end":138279,"line_start":2,"line_end":2,"column_start":11,"column_end":14},"name":"Inv","qualname":"::ops::inv::Inv","value":"Inv","parent":null,"children":[{"krate":0,"index":338},{"krate":0,"index":339}],"decl_id":null,"docs":" Unary operator for retrieving the multiplicative inverse, or reciprocal, of a value.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":338},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\inv.rs","byte_start":138339,"byte_end":138345,"line_start":4,"line_end":4,"column_start":10,"column_end":16},"name":"Output","qualname":"::ops::inv::Inv::Output","value":"type Output;","parent":{"krate":0,"index":337},"children":[],"decl_id":null,"docs":" The result after applying the operator.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":339},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\inv.rs","byte_start":138624,"byte_end":138627,"line_start":17,"line_end":17,"column_start":8,"column_end":11},"name":"inv","qualname":"::ops::inv::Inv::inv","value":"fn (self) -> Self::Output","parent":{"krate":0,"index":337},"children":[],"decl_id":null,"docs":" Returns the multiplicative inverse of `self`.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":354},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\mul_add.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"mul_add","qualname":"::ops::mul_add","value":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\mul_add.rs","parent":null,"children":[{"krate":0,"index":355},{"krate":0,"index":360},{"krate":0,"index":364},{"krate":0,"index":2396},{"krate":0,"index":2399},{"krate":0,"index":2402},{"krate":0,"index":2405},{"krate":0,"index":2408},{"krate":0,"index":2411},{"krate":0,"index":2414},{"krate":0,"index":2417},{"krate":0,"index":2420},{"krate":0,"index":2423},{"krate":0,"index":2426},{"krate":0,"index":2429},{"krate":0,"index":365},{"krate":0,"index":2432},{"krate":0,"index":2434},{"krate":0,"index":2436},{"krate":0,"index":2438},{"krate":0,"index":2440},{"krate":0,"index":2442},{"krate":0,"index":2444},{"krate":0,"index":2446},{"krate":0,"index":2448},{"krate":0,"index":2450},{"krate":0,"index":2452},{"krate":0,"index":2454}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":355},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\mul_add.rs","byte_start":139752,"byte_end":139758,"line_start":23,"line_end":23,"column_start":11,"column_end":17},"name":"MulAdd","qualname":"::ops::mul_add::MulAdd","value":"MulAdd<A = Self, B = Self>","parent":null,"children":[{"krate":0,"index":358},{"krate":0,"index":359}],"decl_id":null,"docs":" Fused multiply-add. Computes `(self * a) + b` with only one rounding\n error, yielding a more accurate result than an unfused multiply-add.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":358},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\mul_add.rs","byte_start":139856,"byte_end":139862,"line_start":25,"line_end":25,"column_start":10,"column_end":16},"name":"Output","qualname":"::ops::mul_add::MulAdd::Output","value":"type Output;","parent":{"krate":0,"index":355},"children":[],"decl_id":null,"docs":" The resulting type after applying the fused multiply-add.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":359},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\mul_add.rs","byte_start":139923,"byte_end":139930,"line_start":28,"line_end":28,"column_start":8,"column_end":15},"name":"mul_add","qualname":"::ops::mul_add::MulAdd::mul_add","value":"fn (self, a: A, b: B) -> Self::Output","parent":{"krate":0,"index":355},"children":[],"decl_id":null,"docs":" Performs the fused multiply-add operation.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":360},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\mul_add.rs","byte_start":140028,"byte_end":140040,"line_start":32,"line_end":32,"column_start":11,"column_end":23},"name":"MulAddAssign","qualname":"::ops::mul_add::MulAddAssign","value":"MulAddAssign<A = Self, B = Self>","parent":null,"children":[{"krate":0,"index":363}],"decl_id":null,"docs":" The fused multiply-add assignment operation.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":363},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\mul_add.rs","byte_start":140121,"byte_end":140135,"line_start":34,"line_end":34,"column_start":8,"column_end":22},"name":"mul_add_assign","qualname":"::ops::mul_add::MulAddAssign::mul_add_assign","value":"fn (&mut self, a: A, b: B) -> ()","parent":{"krate":0,"index":360},"children":[],"decl_id":null,"docs":" Performs the fused multiply-add operation.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":366},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\saturating.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"saturating","qualname":"::ops::saturating","value":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\saturating.rs","parent":null,"children":[{"krate":0,"index":367},{"krate":0,"index":371},{"krate":0,"index":374},{"krate":0,"index":2456},{"krate":0,"index":2459},{"krate":0,"index":2462},{"krate":0,"index":2465},{"krate":0,"index":2468},{"krate":0,"index":2471},{"krate":0,"index":2474},{"krate":0,"index":2477},{"krate":0,"index":2480},{"krate":0,"index":2483},{"krate":0,"index":2486},{"krate":0,"index":2489},{"krate":0,"index":375},{"krate":0,"index":376},{"krate":0,"index":2492},{"krate":0,"index":2494},{"krate":0,"index":2496},{"krate":0,"index":2498},{"krate":0,"index":2500},{"krate":0,"index":2502},{"krate":0,"index":2504},{"krate":0,"index":2506},{"krate":0,"index":2508},{"krate":0,"index":2510},{"krate":0,"index":2512},{"krate":0,"index":2514},{"krate":0,"index":378},{"krate":0,"index":2516},{"krate":0,"index":2518},{"krate":0,"index":2520},{"krate":0,"index":2522},{"krate":0,"index":2524},{"krate":0,"index":2526},{"krate":0,"index":2528},{"krate":0,"index":2530},{"krate":0,"index":2532},{"krate":0,"index":2534},{"krate":0,"index":2536},{"krate":0,"index":2538},{"krate":0,"index":380},{"krate":0,"index":2540},{"krate":0,"index":2542},{"krate":0,"index":2544},{"krate":0,"index":2546},{"krate":0,"index":2548},{"krate":0,"index":2550},{"krate":0,"index":2552},{"krate":0,"index":2554},{"krate":0,"index":2556},{"krate":0,"index":2558},{"krate":0,"index":2560},{"krate":0,"index":2562}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":371},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\saturating.rs","byte_start":143187,"byte_end":143197,"line_start":5,"line_end":5,"column_start":11,"column_end":21},"name":"Saturating","qualname":"::ops::saturating::Saturating","value":"Saturating","parent":null,"children":[{"krate":0,"index":372},{"krate":0,"index":373}],"decl_id":null,"docs":" Saturating math operations. Deprecated, use `SaturatingAdd`, `SaturatingSub` and\n `SaturatingMul` instead.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":372},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\saturating.rs","byte_start":143323,"byte_end":143337,"line_start":8,"line_end":8,"column_start":8,"column_end":22},"name":"saturating_add","qualname":"::ops::saturating::Saturating::saturating_add","value":"fn (self, v: Self) -> Self","parent":{"krate":0,"index":371},"children":[],"decl_id":null,"docs":" Saturating addition operator.\n Returns a+b, saturating at the numeric bounds instead of overflowing.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":373},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\saturating.rs","byte_start":143489,"byte_end":143503,"line_start":12,"line_end":12,"column_start":8,"column_end":22},"name":"saturating_sub","qualname":"::ops::saturating::Saturating::saturating_sub","value":"fn (self, v: Self) -> Self","parent":{"krate":0,"index":371},"children":[],"decl_id":null,"docs":" Saturating subtraction operator.\n Returns a-b, saturating at the numeric bounds instead of overflowing.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":376},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\saturating.rs","byte_start":144464,"byte_end":144477,"line_start":47,"line_end":47,"column_start":11,"column_end":24},"name":"SaturatingAdd","qualname":"::ops::saturating::SaturatingAdd","value":"SaturatingAdd: Sized + Add<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":377}],"decl_id":null,"docs":" Performs addition that saturates at the numeric bounds instead of overflowing.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":377},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\saturating.rs","byte_start":144644,"byte_end":144658,"line_start":50,"line_end":50,"column_start":8,"column_end":22},"name":"saturating_add","qualname":"::ops::saturating::SaturatingAdd::saturating_add","value":"fn (&self, v: &Self) -> Self","parent":{"krate":0,"index":376},"children":[],"decl_id":null,"docs":" Saturating addition. Computes `self + other`, saturating at the relevant high or low boundary of\n the type.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":378},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\saturating.rs","byte_start":145472,"byte_end":145485,"line_start":70,"line_end":70,"column_start":11,"column_end":24},"name":"SaturatingSub","qualname":"::ops::saturating::SaturatingSub","value":"SaturatingSub: Sized + Sub<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":379}],"decl_id":null,"docs":" Performs subtraction that saturates at the numeric bounds instead of overflowing.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":379},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\saturating.rs","byte_start":145655,"byte_end":145669,"line_start":73,"line_end":73,"column_start":8,"column_end":22},"name":"saturating_sub","qualname":"::ops::saturating::SaturatingSub::saturating_sub","value":"fn (&self, v: &Self) -> Self","parent":{"krate":0,"index":378},"children":[],"decl_id":null,"docs":" Saturating subtraction. Computes `self - other`, saturating at the relevant high or low boundary of\n the type.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":380},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\saturating.rs","byte_start":146486,"byte_end":146499,"line_start":93,"line_end":93,"column_start":11,"column_end":24},"name":"SaturatingMul","qualname":"::ops::saturating::SaturatingMul","value":"SaturatingMul: Sized + Mul<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":381}],"decl_id":null,"docs":" Performs multiplication that saturates at the numeric bounds instead of overflowing.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":381},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\saturating.rs","byte_start":146672,"byte_end":146686,"line_start":96,"line_end":96,"column_start":8,"column_end":22},"name":"saturating_mul","qualname":"::ops::saturating::SaturatingMul::saturating_mul","value":"fn (&self, v: &Self) -> Self","parent":{"krate":0,"index":380},"children":[],"decl_id":null,"docs":" Saturating multiplication. Computes `self * other`, saturating at the relevant high or low boundary of\n the type.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":382},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"wrapping","qualname":"::ops::wrapping","value":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","parent":null,"children":[{"krate":0,"index":383},{"krate":0,"index":384},{"krate":0,"index":391},{"krate":0,"index":392},{"krate":0,"index":2564},{"krate":0,"index":2566},{"krate":0,"index":2568},{"krate":0,"index":2570},{"krate":0,"index":2572},{"krate":0,"index":2574},{"krate":0,"index":2576},{"krate":0,"index":2578},{"krate":0,"index":2580},{"krate":0,"index":2582},{"krate":0,"index":2584},{"krate":0,"index":2586},{"krate":0,"index":394},{"krate":0,"index":2588},{"krate":0,"index":2590},{"krate":0,"index":2592},{"krate":0,"index":2594},{"krate":0,"index":2596},{"krate":0,"index":2598},{"krate":0,"index":2600},{"krate":0,"index":2602},{"krate":0,"index":2604},{"krate":0,"index":2606},{"krate":0,"index":2608},{"krate":0,"index":2610},{"krate":0,"index":396},{"krate":0,"index":2612},{"krate":0,"index":2614},{"krate":0,"index":2616},{"krate":0,"index":2618},{"krate":0,"index":2620},{"krate":0,"index":2622},{"krate":0,"index":2624},{"krate":0,"index":2626},{"krate":0,"index":2628},{"krate":0,"index":2630},{"krate":0,"index":2632},{"krate":0,"index":2634},{"krate":0,"index":398},{"krate":0,"index":399},{"krate":0,"index":2636},{"krate":0,"index":2638},{"krate":0,"index":2640},{"krate":0,"index":2642},{"krate":0,"index":2644},{"krate":0,"index":2646},{"krate":0,"index":2648},{"krate":0,"index":2650},{"krate":0,"index":2652},{"krate":0,"index":2654},{"krate":0,"index":2656},{"krate":0,"index":2658},{"krate":0,"index":401},{"krate":0,"index":402},{"krate":0,"index":2660},{"krate":0,"index":2662},{"krate":0,"index":2664},{"krate":0,"index":2666},{"krate":0,"index":2668},{"krate":0,"index":2670},{"krate":0,"index":2672},{"krate":0,"index":2674},{"krate":0,"index":2676},{"krate":0,"index":2678},{"krate":0,"index":2680},{"krate":0,"index":2682},{"krate":0,"index":404},{"krate":0,"index":2684},{"krate":0,"index":2686},{"krate":0,"index":2688},{"krate":0,"index":2690},{"krate":0,"index":2692},{"krate":0,"index":2694},{"krate":0,"index":2696},{"krate":0,"index":2698},{"krate":0,"index":2700},{"krate":0,"index":2702},{"krate":0,"index":2704},{"krate":0,"index":2706},{"krate":0,"index":406},{"krate":0,"index":409},{"krate":0,"index":412},{"krate":0,"index":415},{"krate":0,"index":418},{"krate":0,"index":421}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":392},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":148894,"byte_end":148905,"line_start":24,"line_end":24,"column_start":11,"column_end":22},"name":"WrappingAdd","qualname":"::ops::wrapping::WrappingAdd","value":"WrappingAdd: Sized + Add<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":393}],"decl_id":null,"docs":" Performs addition that wraps around on overflow.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":393},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":149064,"byte_end":149076,"line_start":27,"line_end":27,"column_start":8,"column_end":20},"name":"wrapping_add","qualname":"::ops::wrapping::WrappingAdd::wrapping_add","value":"fn (&self, v: &Self) -> Self","parent":{"krate":0,"index":392},"children":[],"decl_id":null,"docs":" Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of\n the type.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":394},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":149788,"byte_end":149799,"line_start":47,"line_end":47,"column_start":11,"column_end":22},"name":"WrappingSub","qualname":"::ops::wrapping::WrappingSub","value":"WrappingSub: Sized + Sub<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":395}],"decl_id":null,"docs":" Performs subtraction that wraps around on overflow.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":395},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":149961,"byte_end":149973,"line_start":50,"line_end":50,"column_start":8,"column_end":20},"name":"wrapping_sub","qualname":"::ops::wrapping::WrappingSub::wrapping_sub","value":"fn (&self, v: &Self) -> Self","parent":{"krate":0,"index":394},"children":[],"decl_id":null,"docs":" Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary\n of the type.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":396},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":150688,"byte_end":150699,"line_start":70,"line_end":70,"column_start":11,"column_end":22},"name":"WrappingMul","qualname":"::ops::wrapping::WrappingMul","value":"WrappingMul: Sized + Mul<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":397}],"decl_id":null,"docs":" Performs multiplication that wraps around on overflow.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":397},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":150864,"byte_end":150876,"line_start":73,"line_end":73,"column_start":8,"column_end":20},"name":"wrapping_mul","qualname":"::ops::wrapping::WrappingMul::wrapping_mul","value":"fn (&self, v: &Self) -> Self","parent":{"krate":0,"index":396},"children":[],"decl_id":null,"docs":" Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary\n of the type.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":399},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":151828,"byte_end":151839,"line_start":104,"line_end":104,"column_start":11,"column_end":22},"name":"WrappingNeg","qualname":"::ops::wrapping::WrappingNeg","value":"WrappingNeg: Sized","parent":null,"children":[{"krate":0,"index":400}],"decl_id":null,"docs":" Performs a negation that does not panic.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":400},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":152625,"byte_end":152637,"line_start":122,"line_end":122,"column_start":8,"column_end":20},"name":"wrapping_neg","qualname":"::ops::wrapping::WrappingNeg::wrapping_neg","value":"fn (&self) -> Self","parent":{"krate":0,"index":399},"children":[],"decl_id":null,"docs":" Wrapping (modular) negation. Computes `-self`,\n wrapping around at the boundary of the type.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":402},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":153667,"byte_end":153678,"line_start":152,"line_end":152,"column_start":11,"column_end":22},"name":"WrappingShl","qualname":"::ops::wrapping::WrappingShl","value":"WrappingShl: Sized + Shl<usize, Output = Self>","parent":null,"children":[{"krate":0,"index":403}],"decl_id":null,"docs":" Performs a left shift that does not panic.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":403},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":154285,"byte_end":154297,"line_start":167,"line_end":167,"column_start":8,"column_end":20},"name":"wrapping_shl","qualname":"::ops::wrapping::WrappingShl::wrapping_shl","value":"fn (&self, rhs: u32) -> Self","parent":{"krate":0,"index":402},"children":[],"decl_id":null,"docs":" Panic-free bitwise shift-left; yields `self << mask(rhs)`,\n where `mask` removes any high order bits of `rhs` that would\n cause the shift to exceed the bitwidth of the type.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":404},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":155073,"byte_end":155084,"line_start":187,"line_end":187,"column_start":11,"column_end":22},"name":"WrappingShr","qualname":"::ops::wrapping::WrappingShr","value":"WrappingShr: Sized + Shr<usize, Output = Self>","parent":null,"children":[{"krate":0,"index":405}],"decl_id":null,"docs":" Performs a right shift that does not panic.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":405},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":155692,"byte_end":155704,"line_start":202,"line_end":202,"column_start":8,"column_end":20},"name":"wrapping_shr","qualname":"::ops::wrapping::WrappingShr::wrapping_shr","value":"fn (&self, rhs: u32) -> Self","parent":{"krate":0,"index":404},"children":[],"decl_id":null,"docs":" Panic-free bitwise shift-right; yields `self >> mask(rhs)`,\n where `mask` removes any high order bits of `rhs` that would\n cause the shift to exceed the bitwidth of the type.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":424},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\pow.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"pow","qualname":"::pow","value":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\pow.rs","parent":null,"children":[{"krate":0,"index":425},{"krate":0,"index":426},{"krate":0,"index":427},{"krate":0,"index":430},{"krate":0,"index":434},{"krate":0,"index":2708},{"krate":0,"index":2711},{"krate":0,"index":2715},{"krate":0,"index":2719},{"krate":0,"index":2724},{"krate":0,"index":2727},{"krate":0,"index":2731},{"krate":0,"index":2735},{"krate":0,"index":2740},{"krate":0,"index":2743},{"krate":0,"index":2747},{"krate":0,"index":2751},{"krate":0,"index":2756},{"krate":0,"index":2759},{"krate":0,"index":2763},{"krate":0,"index":2767},{"krate":0,"index":2772},{"krate":0,"index":2775},{"krate":0,"index":2779},{"krate":0,"index":2783},{"krate":0,"index":2788},{"krate":0,"index":2791},{"krate":0,"index":2795},{"krate":0,"index":2799},{"krate":0,"index":2804},{"krate":0,"index":2807},{"krate":0,"index":2811},{"krate":0,"index":2815},{"krate":0,"index":2820},{"krate":0,"index":2823},{"krate":0,"index":2827},{"krate":0,"index":2831},{"krate":0,"index":2836},{"krate":0,"index":2839},{"krate":0,"index":2843},{"krate":0,"index":2847},{"krate":0,"index":2852},{"krate":0,"index":2855},{"krate":0,"index":2859},{"krate":0,"index":2863},{"krate":0,"index":2868},{"krate":0,"index":2871},{"krate":0,"index":2875},{"krate":0,"index":2879},{"krate":0,"index":2884},{"krate":0,"index":2887},{"krate":0,"index":2891},{"krate":0,"index":2895},{"krate":0,"index":2900},{"krate":0,"index":2903},{"krate":0,"index":2907},{"krate":0,"index":2911},{"krate":0,"index":2916},{"krate":0,"index":2919},{"krate":0,"index":2923},{"krate":0,"index":2927},{"krate":0,"index":2932},{"krate":0,"index":2935},{"krate":0,"index":2939},{"krate":0,"index":2943},{"krate":0,"index":2948},{"krate":0,"index":2951},{"krate":0,"index":2955},{"krate":0,"index":2959},{"krate":0,"index":2964},{"krate":0,"index":2967},{"krate":0,"index":2971},{"krate":0,"index":2975},{"krate":0,"index":2980},{"krate":0,"index":2983},{"krate":0,"index":2987},{"krate":0,"index":2991},{"krate":0,"index":2996},{"krate":0,"index":2999},{"krate":0,"index":3003},{"krate":0,"index":3007},{"krate":0,"index":3012},{"krate":0,"index":3015},{"krate":0,"index":3019},{"krate":0,"index":3023},{"krate":0,"index":3028},{"krate":0,"index":3031},{"krate":0,"index":3035},{"krate":0,"index":3039},{"krate":0,"index":3044},{"krate":0,"index":3047},{"krate":0,"index":3051},{"krate":0,"index":3055},{"krate":0,"index":3060},{"krate":0,"index":3063},{"krate":0,"index":3067},{"krate":0,"index":3071},{"krate":0,"index":3076},{"krate":0,"index":3079},{"krate":0,"index":3083},{"krate":0,"index":3087},{"krate":0,"index":3092},{"krate":0,"index":3095},{"krate":0,"index":3099},{"krate":0,"index":3103},{"krate":0,"index":3108},{"krate":0,"index":3111},{"krate":0,"index":3115},{"krate":0,"index":3119},{"krate":0,"index":3124},{"krate":0,"index":3127},{"krate":0,"index":3131},{"krate":0,"index":3135},{"krate":0,"index":3140},{"krate":0,"index":3143},{"krate":0,"index":3147},{"krate":0,"index":3151},{"krate":0,"index":3156},{"krate":0,"index":3159},{"krate":0,"index":3163},{"krate":0,"index":3167},{"krate":0,"index":3172},{"krate":0,"index":3175},{"krate":0,"index":3179},{"krate":0,"index":3183},{"krate":0,"index":3188},{"krate":0,"index":3191},{"krate":0,"index":3195},{"krate":0,"index":3199},{"krate":0,"index":3204},{"krate":0,"index":3207},{"krate":0,"index":3211},{"krate":0,"index":3215},{"krate":0,"index":3220},{"krate":0,"index":3223},{"krate":0,"index":3227},{"krate":0,"index":3231},{"krate":0,"index":3236},{"krate":0,"index":3239},{"krate":0,"index":3243},{"krate":0,"index":3247},{"krate":0,"index":3252},{"krate":0,"index":3255},{"krate":0,"index":3259},{"krate":0,"index":3263},{"krate":0,"index":3268},{"krate":0,"index":3271},{"krate":0,"index":3275},{"krate":0,"index":3279},{"krate":0,"index":3284},{"krate":0,"index":3287},{"krate":0,"index":3291},{"krate":0,"index":3295},{"krate":0,"index":3300},{"krate":0,"index":3303},{"krate":0,"index":3307},{"krate":0,"index":3311},{"krate":0,"index":3316},{"krate":0,"index":3319},{"krate":0,"index":3323},{"krate":0,"index":3327},{"krate":0,"index":3332},{"krate":0,"index":3335},{"krate":0,"index":3339},{"krate":0,"index":3343},{"krate":0,"index":3348},{"krate":0,"index":3351},{"krate":0,"index":3355},{"krate":0,"index":3359},{"krate":0,"index":3364},{"krate":0,"index":3367},{"krate":0,"index":3371},{"krate":0,"index":3375},{"krate":0,"index":3380},{"krate":0,"index":3383},{"krate":0,"index":3387},{"krate":0,"index":3391},{"krate":0,"index":3396},{"krate":0,"index":3399},{"krate":0,"index":3403},{"krate":0,"index":3407},{"krate":0,"index":3412},{"krate":0,"index":3415},{"krate":0,"index":3419},{"krate":0,"index":3423},{"krate":0,"index":3428},{"krate":0,"index":3431},{"krate":0,"index":3435},{"krate":0,"index":3439},{"krate":0,"index":3444},{"krate":0,"index":3447},{"krate":0,"index":3451},{"krate":0,"index":3455},{"krate":0,"index":3460},{"krate":0,"index":3463},{"krate":0,"index":3467},{"krate":0,"index":3471},{"krate":0,"index":3476},{"krate":0,"index":3479},{"krate":0,"index":3483},{"krate":0,"index":3487},{"krate":0,"index":3492},{"krate":0,"index":3495},{"krate":0,"index":3499},{"krate":0,"index":3503},{"krate":0,"index":3508},{"krate":0,"index":3511},{"krate":0,"index":3515},{"krate":0,"index":3519},{"krate":0,"index":3524},{"krate":0,"index":3527},{"krate":0,"index":3531},{"krate":0,"index":3535},{"krate":0,"index":3540},{"krate":0,"index":3543},{"krate":0,"index":3547},{"krate":0,"index":3551},{"krate":0,"index":3556},{"krate":0,"index":3559},{"krate":0,"index":3563},{"krate":0,"index":3567},{"krate":0,"index":3572},{"krate":0,"index":3575},{"krate":0,"index":3579},{"krate":0,"index":3583},{"krate":0,"index":3588},{"krate":0,"index":3591},{"krate":0,"index":3595},{"krate":0,"index":3599},{"krate":0,"index":3604},{"krate":0,"index":3607},{"krate":0,"index":3611},{"krate":0,"index":3615},{"krate":0,"index":3620},{"krate":0,"index":3623},{"krate":0,"index":3627},{"krate":0,"index":3631},{"krate":0,"index":3636},{"krate":0,"index":3639},{"krate":0,"index":3643},{"krate":0,"index":3647},{"krate":0,"index":3652},{"krate":0,"index":3655},{"krate":0,"index":3659},{"krate":0,"index":3663},{"krate":0,"index":3668},{"krate":0,"index":3671},{"krate":0,"index":3675},{"krate":0,"index":3679},{"krate":0,"index":3684},{"krate":0,"index":3687},{"krate":0,"index":3691},{"krate":0,"index":3695},{"krate":0,"index":3700},{"krate":0,"index":3703},{"krate":0,"index":3707},{"krate":0,"index":3711},{"krate":0,"index":3716},{"krate":0,"index":3719},{"krate":0,"index":3723},{"krate":0,"index":3727},{"krate":0,"index":3732},{"krate":0,"index":3735},{"krate":0,"index":3739},{"krate":0,"index":3743},{"krate":0,"index":3748},{"krate":0,"index":3751},{"krate":0,"index":3755},{"krate":0,"index":3759},{"krate":0,"index":3764},{"krate":0,"index":3767},{"krate":0,"index":3771},{"krate":0,"index":3775},{"krate":0,"index":3780},{"krate":0,"index":3783},{"krate":0,"index":3787},{"krate":0,"index":3791},{"krate":0,"index":3796},{"krate":0,"index":3799},{"krate":0,"index":3803},{"krate":0,"index":3807},{"krate":0,"index":3812},{"krate":0,"index":3815},{"krate":0,"index":3819},{"krate":0,"index":3823},{"krate":0,"index":3828},{"krate":0,"index":3831},{"krate":0,"index":3835},{"krate":0,"index":3839},{"krate":0,"index":3844},{"krate":0,"index":3847},{"krate":0,"index":3851},{"krate":0,"index":3855},{"krate":0,"index":435},{"krate":0,"index":437}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":430},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\pow.rs","byte_start":159924,"byte_end":159927,"line_start":6,"line_end":6,"column_start":11,"column_end":14},"name":"Pow","qualname":"::pow::Pow","value":"Pow<RHS>","parent":null,"children":[{"krate":0,"index":432},{"krate":0,"index":433}],"decl_id":null,"docs":" Binary operator for raising a value to a power.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":432},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\pow.rs","byte_start":159992,"byte_end":159998,"line_start":8,"line_end":8,"column_start":10,"column_end":16},"name":"Output","qualname":"::pow::Pow::Output","value":"type Output;","parent":{"krate":0,"index":430},"children":[],"decl_id":null,"docs":" The result after applying the operator.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":433},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\pow.rs","byte_start":160187,"byte_end":160190,"line_start":18,"line_end":18,"column_start":8,"column_end":11},"name":"pow","qualname":"::pow::Pow::pow","value":"fn (self, rhs: RHS) -> Self::Output","parent":{"krate":0,"index":430},"children":[],"decl_id":null,"docs":" Returns `self` to the power `rhs`.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":435},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\pow.rs","byte_start":165017,"byte_end":165020,"line_start":189,"line_end":189,"column_start":8,"column_end":11},"name":"pow","qualname":"::pow::pow","value":"fn <T> (mut base: T, mut exp: usize) -> T","parent":null,"children":[],"decl_id":null,"docs":" Raises a value to the power of exp, using exponentiation by squaring.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\pow.rs","byte_start":165000,"byte_end":165009,"line_start":188,"line_end":188,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":437},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\pow.rs","byte_start":166026,"byte_end":166037,"line_start":230,"line_end":230,"column_start":8,"column_end":19},"name":"checked_pow","qualname":"::pow::checked_pow","value":"fn <T> (mut base: T, mut exp: usize) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Raises a value to the power of exp, returning `None` if an overflow occurred.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\pow.rs","byte_start":166009,"byte_end":166018,"line_start":229,"line_end":229,"column_start":1,"column_end":10}}]},{"kind":"Mod","id":{"krate":0,"index":440},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"sign","qualname":"::sign","value":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","parent":null,"children":[{"krate":0,"index":441},{"krate":0,"index":442},{"krate":0,"index":443},{"krate":0,"index":444},{"krate":0,"index":445},{"krate":0,"index":451},{"krate":0,"index":3860},{"krate":0,"index":3866},{"krate":0,"index":3872},{"krate":0,"index":3878},{"krate":0,"index":3884},{"krate":0,"index":3890},{"krate":0,"index":452},{"krate":0,"index":459},{"krate":0,"index":3896},{"krate":0,"index":3902},{"krate":0,"index":460},{"krate":0,"index":462},{"krate":0,"index":464},{"krate":0,"index":466},{"krate":0,"index":467},{"krate":0,"index":3908},{"krate":0,"index":3909},{"krate":0,"index":3910},{"krate":0,"index":3911},{"krate":0,"index":3912},{"krate":0,"index":3913},{"krate":0,"index":468}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":445},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":189054,"byte_end":189060,"line_start":8,"line_end":8,"column_start":11,"column_end":17},"name":"Signed","qualname":"::sign::Signed","value":"Signed: Sized + Num + Neg<Output = Self>","parent":null,"children":[{"krate":0,"index":446},{"krate":0,"index":447},{"krate":0,"index":448},{"krate":0,"index":449},{"krate":0,"index":450}],"decl_id":null,"docs":" Useful functions for signed numbers (i.e. numbers that can be negative).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":446},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":189313,"byte_end":189316,"line_start":14,"line_end":14,"column_start":8,"column_end":11},"name":"abs","qualname":"::sign::Signed::abs","value":"fn (&self) -> Self","parent":{"krate":0,"index":445},"children":[],"decl_id":null,"docs":" Computes the absolute value.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":447},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":189541,"byte_end":189548,"line_start":20,"line_end":20,"column_start":8,"column_end":15},"name":"abs_sub","qualname":"::sign::Signed::abs_sub","value":"fn (&self, other: &Self) -> Self","parent":{"krate":0,"index":445},"children":[],"decl_id":null,"docs":" The positive difference of two numbers.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":448},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":190006,"byte_end":190012,"line_start":35,"line_end":35,"column_start":8,"column_end":14},"name":"signum","qualname":"::sign::Signed::signum","value":"fn (&self) -> Self","parent":{"krate":0,"index":445},"children":[],"decl_id":null,"docs":" Returns the sign of the number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":449},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":190129,"byte_end":190140,"line_start":38,"line_end":38,"column_start":8,"column_end":19},"name":"is_positive","qualname":"::sign::Signed::is_positive","value":"fn (&self) -> bool","parent":{"krate":0,"index":445},"children":[],"decl_id":null,"docs":" Returns true if the number is positive and false if the number is zero or negative.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":450},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":190257,"byte_end":190268,"line_start":41,"line_end":41,"column_start":8,"column_end":19},"name":"is_negative","qualname":"::sign::Signed::is_negative","value":"fn (&self) -> bool","parent":{"krate":0,"index":445},"children":[],"decl_id":null,"docs":" Returns true if the number is negative and false if the number is zero or positive.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":460},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":193462,"byte_end":193465,"line_start":165,"line_end":165,"column_start":8,"column_end":11},"name":"abs","qualname":"::sign::abs","value":"fn <T> (value: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Computes the absolute value.","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":193437,"byte_end":193454,"line_start":164,"line_end":164,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":462},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":193702,"byte_end":193709,"line_start":174,"line_end":174,"column_start":8,"column_end":15},"name":"abs_sub","qualname":"::sign::abs_sub","value":"fn <T> (x: T, y: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" The positive difference of two numbers.","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":193677,"byte_end":193694,"line_start":173,"line_end":173,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":464},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":194153,"byte_end":194159,"line_start":192,"line_end":192,"column_start":8,"column_end":14},"name":"signum","qualname":"::sign::signum","value":"fn <T> (value: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the sign of the number.","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":194128,"byte_end":194145,"line_start":191,"line_end":191,"column_start":1,"column_end":18}}]},{"kind":"Trait","id":{"krate":0,"index":466},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":194268,"byte_end":194276,"line_start":197,"line_end":197,"column_start":11,"column_end":19},"name":"Unsigned","qualname":"::sign::Unsigned","value":"Unsigned: Num","parent":null,"children":[],"decl_id":null,"docs":" A trait for values which cannot be negative\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":470},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":2165,"byte_end":2168,"line_start":67,"line_end":67,"column_start":11,"column_end":14},"name":"Num","qualname":"::Num","value":"Num: PartialEq + Zero + One + NumOps","parent":null,"children":[{"krate":0,"index":471},{"krate":0,"index":472}],"decl_id":null,"docs":" The base trait for numeric types, covering `0` and `1` values,\n comparisons, basic numeric operations, and string conversion.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":471},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":2213,"byte_end":2228,"line_start":68,"line_end":68,"column_start":10,"column_end":25},"name":"FromStrRadixErr","qualname":"::Num::FromStrRadixErr","value":"type FromStrRadixErr;","parent":{"krate":0,"index":470},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":472},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":2586,"byte_end":2600,"line_start":83,"line_end":83,"column_start":8,"column_end":22},"name":"from_str_radix","qualname":"::Num::from_str_radix","value":"fn (str: &str, radix: u32) -> Result<Self, Self::FromStrRadixErr>","parent":{"krate":0,"index":470},"children":[],"decl_id":null,"docs":" Convert from a string and radix <= 36.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":473},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":2822,"byte_end":2828,"line_start":89,"line_end":89,"column_start":11,"column_end":17},"name":"NumOps","qualname":"::NumOps","value":"NumOps<Rhs = Self, Output = Self>: Add<Rhs, Output = Output> + Sub<Rhs, Output = Output> + Mul<Rhs, Output =\nOutput> + Div<Rhs, Output = Output> + Rem<Rhs, Output = Output>","parent":null,"children":[],"decl_id":null,"docs":" The trait for types implementing basic numeric operations","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":480},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":3462,"byte_end":3468,"line_start":111,"line_end":111,"column_start":11,"column_end":17},"name":"NumRef","qualname":"::NumRef","value":"NumRef: Num + for<'r> NumOps<&'r Self>","parent":null,"children":[],"decl_id":null,"docs":" The trait for `Num` types which also implement numeric operations taking\n the second operand by reference.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":485},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":3787,"byte_end":3793,"line_start":118,"line_end":118,"column_start":11,"column_end":17},"name":"RefNum","qualname":"::RefNum","value":"RefNum<Base>: NumOps<Base, Base> + for<'r> NumOps<&'r Base, Base>","parent":null,"children":[],"decl_id":null,"docs":" The trait for references which implement numeric operations, taking the\n second operand either by value or by reference.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":492},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":4126,"byte_end":4138,"line_start":124,"line_end":124,"column_start":11,"column_end":23},"name":"NumAssignOps","qualname":"::NumAssignOps","value":"NumAssignOps<Rhs = Self>: AddAssign<Rhs> + SubAssign<Rhs> + MulAssign<Rhs> + DivAssign<Rhs> +\nRemAssign<Rhs>","parent":null,"children":[],"decl_id":null,"docs":" The trait for types implementing numeric assignment operators (like `+=`).","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":497},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":4548,"byte_end":4557,"line_start":137,"line_end":137,"column_start":11,"column_end":20},"name":"NumAssign","qualname":"::NumAssign","value":"NumAssign: Num + NumAssignOps","parent":null,"children":[],"decl_id":null,"docs":" The trait for `Num` types which also implement assignment operators.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":500},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":4853,"byte_end":4865,"line_start":144,"line_end":144,"column_start":11,"column_end":23},"name":"NumAssignRef","qualname":"::NumAssignRef","value":"NumAssignRef: NumAssign + for<'r> NumAssignOps<&'r Self>","parent":null,"children":[],"decl_id":null,"docs":" The trait for `NumAssign` types which also implement assignment operations\n taking the second operand by reference.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3951},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":5987,"byte_end":5992,"line_start":180,"line_end":180,"column_start":5,"column_end":10},"name":"Empty","qualname":"::FloatErrorKind::Empty","value":"FloatErrorKind::Empty","parent":{"krate":0,"index":3950},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3953},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":5998,"byte_end":6005,"line_start":181,"line_end":181,"column_start":5,"column_end":12},"name":"Invalid","qualname":"::FloatErrorKind::Invalid","value":"FloatErrorKind::Invalid","parent":{"krate":0,"index":3950},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3950},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":5966,"byte_end":5980,"line_start":179,"line_end":179,"column_start":10,"column_end":24},"name":"FloatErrorKind","qualname":"::FloatErrorKind","value":"FloatErrorKind::{Empty, Invalid}","parent":null,"children":[{"krate":0,"index":3951},{"krate":0,"index":3953}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3957},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":6163,"byte_end":6178,"line_start":186,"line_end":186,"column_start":12,"column_end":27},"name":"ParseFloatError","qualname":"::ParseFloatError","value":"ParseFloatError { kind }","parent":null,"children":[{"krate":0,"index":3958}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3958},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":6189,"byte_end":6193,"line_start":187,"line_end":187,"column_start":9,"column_end":13},"name":"kind","qualname":"::ParseFloatError::kind","value":"FloatErrorKind","parent":{"krate":0,"index":3957},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":513},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":14465,"byte_end":14470,"line_start":375,"line_end":375,"column_start":8,"column_end":13},"name":"clamp","qualname":"::clamp","value":"fn <T> (input: T, min: T, max: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" A value bounded by a minimum and a maximum","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":14448,"byte_end":14457,"line_start":374,"line_end":374,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":515},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":15035,"byte_end":15044,"line_start":394,"line_end":394,"column_start":8,"column_end":17},"name":"clamp_min","qualname":"::clamp_min","value":"fn <T> (input: T, min: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" A value bounded by a minimum value","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":15018,"byte_end":15027,"line_start":393,"line_end":393,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":517},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":15546,"byte_end":15555,"line_start":411,"line_end":411,"column_start":8,"column_end":17},"name":"clamp_max","qualname":"::clamp_max","value":"fn <T> (input: T, max: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" A value bounded by a maximum value","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":15529,"byte_end":15538,"line_start":410,"line_end":410,"column_start":1,"column_end":10}}]}],"impls":[{"id":12,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\bounds.rs","byte_start":21816,"byte_end":21824,"line_start":49,"line_end":49,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":96},{"krate":0,"index":97}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":43765,"byte_end":43773,"line_start":599,"line_end":599,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1326},{"krate":0,"index":1327},{"krate":0,"index":1328},{"krate":0,"index":1329},{"krate":0,"index":1330},{"krate":0,"index":1331},{"krate":0,"index":1332},{"krate":0,"index":1333},{"krate":0,"index":1334},{"krate":0,"index":1335},{"krate":0,"index":1336},{"krate":0,"index":1337},{"krate":0,"index":1338},{"krate":0,"index":1339}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":44541,"byte_end":44549,"line_start":632,"line_end":632,"column_start":42,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1340},{"krate":0,"index":1341},{"krate":0,"index":1342},{"krate":0,"index":1343},{"krate":0,"index":1344},{"krate":0,"index":1345},{"krate":0,"index":1346},{"krate":0,"index":1347},{"krate":0,"index":1348},{"krate":0,"index":1349},{"krate":0,"index":1350},{"krate":0,"index":1351},{"krate":0,"index":1352},{"krate":0,"index":1353}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":46552,"byte_end":46560,"line_start":709,"line_end":709,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":180}],"docs":"","sig":null,"attributes":[]},{"id":284,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":113482,"byte_end":113490,"line_start":65,"line_end":65,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":259},{"krate":0,"index":260},{"krate":0,"index":261}],"docs":"","sig":null,"attributes":[]},{"id":299,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":115467,"byte_end":115475,"line_start":154,"line_end":154,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":269},{"krate":0,"index":270}],"docs":"","sig":null,"attributes":[]},{"id":554,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":156518,"byte_end":156526,"line_start":222,"line_end":222,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":408}],"docs":"","sig":null,"attributes":[]},{"id":555,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":156718,"byte_end":156726,"line_start":230,"line_end":230,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":411}],"docs":"","sig":null,"attributes":[]},{"id":556,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":156918,"byte_end":156926,"line_start":238,"line_end":238,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":414}],"docs":"","sig":null,"attributes":[]},{"id":557,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":157118,"byte_end":157126,"line_start":246,"line_end":246,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":417}],"docs":"","sig":null,"attributes":[]},{"id":558,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":157304,"byte_end":157312,"line_start":254,"line_end":254,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":420}],"docs":"","sig":null,"attributes":[]},{"id":559,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":157510,"byte_end":157518,"line_start":262,"line_end":262,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":423}],"docs":"","sig":null,"attributes":[]},{"id":710,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":191150,"byte_end":191158,"line_start":80,"line_end":80,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":454},{"krate":0,"index":455},{"krate":0,"index":456},{"krate":0,"index":457},{"krate":0,"index":458}],"docs":"","sig":null,"attributes":[]},{"id":719,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":194538,"byte_end":194546,"line_start":209,"line_end":209,"column_start":32,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":720,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":3065,"byte_end":3066,"line_start":98,"line_end":98,"column_start":46,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":721,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":3523,"byte_end":3524,"line_start":112,"line_end":112,"column_start":20,"column_end":21},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":722,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":3887,"byte_end":3888,"line_start":119,"line_end":119,"column_start":32,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":723,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":4279,"byte_end":4280,"line_start":129,"line_end":129,"column_start":36,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":724,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":4603,"byte_end":4604,"line_start":138,"line_end":138,"column_start":23,"column_end":24},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":725,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":4938,"byte_end":4939,"line_start":145,"line_end":145,"column_start":26,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":738,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":5538,"byte_end":5546,"line_start":164,"line_end":164,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":508},{"krate":0,"index":509}],"docs":"","sig":null,"attributes":[]},{"id":739,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":6236,"byte_end":6251,"line_start":190,"line_end":190,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":511}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1897,"byte_end":1903,"line_start":55,"line_end":55,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":70}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1913,"byte_end":1917,"line_start":56,"line_end":56,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":101}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1927,"byte_end":1932,"line_start":57,"line_end":57,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":186}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1942,"byte_end":1952,"line_start":58,"line_end":58,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":247}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1962,"byte_end":1965,"line_start":59,"line_end":59,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":275}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1975,"byte_end":1978,"line_start":60,"line_end":60,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":307}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\mod.rs","byte_start":127810,"byte_end":127817,"line_start":1,"line_end":1,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":308}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\mod.rs","byte_start":127827,"byte_end":127830,"line_start":2,"line_end":2,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":336}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\mod.rs","byte_start":127840,"byte_end":127847,"line_start":3,"line_end":3,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":354}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\mod.rs","byte_start":127857,"byte_end":127867,"line_start":4,"line_end":4,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":366}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\mod.rs","byte_start":127877,"byte_end":127885,"line_start":5,"line_end":5,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":382}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1988,"byte_end":1991,"line_start":61,"line_end":61,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":424}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":2015,"byte_end":2019,"line_start":63,"line_end":63,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":440}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\bounds.rs","byte_start":21816,"byte_end":21824,"line_start":49,"line_end":49,"column_start":30,"column_end":38},"kind":{"Impl":{"id":12}},"from":{"krate":1,"index":10883},"to":{"krate":0,"index":90}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":36945,"byte_end":36950,"line_start":395,"line_end":395,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":1,"index":1538},"to":{"krate":0,"index":149}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":43765,"byte_end":43773,"line_start":599,"line_end":599,"column_start":38,"column_end":46},"kind":{"Impl":{"id":29}},"from":{"krate":1,"index":10883},"to":{"krate":0,"index":123}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":44541,"byte_end":44549,"line_start":632,"line_end":632,"column_start":42,"column_end":50},"kind":{"Impl":{"id":30}},"from":{"krate":1,"index":10883},"to":{"krate":0,"index":149}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":45384,"byte_end":45389,"line_start":671,"line_end":671,"column_start":20,"column_end":25},"kind":"SuperTrait","from":{"krate":1,"index":1538},"to":{"krate":0,"index":174}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":45392,"byte_end":45403,"line_start":671,"line_end":671,"column_start":28,"column_end":39},"kind":"SuperTrait","from":{"krate":0,"index":123},"to":{"krate":0,"index":174}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":46552,"byte_end":46560,"line_start":709,"line_end":709,"column_start":30,"column_end":38},"kind":{"Impl":{"id":45}},"from":{"krate":1,"index":10883},"to":{"krate":0,"index":174}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":47794,"byte_end":47798,"line_start":750,"line_end":750,"column_start":37,"column_end":41},"kind":"SuperTrait","from":{"krate":1,"index":1543},"to":{"krate":0,"index":182}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":49638,"byte_end":49641,"line_start":16,"line_end":16,"column_start":22,"column_end":25},"kind":"SuperTrait","from":{"krate":0,"index":470},"to":{"krate":0,"index":199}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":49644,"byte_end":49651,"line_start":16,"line_end":16,"column_start":28,"column_end":35},"kind":"SuperTrait","from":{"krate":0,"index":174},"to":{"krate":0,"index":199}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":49654,"byte_end":49657,"line_start":16,"line_end":16,"column_start":38,"column_end":41},"kind":"SuperTrait","from":{"krate":1,"index":1623},"to":{"krate":0,"index":199}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":49675,"byte_end":49685,"line_start":16,"line_end":16,"column_start":59,"column_end":69},"kind":"SuperTrait","from":{"krate":1,"index":2077},"to":{"krate":0,"index":199}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":49688,"byte_end":49692,"line_start":16,"line_end":16,"column_start":72,"column_end":76},"kind":"SuperTrait","from":{"krate":1,"index":1543},"to":{"krate":0,"index":199}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":112225,"byte_end":112230,"line_start":12,"line_end":12,"column_start":17,"column_end":22},"kind":"SuperTrait","from":{"krate":1,"index":1538},"to":{"krate":0,"index":252}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":112233,"byte_end":112236,"line_start":12,"line_end":12,"column_start":25,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":1596},"to":{"krate":0,"index":252}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":113482,"byte_end":113490,"line_start":65,"line_end":65,"column_start":24,"column_end":32},"kind":{"Impl":{"id":284}},"from":{"krate":1,"index":10883},"to":{"krate":0,"index":252}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":113919,"byte_end":113924,"line_start":90,"line_end":90,"column_start":16,"column_end":21},"kind":"SuperTrait","from":{"krate":1,"index":1538},"to":{"krate":0,"index":262}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":113927,"byte_end":113930,"line_start":90,"line_end":90,"column_start":24,"column_end":27},"kind":"SuperTrait","from":{"krate":1,"index":1606},"to":{"krate":0,"index":262}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":115467,"byte_end":115475,"line_start":154,"line_end":154,"column_start":22,"column_end":30},"kind":{"Impl":{"id":299}},"from":{"krate":1,"index":10883},"to":{"krate":0,"index":262}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":118482,"byte_end":118487,"line_start":35,"line_end":35,"column_start":5,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":1538},"to":{"krate":0,"index":289}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":118494,"byte_end":118498,"line_start":36,"line_end":36,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":1543},"to":{"krate":0,"index":289}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":118505,"byte_end":118508,"line_start":37,"line_end":37,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":0,"index":470},"to":{"krate":0,"index":289}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":118515,"byte_end":118522,"line_start":38,"line_end":38,"column_start":7,"column_end":14},"kind":"SuperTrait","from":{"krate":0,"index":174},"to":{"krate":0,"index":289}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":118529,"byte_end":118536,"line_start":39,"line_end":39,"column_start":7,"column_end":14},"kind":"SuperTrait","from":{"krate":0,"index":90},"to":{"krate":0,"index":289}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":118543,"byte_end":118553,"line_start":40,"line_end":40,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":1,"index":2077},"to":{"krate":0,"index":289}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":118560,"byte_end":118563,"line_start":41,"line_end":41,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":2066},"to":{"krate":0,"index":289}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":118570,"byte_end":118572,"line_start":42,"line_end":42,"column_start":7,"column_end":9},"kind":"SuperTrait","from":{"krate":1,"index":2045},"to":{"krate":0,"index":289}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":118579,"byte_end":118582,"line_start":43,"line_end":43,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":1650},"to":{"krate":0,"index":289}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":118604,"byte_end":118610,"line_start":44,"line_end":44,"column_start":7,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":1654},"to":{"krate":0,"index":289}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":118632,"byte_end":118637,"line_start":45,"line_end":45,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":1,"index":1659},"to":{"krate":0,"index":289}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":118659,"byte_end":118665,"line_start":46,"line_end":46,"column_start":7,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":1664},"to":{"krate":0,"index":289}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":118687,"byte_end":118690,"line_start":47,"line_end":47,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":1669},"to":{"krate":0,"index":289}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":118719,"byte_end":118722,"line_start":48,"line_end":48,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":1675},"to":{"krate":0,"index":289}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":118751,"byte_end":118761,"line_start":49,"line_end":49,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":317},"to":{"krate":0,"index":289}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":118783,"byte_end":118793,"line_start":50,"line_end":50,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":320},"to":{"krate":0,"index":289}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":118815,"byte_end":118825,"line_start":51,"line_end":51,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":322},"to":{"krate":0,"index":289}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":118847,"byte_end":118857,"line_start":52,"line_end":52,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":324},"to":{"krate":0,"index":289}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":118879,"byte_end":118889,"line_start":53,"line_end":53,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":371},"to":{"krate":0,"index":289}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":128049,"byte_end":128054,"line_start":5,"line_end":5,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":1538},"to":{"krate":0,"index":317}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":128057,"byte_end":128060,"line_start":5,"line_end":5,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":1596},"to":{"krate":0,"index":317}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":129190,"byte_end":129195,"line_start":39,"line_end":39,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":1538},"to":{"krate":0,"index":320}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":129198,"byte_end":129201,"line_start":39,"line_end":39,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":1601},"to":{"krate":0,"index":320}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":130093,"byte_end":130098,"line_start":63,"line_end":63,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":1538},"to":{"krate":0,"index":322}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":130101,"byte_end":130104,"line_start":63,"line_end":63,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":1606},"to":{"krate":0,"index":322}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":131061,"byte_end":131066,"line_start":87,"line_end":87,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":1538},"to":{"krate":0,"index":324}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":131069,"byte_end":131072,"line_start":87,"line_end":87,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":1611},"to":{"krate":0,"index":324}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":132048,"byte_end":132053,"line_start":111,"line_end":111,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":1538},"to":{"krate":0,"index":326}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":132056,"byte_end":132059,"line_start":111,"line_end":111,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":1617},"to":{"krate":0,"index":326}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":133827,"byte_end":133832,"line_start":162,"line_end":162,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":1538},"to":{"krate":0,"index":329}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":135276,"byte_end":135281,"line_start":200,"line_end":200,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":1538},"to":{"krate":0,"index":331}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":135284,"byte_end":135287,"line_start":200,"line_end":200,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":1669},"to":{"krate":0,"index":331}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":136918,"byte_end":136923,"line_start":246,"line_end":246,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":1538},"to":{"krate":0,"index":334}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":136926,"byte_end":136929,"line_start":246,"line_end":246,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":1675},"to":{"krate":0,"index":334}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\saturating.rs","byte_start":144479,"byte_end":144484,"line_start":47,"line_end":47,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":1,"index":1538},"to":{"krate":0,"index":376}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\saturating.rs","byte_start":144487,"byte_end":144490,"line_start":47,"line_end":47,"column_start":34,"column_end":37},"kind":"SuperTrait","from":{"krate":1,"index":1596},"to":{"krate":0,"index":376}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\saturating.rs","byte_start":145487,"byte_end":145492,"line_start":70,"line_end":70,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":1,"index":1538},"to":{"krate":0,"index":378}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\saturating.rs","byte_start":145495,"byte_end":145498,"line_start":70,"line_end":70,"column_start":34,"column_end":37},"kind":"SuperTrait","from":{"krate":1,"index":1601},"to":{"krate":0,"index":378}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\saturating.rs","byte_start":146501,"byte_end":146506,"line_start":93,"line_end":93,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":1,"index":1538},"to":{"krate":0,"index":380}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\saturating.rs","byte_start":146509,"byte_end":146512,"line_start":93,"line_end":93,"column_start":34,"column_end":37},"kind":"SuperTrait","from":{"krate":1,"index":1606},"to":{"krate":0,"index":380}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":148907,"byte_end":148912,"line_start":24,"line_end":24,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":1,"index":1538},"to":{"krate":0,"index":392}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":148915,"byte_end":148918,"line_start":24,"line_end":24,"column_start":32,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":1596},"to":{"krate":0,"index":392}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":149801,"byte_end":149806,"line_start":47,"line_end":47,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":1,"index":1538},"to":{"krate":0,"index":394}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":149809,"byte_end":149812,"line_start":47,"line_end":47,"column_start":32,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":1601},"to":{"krate":0,"index":394}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":150701,"byte_end":150706,"line_start":70,"line_end":70,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":1,"index":1538},"to":{"krate":0,"index":396}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":150709,"byte_end":150712,"line_start":70,"line_end":70,"column_start":32,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":1606},"to":{"krate":0,"index":396}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":151841,"byte_end":151846,"line_start":104,"line_end":104,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":1,"index":1538},"to":{"krate":0,"index":399}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":153680,"byte_end":153685,"line_start":152,"line_end":152,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":1,"index":1538},"to":{"krate":0,"index":402}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":153688,"byte_end":153691,"line_start":152,"line_end":152,"column_start":32,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":1669},"to":{"krate":0,"index":402}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":155086,"byte_end":155091,"line_start":187,"line_end":187,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":1,"index":1538},"to":{"krate":0,"index":404}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":155094,"byte_end":155097,"line_start":187,"line_end":187,"column_start":32,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":1675},"to":{"krate":0,"index":404}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":156518,"byte_end":156526,"line_start":222,"line_end":222,"column_start":38,"column_end":46},"kind":{"Impl":{"id":554}},"from":{"krate":1,"index":10883},"to":{"krate":0,"index":392}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":156718,"byte_end":156726,"line_start":230,"line_end":230,"column_start":38,"column_end":46},"kind":{"Impl":{"id":555}},"from":{"krate":1,"index":10883},"to":{"krate":0,"index":394}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":156918,"byte_end":156926,"line_start":238,"line_end":238,"column_start":38,"column_end":46},"kind":{"Impl":{"id":556}},"from":{"krate":1,"index":10883},"to":{"krate":0,"index":396}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":157118,"byte_end":157126,"line_start":246,"line_end":246,"column_start":38,"column_end":46},"kind":{"Impl":{"id":557}},"from":{"krate":1,"index":10883},"to":{"krate":0,"index":399}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":157304,"byte_end":157312,"line_start":254,"line_end":254,"column_start":38,"column_end":46},"kind":{"Impl":{"id":558}},"from":{"krate":1,"index":10883},"to":{"krate":0,"index":402}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":157510,"byte_end":157518,"line_start":262,"line_end":262,"column_start":38,"column_end":46},"kind":{"Impl":{"id":559}},"from":{"krate":1,"index":10883},"to":{"krate":0,"index":404}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":189062,"byte_end":189067,"line_start":8,"line_end":8,"column_start":19,"column_end":24},"kind":"SuperTrait","from":{"krate":1,"index":1538},"to":{"krate":0,"index":445}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":189070,"byte_end":189073,"line_start":8,"line_end":8,"column_start":27,"column_end":30},"kind":"SuperTrait","from":{"krate":0,"index":470},"to":{"krate":0,"index":445}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":189076,"byte_end":189079,"line_start":8,"line_end":8,"column_start":33,"column_end":36},"kind":"SuperTrait","from":{"krate":1,"index":1623},"to":{"krate":0,"index":445}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":191150,"byte_end":191158,"line_start":80,"line_end":80,"column_start":28,"column_end":36},"kind":{"Impl":{"id":710}},"from":{"krate":1,"index":10883},"to":{"krate":0,"index":445}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":194278,"byte_end":194281,"line_start":197,"line_end":197,"column_start":21,"column_end":24},"kind":"SuperTrait","from":{"krate":0,"index":470},"to":{"krate":0,"index":466}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":194538,"byte_end":194546,"line_start":209,"line_end":209,"column_start":32,"column_end":40},"kind":{"Impl":{"id":719}},"from":{"krate":1,"index":10883},"to":{"krate":0,"index":466}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":2170,"byte_end":2179,"line_start":67,"line_end":67,"column_start":16,"column_end":25},"kind":"SuperTrait","from":{"krate":1,"index":2040},"to":{"krate":0,"index":470}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":2182,"byte_end":2186,"line_start":67,"line_end":67,"column_start":28,"column_end":32},"kind":"SuperTrait","from":{"krate":0,"index":252},"to":{"krate":0,"index":470}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":2189,"byte_end":2192,"line_start":67,"line_end":67,"column_start":35,"column_end":38},"kind":"SuperTrait","from":{"krate":0,"index":262},"to":{"krate":0,"index":470}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":2195,"byte_end":2201,"line_start":67,"line_end":67,"column_start":41,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":473},"to":{"krate":0,"index":470}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":2861,"byte_end":2864,"line_start":90,"line_end":90,"column_start":5,"column_end":8},"kind":"SuperTrait","from":{"krate":1,"index":1596},"to":{"krate":0,"index":473}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":2893,"byte_end":2896,"line_start":91,"line_end":91,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":1601},"to":{"krate":0,"index":473}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":2925,"byte_end":2928,"line_start":92,"line_end":92,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":1606},"to":{"krate":0,"index":473}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":2957,"byte_end":2960,"line_start":93,"line_end":93,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":1611},"to":{"krate":0,"index":473}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":2989,"byte_end":2992,"line_start":94,"line_end":94,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":1617},"to":{"krate":0,"index":473}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":3065,"byte_end":3066,"line_start":98,"line_end":98,"column_start":46,"column_end":47},"kind":{"Impl":{"id":720}},"from":{"krate":0,"index":477},"to":{"krate":0,"index":473}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":3470,"byte_end":3473,"line_start":111,"line_end":111,"column_start":19,"column_end":22},"kind":"SuperTrait","from":{"krate":0,"index":470},"to":{"krate":0,"index":480}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":3484,"byte_end":3490,"line_start":111,"line_end":111,"column_start":33,"column_end":39},"kind":"SuperTrait","from":{"krate":0,"index":473},"to":{"krate":0,"index":480}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":3523,"byte_end":3524,"line_start":112,"line_end":112,"column_start":20,"column_end":21},"kind":{"Impl":{"id":721}},"from":{"krate":0,"index":483},"to":{"krate":0,"index":480}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":3801,"byte_end":3807,"line_start":118,"line_end":118,"column_start":25,"column_end":31},"kind":"SuperTrait","from":{"krate":0,"index":473},"to":{"krate":0,"index":485}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":3830,"byte_end":3836,"line_start":118,"line_end":118,"column_start":54,"column_end":60},"kind":"SuperTrait","from":{"krate":0,"index":473},"to":{"krate":0,"index":485}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":3887,"byte_end":3888,"line_start":119,"line_end":119,"column_start":32,"column_end":33},"kind":{"Impl":{"id":722}},"from":{"krate":0,"index":489},"to":{"krate":0,"index":485}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":4156,"byte_end":4165,"line_start":125,"line_end":125,"column_start":5,"column_end":14},"kind":"SuperTrait","from":{"krate":1,"index":1629},"to":{"krate":0,"index":492}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":4173,"byte_end":4182,"line_start":125,"line_end":125,"column_start":22,"column_end":31},"kind":"SuperTrait","from":{"krate":1,"index":1633},"to":{"krate":0,"index":492}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":4190,"byte_end":4199,"line_start":125,"line_end":125,"column_start":39,"column_end":48},"kind":"SuperTrait","from":{"krate":1,"index":1637},"to":{"krate":0,"index":492}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":4207,"byte_end":4216,"line_start":125,"line_end":125,"column_start":56,"column_end":65},"kind":"SuperTrait","from":{"krate":1,"index":1641},"to":{"krate":0,"index":492}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":4224,"byte_end":4233,"line_start":125,"line_end":125,"column_start":73,"column_end":82},"kind":"SuperTrait","from":{"krate":1,"index":1645},"to":{"krate":0,"index":492}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":4279,"byte_end":4280,"line_start":129,"line_end":129,"column_start":36,"column_end":37},"kind":{"Impl":{"id":723}},"from":{"krate":0,"index":495},"to":{"krate":0,"index":492}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":4559,"byte_end":4562,"line_start":137,"line_end":137,"column_start":22,"column_end":25},"kind":"SuperTrait","from":{"krate":0,"index":470},"to":{"krate":0,"index":497}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":4565,"byte_end":4577,"line_start":137,"line_end":137,"column_start":28,"column_end":40},"kind":"SuperTrait","from":{"krate":0,"index":492},"to":{"krate":0,"index":497}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":4603,"byte_end":4604,"line_start":138,"line_end":138,"column_start":23,"column_end":24},"kind":{"Impl":{"id":724}},"from":{"krate":0,"index":499},"to":{"krate":0,"index":497}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":4867,"byte_end":4876,"line_start":144,"line_end":144,"column_start":25,"column_end":34},"kind":"SuperTrait","from":{"krate":0,"index":497},"to":{"krate":0,"index":500}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":4887,"byte_end":4899,"line_start":144,"line_end":144,"column_start":45,"column_end":57},"kind":"SuperTrait","from":{"krate":0,"index":492},"to":{"krate":0,"index":500}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":4938,"byte_end":4939,"line_start":145,"line_end":145,"column_start":26,"column_end":27},"kind":{"Impl":{"id":725}},"from":{"krate":0,"index":503},"to":{"krate":0,"index":500}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":5538,"byte_end":5546,"line_start":164,"line_end":164,"column_start":22,"column_end":30},"kind":{"Impl":{"id":738}},"from":{"krate":1,"index":10883},"to":{"krate":0,"index":470}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":6236,"byte_end":6251,"line_start":190,"line_end":190,"column_start":23,"column_end":38},"kind":{"Impl":{"id":739}},"from":{"krate":0,"index":3957},"to":{"krate":1,"index":7648}}]}