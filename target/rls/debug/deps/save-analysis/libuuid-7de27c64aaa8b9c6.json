{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1","program":"C:\\Users\\Zrus\\.rustup\\toolchains\\stable-i686-pc-windows-msvc\\bin\\rls.exe","arguments":["--edition=2018","--crate-name","uuid","C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"rand\"","--cfg","feature=\"serde\"","--cfg","feature=\"std\"","--cfg","feature=\"v4\"","-C","metadata=7de27c64aaa8b9c6","-C","extra-filename=-7de27c64aaa8b9c6","--out-dir","d:\\Workspace\\Rust\\es-test\\target\\rls\\debug\\deps","-L","dependency=d:\\Workspace\\Rust\\es-test\\target\\rls\\debug\\deps","--extern","rand=d:\\Workspace\\Rust\\es-test\\target\\rls\\debug\\deps\\librand-3e53bf269dc95be9.rmeta","--extern","serde=d:\\Workspace\\Rust\\es-test\\target\\rls\\debug\\deps\\libserde-c8520a919f8afeba.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\Zrus\\.rustup/toolchains/stable-i686-pc-windows-msvc"],"output":"d:\\Workspace\\Rust\\es-test\\target\\rls\\debug\\deps\\libuuid-7de27c64aaa8b9c6.rmeta"},"prelude":{"crate_id":{"name":"uuid","disambiguator":[14936695943859229686,17812685972186359567]},"crate_root":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src","external_crates":[{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\lib.rs","num":1,"id":{"name":"core","disambiguator":[6764811272097449003,13681722573116367099]}},{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[9485826678459717252,15756974541460141494]}},{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[15954912595519161470,12922162993496933985]}},{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\lib.rs","num":4,"id":{"name":"std","disambiguator":[17547299525433066937,6462703543472652821]}},{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[5824572747488578400,18164785604033351576]}},{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[10331641369357162511,17836984904787579268]}},{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[8495357030570666042,9830701870303456689]}},{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[9657771536831955996,2892192969278695320]}},{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[12375917788909833983,1997691704544372736]}},{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[16952125311933509182,18402636855086965869]}},{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\lib.rs","num":11,"id":{"name":"hashbrown","disambiguator":[10744862195025581238,6478452609884575256]}},{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\lib.rs","num":12,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[8143783028888645125,5443838079021418384]}},{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[2060411395260400816,11913745625441100273]}},{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\serde_support.rs","num":14,"id":{"name":"serde","disambiguator":[6554293757877357723,6094940800161419408]}},{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\serde_support.rs","num":15,"id":{"name":"serde_derive","disambiguator":[10826663184393962831,15926678241897306731]}},{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\v4.rs","num":16,"id":{"name":"rand","disambiguator":[11851714072042602885,7636787912077727600]}},{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\v4.rs","num":17,"id":{"name":"rand_core","disambiguator":[2078825014820207980,6184732600611388997]}},{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\v4.rs","num":18,"id":{"name":"getrandom","disambiguator":[3138311806888020513,464795457802823762]}},{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\v4.rs","num":19,"id":{"name":"cfg_if","disambiguator":[12264963404521768264,13162333806926070749]}},{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\v4.rs","num":20,"id":{"name":"rand_chacha","disambiguator":[10465744587685956114,13003898242921590450]}},{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\v4.rs","num":21,"id":{"name":"ppv_lite86","disambiguator":[16144752331973006290,17913473365846823015]}}],"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\lib.rs","byte_start":481,"byte_end":31079,"line_start":12,"line_end":1030,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":278},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\lib.rs","byte_start":5894,"byte_end":5901,"line_start":197,"line_end":197,"column_start":26,"column_end":33},"alias_span":null,"name":"Builder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":283},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\lib.rs","byte_start":5910,"byte_end":5915,"line_start":197,"line_end":197,"column_start":42,"column_end":47},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\lib.rs","byte_start":481,"byte_end":31079,"line_start":12,"line_end":1030,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":46},{"krate":0,"index":62},{"krate":0,"index":88},{"krate":0,"index":96},{"krate":0,"index":172},{"krate":0,"index":207},{"krate":0,"index":214},{"krate":0,"index":217},{"krate":0,"index":220},{"krate":0,"index":670},{"krate":0,"index":690},{"krate":0,"index":689},{"krate":0,"index":687},{"krate":0,"index":684},{"krate":0,"index":685},{"krate":0,"index":692},{"krate":0,"index":708},{"krate":0,"index":707},{"krate":0,"index":705},{"krate":0,"index":702},{"krate":0,"index":703},{"krate":0,"index":710},{"krate":0,"index":732},{"krate":0,"index":731},{"krate":0,"index":728},{"krate":0,"index":729},{"krate":0,"index":725},{"krate":0,"index":723},{"krate":0,"index":719},{"krate":0,"index":720},{"krate":0,"index":713},{"krate":0,"index":222},{"krate":0,"index":246},{"krate":0,"index":248},{"krate":0,"index":250},{"krate":0,"index":252},{"krate":0,"index":254},{"krate":0,"index":256},{"krate":0,"index":259}],"decl_id":null,"docs":" Generate and parse UUIDs.","sig":null,"attributes":[{"value":"no_std","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\lib.rs","byte_start":4485,"byte_end":4495,"line_start":128,"line_end":128,"column_start":1,"column_end":11}},{"value":"deny(missing_debug_implementations, missing_docs)","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\lib.rs","byte_start":4496,"byte_end":4549,"line_start":129,"line_end":129,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":21},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\builder\\mod.rs","byte_start":32288,"byte_end":32291,"line_start":43,"line_end":43,"column_start":18,"column_end":21},"name":"nil","qualname":"<Uuid>::nil","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" The 'nil UUID'.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":23},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\builder\\mod.rs","byte_start":32986,"byte_end":32997,"line_start":70,"line_end":70,"column_start":12,"column_end":23},"name":"from_fields","qualname":"<Uuid>::from_fields","value":"fn (d1: u32, d2: u16, d3: u16, d4: &[u8]) -> Result<Uuid, crate::Error>","parent":null,"children":[],"decl_id":null,"docs":" Creates a UUID from four field values in big-endian order.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":25},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\builder\\mod.rs","byte_start":34372,"byte_end":34386,"line_start":127,"line_end":127,"column_start":12,"column_end":26},"name":"from_fields_le","qualname":"<Uuid>::from_fields_le","value":"fn (d1: u32, d2: u16, d3: u16, d4: &[u8]) -> Result<Uuid, crate::Error>","parent":null,"children":[],"decl_id":null,"docs":" Creates a UUID from four field values in little-endian order.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":27},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\builder\\mod.rs","byte_start":35137,"byte_end":35146,"line_start":162,"line_end":162,"column_start":18,"column_end":27},"name":"from_u128","qualname":"<Uuid>::from_u128","value":"fn (v: u128) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a UUID from a 128bit value in big-endian order.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\builder\\mod.rs","byte_start":35753,"byte_end":35765,"line_start":184,"line_end":184,"column_start":18,"column_end":30},"name":"from_u128_le","qualname":"<Uuid>::from_u128_le","value":"fn (v: u128) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a UUID from a 128bit value in little-endian order.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":29},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\builder\\mod.rs","byte_start":37207,"byte_end":37217,"line_start":240,"line_end":240,"column_start":12,"column_end":22},"name":"from_slice","qualname":"<Uuid>::from_slice","value":"fn (b: &[u8]) -> Result<Uuid, crate::Error>","parent":null,"children":[],"decl_id":null,"docs":" Creates a UUID using the supplied big-endian bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\builder\\mod.rs","byte_start":37607,"byte_end":37617,"line_start":255,"line_end":255,"column_start":18,"column_end":28},"name":"from_bytes","qualname":"<Uuid>::from_bytes","value":"fn (bytes: Bytes) -> Uuid","parent":null,"children":[],"decl_id":null,"docs":" Creates a UUID using the supplied big-endian bytes.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":278},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\builder\\mod.rs","byte_start":38219,"byte_end":38226,"line_start":281,"line_end":281,"column_start":12,"column_end":19},"name":"Builder","qualname":"::builder::Builder","value":"","parent":null,"children":[],"decl_id":null,"docs":" A builder struct for creating a UUID.","sig":null,"attributes":[{"value":"allow(missing_copy_implementations)","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\builder\\mod.rs","byte_start":38152,"byte_end":38190,"line_start":279,"line_end":279,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\builder\\mod.rs","byte_start":39065,"byte_end":39075,"line_start":310,"line_end":310,"column_start":18,"column_end":28},"name":"from_bytes","qualname":"<Builder>::from_bytes","value":"fn (b: Bytes) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a `Builder` using the supplied big-endian bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\builder\\mod.rs","byte_start":40042,"byte_end":40052,"line_start":346,"line_end":346,"column_start":12,"column_end":22},"name":"from_slice","qualname":"<Builder>::from_slice","value":"fn (b: &[u8]) -> Result<Self, crate::Error>","parent":null,"children":[],"decl_id":null,"docs":" Creates a `Builder` using the supplied big-endian bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\builder\\mod.rs","byte_start":41229,"byte_end":41240,"line_start":392,"line_end":392,"column_start":12,"column_end":23},"name":"from_fields","qualname":"<Builder>::from_fields","value":"fn (d1: u32, d2: u16, d3: u16, d4: &[u8]) -> Result<Self, crate::Error>","parent":null,"children":[],"decl_id":null,"docs":" Creates a `Builder` from four big-endian field values.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\builder\\mod.rs","byte_start":41576,"byte_end":41585,"line_start":406,"line_end":406,"column_start":12,"column_end":21},"name":"from_u128","qualname":"<Builder>::from_u128","value":"fn (v: u128) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a `Builder` from a big-endian 128bit value.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":41},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\builder\\mod.rs","byte_start":42060,"byte_end":42063,"line_start":426,"line_end":426,"column_start":18,"column_end":21},"name":"nil","qualname":"<Builder>::nil","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a `Builder` with an initial [`Uuid::nil`].","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":43},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\builder\\mod.rs","byte_start":42162,"byte_end":42173,"line_start":431,"line_end":431,"column_start":12,"column_end":23},"name":"set_variant","qualname":"<Builder>::set_variant","value":"fn (&mut self, v: crate::Variant) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies the variant of the UUID.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\builder\\mod.rs","byte_start":42605,"byte_end":42616,"line_start":445,"line_end":445,"column_start":12,"column_end":23},"name":"set_version","qualname":"<Builder>::set_version","value":"fn (&mut self, v: crate::Version) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies the version number of the UUID.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":45},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\builder\\mod.rs","byte_start":43152,"byte_end":43157,"line_start":469,"line_end":469,"column_start":12,"column_end":17},"name":"build","qualname":"<Builder>::build","value":"fn (&mut self) -> Uuid","parent":null,"children":[],"decl_id":null,"docs":" Hands over the internal constructed [`Uuid`].","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":283},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\error.rs","byte_start":44563,"byte_end":44568,"line_start":8,"line_end":8,"column_start":12,"column_end":17},"name":"Error","qualname":"::error::Error","value":"","parent":null,"children":[],"decl_id":null,"docs":" A general error that can occur when working with UUIDs.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\parser\\mod.rs","byte_start":47979,"byte_end":47988,"line_start":57,"line_end":57,"column_start":12,"column_end":21},"name":"parse_str","qualname":"<Uuid>::parse_str","value":"fn (mut input: &str) -> Result<Uuid, crate::Error>","parent":null,"children":[],"decl_id":null,"docs":" Parses a `Uuid` from a string of hexadecimal digits with optional\n hyphens.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":96},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\adapter\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"adapter","qualname":"::adapter","value":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\adapter\\mod.rs","parent":null,"children":[{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":101},{"krate":0,"index":403},{"krate":0,"index":429},{"krate":0,"index":428},{"krate":0,"index":426},{"krate":0,"index":424},{"krate":0,"index":421},{"krate":0,"index":422},{"krate":0,"index":418},{"krate":0,"index":416},{"krate":0,"index":412},{"krate":0,"index":413},{"krate":0,"index":406},{"krate":0,"index":431},{"krate":0,"index":465},{"krate":0,"index":463},{"krate":0,"index":460},{"krate":0,"index":455},{"krate":0,"index":457},{"krate":0,"index":451},{"krate":0,"index":448},{"krate":0,"index":442},{"krate":0,"index":444},{"krate":0,"index":435},{"krate":0,"index":468},{"krate":0,"index":494},{"krate":0,"index":493},{"krate":0,"index":491},{"krate":0,"index":489},{"krate":0,"index":486},{"krate":0,"index":487},{"krate":0,"index":483},{"krate":0,"index":481},{"krate":0,"index":477},{"krate":0,"index":478},{"krate":0,"index":471},{"krate":0,"index":496},{"krate":0,"index":530},{"krate":0,"index":528},{"krate":0,"index":525},{"krate":0,"index":520},{"krate":0,"index":522},{"krate":0,"index":516},{"krate":0,"index":513},{"krate":0,"index":507},{"krate":0,"index":509},{"krate":0,"index":500},{"krate":0,"index":533},{"krate":0,"index":559},{"krate":0,"index":558},{"krate":0,"index":556},{"krate":0,"index":554},{"krate":0,"index":551},{"krate":0,"index":552},{"krate":0,"index":548},{"krate":0,"index":546},{"krate":0,"index":542},{"krate":0,"index":543},{"krate":0,"index":536},{"krate":0,"index":561},{"krate":0,"index":595},{"krate":0,"index":593},{"krate":0,"index":590},{"krate":0,"index":585},{"krate":0,"index":587},{"krate":0,"index":581},{"krate":0,"index":578},{"krate":0,"index":572},{"krate":0,"index":574},{"krate":0,"index":565},{"krate":0,"index":108},{"krate":0,"index":115},{"krate":0,"index":117},{"krate":0,"index":119},{"krate":0,"index":121},{"krate":0,"index":123},{"krate":0,"index":125},{"krate":0,"index":132},{"krate":0,"index":140},{"krate":0,"index":147},{"krate":0,"index":155},{"krate":0,"index":162},{"krate":0,"index":170},{"krate":0,"index":171},{"krate":0,"index":598},{"krate":0,"index":600},{"krate":0,"index":603},{"krate":0,"index":655},{"krate":0,"index":606},{"krate":0,"index":609},{"krate":0,"index":613},{"krate":0,"index":657},{"krate":0,"index":617},{"krate":0,"index":619},{"krate":0,"index":622},{"krate":0,"index":660},{"krate":0,"index":625},{"krate":0,"index":628},{"krate":0,"index":632},{"krate":0,"index":662},{"krate":0,"index":636},{"krate":0,"index":638},{"krate":0,"index":641},{"krate":0,"index":665},{"krate":0,"index":644},{"krate":0,"index":647},{"krate":0,"index":651},{"krate":0,"index":667}],"decl_id":null,"docs":" Adapters for various formats for UUIDs\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":101},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\adapter\\compact.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"compact","qualname":"::adapter::compact","value":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\adapter\\compact.rs","parent":null,"children":[{"krate":0,"index":102},{"krate":0,"index":104}],"decl_id":null,"docs":" Module for use with `#[serde(with = \"...\")]` to serialize a [`Uuid`]\n as a `[u8; 16]`.","sig":null,"attributes":[{"value":"cfg(feature = \"serde\")","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\adapter\\mod.rs","byte_start":68349,"byte_end":68374,"line_start":17,"line_end":17,"column_start":1,"column_end":26}}]},{"kind":"Function","id":{"krate":0,"index":102},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\adapter\\compact.rs","byte_start":99093,"byte_end":99102,"line_start":9,"line_end":9,"column_start":8,"column_end":17},"name":"serialize","qualname":"::adapter::compact::serialize","value":"fn <S> (u: &crate::Uuid, serializer: S) -> Result<S::Ok, S::Error>","parent":null,"children":[],"decl_id":null,"docs":" Serializer for a [`Uuid`] into a `[u8; 16]`","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":104},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\adapter\\compact.rs","byte_start":99359,"byte_end":99370,"line_start":19,"line_end":19,"column_start":8,"column_end":19},"name":"deserialize","qualname":"::adapter::compact::deserialize","value":"fn <'de, D> (deserializer: D) -> Result<crate::Uuid, D::Error>","parent":null,"children":[],"decl_id":null,"docs":" Deserializer from a `[u8; 16]` into a [`Uuid`]","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":403},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\adapter\\mod.rs","byte_start":68634,"byte_end":68644,"line_start":26,"line_end":26,"column_start":12,"column_end":22},"name":"Hyphenated","qualname":"::adapter::Hyphenated","value":"","parent":null,"children":[],"decl_id":null,"docs":" An adaptor for formatting an [`Uuid`] as a hyphenated string.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":431},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\adapter\\mod.rs","byte_start":68879,"byte_end":68892,"line_start":34,"line_end":34,"column_start":12,"column_end":25},"name":"HyphenatedRef","qualname":"::adapter::HyphenatedRef","value":"","parent":null,"children":[],"decl_id":null,"docs":" An adaptor for formatting an [`Uuid`] as a hyphenated string.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":468},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\adapter\\mod.rs","byte_start":69146,"byte_end":69152,"line_start":42,"line_end":42,"column_start":12,"column_end":18},"name":"Simple","qualname":"::adapter::Simple","value":"","parent":null,"children":[],"decl_id":null,"docs":" An adaptor for formatting an [`Uuid`] as a simple string.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":496},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\adapter\\mod.rs","byte_start":69383,"byte_end":69392,"line_start":50,"line_end":50,"column_start":12,"column_end":21},"name":"SimpleRef","qualname":"::adapter::SimpleRef","value":"","parent":null,"children":[],"decl_id":null,"docs":" An adaptor for formatting an [`Uuid`] as a simple string.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":533},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\adapter\\mod.rs","byte_start":69643,"byte_end":69646,"line_start":58,"line_end":58,"column_start":12,"column_end":15},"name":"Urn","qualname":"::adapter::Urn","value":"","parent":null,"children":[],"decl_id":null,"docs":" An adaptor for formatting an [`Uuid`] as a URN string.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":561},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\adapter\\mod.rs","byte_start":69874,"byte_end":69880,"line_start":66,"line_end":66,"column_start":12,"column_end":18},"name":"UrnRef","qualname":"::adapter::UrnRef","value":"","parent":null,"children":[],"decl_id":null,"docs":" An adaptor for formatting an [`Uuid`] as a URN string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":109},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\adapter\\mod.rs","byte_start":70043,"byte_end":70056,"line_start":73,"line_end":73,"column_start":18,"column_end":31},"name":"to_hyphenated","qualname":"<Uuid>::to_hyphenated","value":"fn (self) -> Hyphenated","parent":null,"children":[],"decl_id":null,"docs":" Get a [`Hyphenated`] formatter.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\adapter\\mod.rs","byte_start":70016,"byte_end":70025,"line_start":72,"line_end":72,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\adapter\\mod.rs","byte_start":70274,"byte_end":70291,"line_start":81,"line_end":81,"column_start":18,"column_end":35},"name":"to_hyphenated_ref","qualname":"<Uuid>::to_hyphenated_ref","value":"fn (&self) -> HyphenatedRef<'_>","parent":null,"children":[],"decl_id":null,"docs":" Get a borrowed [`HyphenatedRef`] formatter.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\adapter\\mod.rs","byte_start":70247,"byte_end":70256,"line_start":80,"line_end":80,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":111},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\adapter\\mod.rs","byte_start":70494,"byte_end":70503,"line_start":89,"line_end":89,"column_start":18,"column_end":27},"name":"to_simple","qualname":"<Uuid>::to_simple","value":"fn (self) -> Simple","parent":null,"children":[],"decl_id":null,"docs":" Get a [`Simple`] formatter.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\adapter\\mod.rs","byte_start":70467,"byte_end":70476,"line_start":88,"line_end":88,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\adapter\\mod.rs","byte_start":70701,"byte_end":70714,"line_start":97,"line_end":97,"column_start":18,"column_end":31},"name":"to_simple_ref","qualname":"<Uuid>::to_simple_ref","value":"fn (&self) -> SimpleRef<'_>","parent":null,"children":[],"decl_id":null,"docs":" Get a borrowed [`SimpleRef`] formatter.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\adapter\\mod.rs","byte_start":70674,"byte_end":70683,"line_start":96,"line_end":96,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":113},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\adapter\\mod.rs","byte_start":70938,"byte_end":70944,"line_start":106,"line_end":106,"column_start":18,"column_end":24},"name":"to_urn","qualname":"<Uuid>::to_urn","value":"fn (self) -> Urn","parent":null,"children":[],"decl_id":null,"docs":" Get a [`Urn`] formatter.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\adapter\\mod.rs","byte_start":70911,"byte_end":70920,"line_start":105,"line_end":105,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\adapter\\mod.rs","byte_start":71165,"byte_end":71175,"line_start":115,"line_end":115,"column_start":18,"column_end":28},"name":"to_urn_ref","qualname":"<Uuid>::to_urn_ref","value":"fn (&self) -> UrnRef<'_>","parent":null,"children":[],"decl_id":null,"docs":" Get a borrowed [`UrnRef`] formatter.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\adapter\\mod.rs","byte_start":71138,"byte_end":71147,"line_start":114,"line_end":114,"column_start":5,"column_end":14}}]},{"kind":"Const","id":{"krate":0,"index":126},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\adapter\\mod.rs","byte_start":73451,"byte_end":73457,"line_start":184,"line_end":184,"column_start":15,"column_end":21},"name":"LENGTH","qualname":"::adapter::Hyphenated::LENGTH","value":"usize","parent":{"krate":0,"index":125},"children":[],"decl_id":null,"docs":" The length of a hyphenated [`Uuid`] string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":127},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\adapter\\mod.rs","byte_start":73632,"byte_end":73641,"line_start":190,"line_end":190,"column_start":18,"column_end":27},"name":"from_uuid","qualname":"<Hyphenated>::from_uuid","value":"fn (uuid: Uuid) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a [`Hyphenated`] from a [`Uuid`].","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":128},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\adapter\\mod.rs","byte_start":75132,"byte_end":75144,"line_start":236,"line_end":236,"column_start":12,"column_end":24},"name":"encode_lower","qualname":"<Hyphenated>::encode_lower","value":"fn <'buf> (&self, buffer: &'buf mut [u8]) -> &'buf mut str","parent":null,"children":[],"decl_id":null,"docs":" Writes the [`Uuid`] as a lower-case hyphenated string to\n `buffer`, and returns the subslice of the buffer that contains the\n encoded UUID.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":130},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\adapter\\mod.rs","byte_start":76693,"byte_end":76705,"line_start":282,"line_end":282,"column_start":12,"column_end":24},"name":"encode_upper","qualname":"<Hyphenated>::encode_upper","value":"fn <'buf> (&self, buffer: &'buf mut [u8]) -> &'buf mut str","parent":null,"children":[],"decl_id":null,"docs":" Writes the [`Uuid`] as an upper-case hyphenated string to\n `buffer`, and returns the subslice of the buffer that contains the\n encoded UUID.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":134},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\adapter\\mod.rs","byte_start":76959,"byte_end":76965,"line_start":291,"line_end":291,"column_start":15,"column_end":21},"name":"LENGTH","qualname":"::adapter::HyphenatedRef::<'a>::LENGTH","value":"usize","parent":{"krate":0,"index":132},"children":[],"decl_id":null,"docs":" The length of a hyphenated [`Uuid`] string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":135},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\adapter\\mod.rs","byte_start":77159,"byte_end":77172,"line_start":297,"line_end":297,"column_start":18,"column_end":31},"name":"from_uuid_ref","qualname":"<HyphenatedRef>::from_uuid_ref","value":"fn (uuid: &'a Uuid) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a [`HyphenatedRef`] from a [`Uuid`] reference.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\adapter\\mod.rs","byte_start":78809,"byte_end":78821,"line_start":347,"line_end":347,"column_start":12,"column_end":24},"name":"encode_lower","qualname":"<HyphenatedRef>::encode_lower","value":"fn <'buf> (&self, buffer: &'buf mut [u8]) -> &'buf mut str","parent":null,"children":[],"decl_id":null,"docs":" Writes the [`Uuid`] as a lower-case hyphenated string to\n `buffer`, and returns the subslice of the buffer that contains the\n encoded UUID.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":138},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\adapter\\mod.rs","byte_start":80455,"byte_end":80467,"line_start":396,"line_end":396,"column_start":12,"column_end":24},"name":"encode_upper","qualname":"<HyphenatedRef>::encode_upper","value":"fn <'buf> (&self, buffer: &'buf mut [u8]) -> &'buf mut str","parent":null,"children":[],"decl_id":null,"docs":" Writes the [`Uuid`] as an upper-case hyphenated string to\n `buffer`, and returns the subslice of the buffer that contains the\n encoded UUID.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":141},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\adapter\\mod.rs","byte_start":80701,"byte_end":80707,"line_start":405,"line_end":405,"column_start":15,"column_end":21},"name":"LENGTH","qualname":"::adapter::Simple::LENGTH","value":"usize","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" The length of a simple [`Uuid`] string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\adapter\\mod.rs","byte_start":80870,"byte_end":80879,"line_start":411,"line_end":411,"column_start":18,"column_end":27},"name":"from_uuid","qualname":"<Simple>::from_uuid","value":"fn (uuid: Uuid) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a [`Simple`] from a [`Uuid`].","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":143},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\adapter\\mod.rs","byte_start":82403,"byte_end":82415,"line_start":458,"line_end":458,"column_start":12,"column_end":24},"name":"encode_lower","qualname":"<Simple>::encode_lower","value":"fn <'buf> (&self, buffer: &'buf mut [u8]) -> &'buf mut str","parent":null,"children":[],"decl_id":null,"docs":" Writes the [`Uuid`] as a lower-case simple string to `buffer`,\n and returns the subslice of the buffer that contains the encoded UUID.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":145},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\adapter\\mod.rs","byte_start":83837,"byte_end":83849,"line_start":501,"line_end":501,"column_start":12,"column_end":24},"name":"encode_upper","qualname":"<Simple>::encode_upper","value":"fn <'buf> (&self, buffer: &'buf mut [u8]) -> &'buf mut str","parent":null,"children":[],"decl_id":null,"docs":" Writes the [`Uuid`] as an upper-case simple string to `buffer`,\n and returns the subslice of the buffer that contains the encoded UUID.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":149},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\adapter\\mod.rs","byte_start":84096,"byte_end":84102,"line_start":510,"line_end":510,"column_start":15,"column_end":21},"name":"LENGTH","qualname":"::adapter::SimpleRef::<'a>::LENGTH","value":"usize","parent":{"krate":0,"index":147},"children":[],"decl_id":null,"docs":" The length of a simple [`Uuid`] string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\adapter\\mod.rs","byte_start":84284,"byte_end":84297,"line_start":516,"line_end":516,"column_start":18,"column_end":31},"name":"from_uuid_ref","qualname":"<SimpleRef>::from_uuid_ref","value":"fn (uuid: &'a Uuid) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a [`SimpleRef`] from a [`Uuid`] reference.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":151},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\adapter\\mod.rs","byte_start":85828,"byte_end":85840,"line_start":563,"line_end":563,"column_start":12,"column_end":24},"name":"encode_lower","qualname":"<SimpleRef>::encode_lower","value":"fn <'buf> (&self, buffer: &'buf mut [u8]) -> &'buf mut str","parent":null,"children":[],"decl_id":null,"docs":" Writes the [`Uuid`] as a lower-case simple string to `buffer`,\n and returns the subslice of the buffer that contains the encoded UUID.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\adapter\\mod.rs","byte_start":87261,"byte_end":87273,"line_start":606,"line_end":606,"column_start":12,"column_end":24},"name":"encode_upper","qualname":"<SimpleRef>::encode_upper","value":"fn <'buf> (&self, buffer: &'buf mut [u8]) -> &'buf mut str","parent":null,"children":[],"decl_id":null,"docs":" Writes the [`Uuid`] as an upper-case simple string to `buffer`,\n and returns the subslice of the buffer that contains the encoded UUID.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":156},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\adapter\\mod.rs","byte_start":87502,"byte_end":87508,"line_start":615,"line_end":615,"column_start":15,"column_end":21},"name":"LENGTH","qualname":"::adapter::Urn::LENGTH","value":"usize","parent":{"krate":0,"index":155},"children":[],"decl_id":null,"docs":" The length of a URN [`Uuid`] string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":157},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\adapter\\mod.rs","byte_start":87662,"byte_end":87671,"line_start":621,"line_end":621,"column_start":18,"column_end":27},"name":"from_uuid","qualname":"<Urn>::from_uuid","value":"fn (uuid: Uuid) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a [`Urn`] from a [`Uuid`].","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\adapter\\mod.rs","byte_start":89276,"byte_end":89288,"line_start":670,"line_end":670,"column_start":12,"column_end":24},"name":"encode_lower","qualname":"<Urn>::encode_lower","value":"fn <'buf> (&self, buffer: &'buf mut [u8]) -> &'buf mut str","parent":null,"children":[],"decl_id":null,"docs":" Writes the [`Uuid`] as a lower-case URN string to\n `buffer`, and returns the subslice of the buffer that contains the\n encoded UUID.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\adapter\\mod.rs","byte_start":90963,"byte_end":90975,"line_start":719,"line_end":719,"column_start":12,"column_end":24},"name":"encode_upper","qualname":"<Urn>::encode_upper","value":"fn <'buf> (&self, buffer: &'buf mut [u8]) -> &'buf mut str","parent":null,"children":[],"decl_id":null,"docs":" Writes the [`Uuid`] as an upper-case URN string to\n `buffer`, and returns the subslice of the buffer that contains the\n encoded UUID.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":164},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\adapter\\mod.rs","byte_start":91266,"byte_end":91272,"line_start":729,"line_end":729,"column_start":15,"column_end":21},"name":"LENGTH","qualname":"::adapter::UrnRef::<'a>::LENGTH","value":"usize","parent":{"krate":0,"index":162},"children":[],"decl_id":null,"docs":" The length of a URN [`Uuid`] string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":165},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\adapter\\mod.rs","byte_start":91445,"byte_end":91458,"line_start":735,"line_end":735,"column_start":18,"column_end":31},"name":"from_uuid_ref","qualname":"<UrnRef>::from_uuid_ref","value":"fn (uuid: &'a Uuid) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a [`UrnRef`] from a [`Uuid`] reference.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\adapter\\mod.rs","byte_start":93071,"byte_end":93083,"line_start":784,"line_end":784,"column_start":12,"column_end":24},"name":"encode_lower","qualname":"<UrnRef>::encode_lower","value":"fn <'buf> (&self, buffer: &'buf mut [u8]) -> &'buf mut str","parent":null,"children":[],"decl_id":null,"docs":" Writes the [`Uuid`] as a lower-case URN string to\n `buffer`, and returns the subslice of the buffer that contains the\n encoded UUID.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\adapter\\mod.rs","byte_start":94757,"byte_end":94769,"line_start":833,"line_end":833,"column_start":12,"column_end":24},"name":"encode_upper","qualname":"<UrnRef>::encode_upper","value":"fn <'buf> (&self, buffer: &'buf mut [u8]) -> &'buf mut str","parent":null,"children":[],"decl_id":null,"docs":" Writes the [`Uuid`] as an upper-case URN string to\n `buffer`, and returns the subslice of the buffer that contains the\n encoded UUID.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":211},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\v4.rs","byte_start":105618,"byte_end":105624,"line_start":25,"line_end":25,"column_start":12,"column_end":18},"name":"new_v4","qualname":"<Uuid>::new_v4","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a random UUID.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":220},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\lib.rs","byte_start":5978,"byte_end":5983,"line_start":200,"line_end":200,"column_start":10,"column_end":15},"name":"Bytes","qualname":"::Bytes","value":"[u8; 16]","parent":null,"children":[],"decl_id":null,"docs":" A 128-bit (16 byte) buffer containing the ID.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":671},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\lib.rs","byte_start":6162,"byte_end":6165,"line_start":206,"line_end":206,"column_start":5,"column_end":8},"name":"Nil","qualname":"::Version::Nil","value":"Version::Nil","parent":{"krate":0,"index":670},"children":[],"decl_id":null,"docs":" Special case for `nil` UUID.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":674},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\lib.rs","byte_start":6207,"byte_end":6210,"line_start":208,"line_end":208,"column_start":5,"column_end":8},"name":"Mac","qualname":"::Version::Mac","value":"Version::Mac","parent":{"krate":0,"index":670},"children":[],"decl_id":null,"docs":" Version 1: MAC address.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":676},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\lib.rs","byte_start":6249,"byte_end":6252,"line_start":210,"line_end":210,"column_start":5,"column_end":8},"name":"Dce","qualname":"::Version::Dce","value":"Version::Dce","parent":{"krate":0,"index":670},"children":[],"decl_id":null,"docs":" Version 2: DCE Security.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":678},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\lib.rs","byte_start":6287,"byte_end":6290,"line_start":212,"line_end":212,"column_start":5,"column_end":8},"name":"Md5","qualname":"::Version::Md5","value":"Version::Md5","parent":{"krate":0,"index":670},"children":[],"decl_id":null,"docs":" Version 3: MD5 hash.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":680},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\lib.rs","byte_start":6323,"byte_end":6329,"line_start":214,"line_end":214,"column_start":5,"column_end":11},"name":"Random","qualname":"::Version::Random","value":"Version::Random","parent":{"krate":0,"index":670},"children":[],"decl_id":null,"docs":" Version 4: Random.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":682},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\lib.rs","byte_start":6366,"byte_end":6370,"line_start":216,"line_end":216,"column_start":5,"column_end":9},"name":"Sha1","qualname":"::Version::Sha1","value":"Version::Sha1","parent":{"krate":0,"index":670},"children":[],"decl_id":null,"docs":" Version 5: SHA-1 hash.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":670},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\lib.rs","byte_start":6111,"byte_end":6118,"line_start":204,"line_end":204,"column_start":10,"column_end":17},"name":"Version","qualname":"::Version","value":"Version::{Nil, Mac, Dce, Md5, Random, Sha1}","parent":null,"children":[{"krate":0,"index":671},{"krate":0,"index":674},{"krate":0,"index":676},{"krate":0,"index":678},{"krate":0,"index":680},{"krate":0,"index":682}],"decl_id":null,"docs":" The version of the UUID, denoting the generating algorithm.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":693},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\lib.rs","byte_start":6531,"byte_end":6534,"line_start":223,"line_end":223,"column_start":5,"column_end":8},"name":"NCS","qualname":"::Variant::NCS","value":"Variant::NCS","parent":{"krate":0,"index":692},"children":[],"decl_id":null,"docs":" Reserved by the NCS for backward compatibility.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":696},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\lib.rs","byte_start":6605,"byte_end":6612,"line_start":225,"line_end":225,"column_start":5,"column_end":12},"name":"RFC4122","qualname":"::Variant::RFC4122","value":"Variant::RFC4122","parent":{"krate":0,"index":692},"children":[],"decl_id":null,"docs":" As described in the RFC4122 Specification (default).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":698},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\lib.rs","byte_start":6676,"byte_end":6685,"line_start":227,"line_end":227,"column_start":5,"column_end":14},"name":"Microsoft","qualname":"::Variant::Microsoft","value":"Variant::Microsoft","parent":{"krate":0,"index":692},"children":[],"decl_id":null,"docs":" Reserved by Microsoft for backward compatibility.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":700},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\lib.rs","byte_start":6730,"byte_end":6736,"line_start":229,"line_end":229,"column_start":5,"column_end":11},"name":"Future","qualname":"::Variant::Future","value":"Variant::Future","parent":{"krate":0,"index":692},"children":[],"decl_id":null,"docs":" Reserved for future expansion.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":692},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\lib.rs","byte_start":6461,"byte_end":6468,"line_start":221,"line_end":221,"column_start":10,"column_end":17},"name":"Variant","qualname":"::Variant","value":"Variant::{NCS, RFC4122, Microsoft, Future}","parent":null,"children":[{"krate":0,"index":693},{"krate":0,"index":696},{"krate":0,"index":698},{"krate":0,"index":700}],"decl_id":null,"docs":" The reserved variants of UUIDs.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":710},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\lib.rs","byte_start":6857,"byte_end":6861,"line_start":234,"line_end":234,"column_start":12,"column_end":16},"name":"Uuid","qualname":"::Uuid","value":"","parent":null,"children":[],"decl_id":null,"docs":" A Universally Unique Identifier (UUID).\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":223},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\lib.rs","byte_start":6950,"byte_end":6963,"line_start":238,"line_end":238,"column_start":15,"column_end":28},"name":"NAMESPACE_DNS","qualname":"::Uuid::NAMESPACE_DNS","value":"Self","parent":{"krate":0,"index":222},"children":[],"decl_id":null,"docs":" UUID namespace for Domain Name System (DNS).\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":224},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\lib.rs","byte_start":7172,"byte_end":7185,"line_start":244,"line_end":244,"column_start":15,"column_end":28},"name":"NAMESPACE_OID","qualname":"::Uuid::NAMESPACE_OID","value":"Self","parent":{"krate":0,"index":222},"children":[],"decl_id":null,"docs":" UUID namespace for ISO Object Identifiers (OIDs).\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":225},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\lib.rs","byte_start":7397,"byte_end":7410,"line_start":250,"line_end":250,"column_start":15,"column_end":28},"name":"NAMESPACE_URL","qualname":"::Uuid::NAMESPACE_URL","value":"Self","parent":{"krate":0,"index":222},"children":[],"decl_id":null,"docs":" UUID namespace for Uniform Resource Locators (URLs).\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":226},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\lib.rs","byte_start":7621,"byte_end":7635,"line_start":256,"line_end":256,"column_start":15,"column_end":29},"name":"NAMESPACE_X500","qualname":"::Uuid::NAMESPACE_X500","value":"Self","parent":{"krate":0,"index":222},"children":[],"decl_id":null,"docs":" UUID namespace for X.500 Distinguished Names (DNs).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":227},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\lib.rs","byte_start":8075,"byte_end":8086,"line_start":267,"line_end":267,"column_start":12,"column_end":23},"name":"get_variant","qualname":"<Uuid>::get_variant","value":"fn (&self) -> Option<Variant>","parent":null,"children":[],"decl_id":null,"docs":" Returns the variant of the UUID structure.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":228},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\lib.rs","byte_start":8972,"byte_end":8987,"line_start":288,"line_end":288,"column_start":18,"column_end":33},"name":"get_version_num","qualname":"<Uuid>::get_version_num","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the version number of the UUID.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":229},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\lib.rs","byte_start":9184,"byte_end":9195,"line_start":295,"line_end":295,"column_start":12,"column_end":23},"name":"get_version","qualname":"<Uuid>::get_version","value":"fn (&self) -> Option<Version>","parent":null,"children":[],"decl_id":null,"docs":" Returns the version of the UUID.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":230},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\lib.rs","byte_start":11264,"byte_end":11273,"line_start":347,"line_end":347,"column_start":12,"column_end":21},"name":"as_fields","qualname":"<Uuid>::as_fields","value":"fn (&self) -> (u32, u16, u16, &[u8; 8])","parent":null,"children":[],"decl_id":null,"docs":" Returns the four field values of the UUID in big-endian order.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":234},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\lib.rs","byte_start":12430,"byte_end":12442,"line_start":385,"line_end":385,"column_start":12,"column_end":24},"name":"to_fields_le","qualname":"<Uuid>::to_fields_le","value":"fn (&self) -> (u32, u16, u16, &[u8; 8])","parent":null,"children":[],"decl_id":null,"docs":" Returns the four field values of the UUID in little-endian order.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":238},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\lib.rs","byte_start":13474,"byte_end":13481,"line_start":418,"line_end":418,"column_start":12,"column_end":19},"name":"as_u128","qualname":"<Uuid>::as_u128","value":"fn (&self) -> u128","parent":null,"children":[],"decl_id":null,"docs":" Returns a 128bit value containing the UUID data.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":239},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\lib.rs","byte_start":14965,"byte_end":14975,"line_start":456,"line_end":456,"column_start":12,"column_end":22},"name":"to_u128_le","qualname":"<Uuid>::to_u128_le","value":"fn (&self) -> u128","parent":null,"children":[],"decl_id":null,"docs":" Returns a 128bit little-endian value containing the UUID data.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":240},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\lib.rs","byte_start":15893,"byte_end":15901,"line_start":476,"line_end":476,"column_start":18,"column_end":26},"name":"as_bytes","qualname":"<Uuid>::as_bytes","value":"fn (&self) -> &Bytes","parent":null,"children":[],"decl_id":null,"docs":" Returns an array of 16 octets containing the UUID data.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":241},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\lib.rs","byte_start":15989,"byte_end":15995,"line_start":481,"line_end":481,"column_start":12,"column_end":18},"name":"is_nil","qualname":"<Uuid>::is_nil","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests if the UUID is nil.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":243},"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\lib.rs","byte_start":16846,"byte_end":16859,"line_start":511,"line_end":511,"column_start":18,"column_end":31},"name":"encode_buffer","qualname":"<Uuid>::encode_buffer","value":"fn () -> [u8; adapter::Urn::LENGTH]","parent":null,"children":[],"decl_id":null,"docs":" A buffer that can be used for `encode_...` calls, that is\n guaranteed to be long enough for any of the adapters.","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\builder\\error.rs","byte_start":43477,"byte_end":43482,"line_start":12,"line_end":12,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\builder\\error.rs","byte_start":43955,"byte_end":43960,"line_start":34,"line_end":34,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":13}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\builder\\error.rs","byte_start":44304,"byte_end":44309,"line_start":51,"line_end":51,"column_start":27,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\builder\\mod.rs","byte_start":31711,"byte_end":31715,"line_start":21,"line_end":21,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":21},{"krate":0,"index":23},{"krate":0,"index":25},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":32}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\builder\\mod.rs","byte_start":38248,"byte_end":38255,"line_start":283,"line_end":283,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":38},{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":45}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\error.rs","byte_start":45207,"byte_end":45212,"line_start":31,"line_end":31,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":52}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\error.rs","byte_start":45329,"byte_end":45334,"line_start":37,"line_end":37,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":54}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\error.rs","byte_start":45444,"byte_end":45449,"line_start":43,"line_end":43,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":56}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\error.rs","byte_start":45802,"byte_end":45807,"line_start":57,"line_end":57,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":61}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\parser\\error.rs","byte_start":64125,"byte_end":64130,"line_start":78,"line_end":78,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":66}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\parser\\error.rs","byte_start":64508,"byte_end":64522,"line_start":89,"line_end":89,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":68}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\parser\\error.rs","byte_start":64792,"byte_end":64797,"line_start":98,"line_end":98,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":70}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\parser\\error.rs","byte_start":66192,"byte_end":66197,"line_start":147,"line_end":147,"column_start":27,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\parser\\mod.rs","byte_start":47736,"byte_end":47740,"line_start":51,"line_end":51,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":86}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\adapter\\mod.rs","byte_start":69902,"byte_end":69906,"line_start":68,"line_end":68,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\adapter\\mod.rs","byte_start":73326,"byte_end":73336,"line_start":180,"line_end":180,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":126},{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":130}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\adapter\\mod.rs","byte_start":76827,"byte_end":76840,"line_start":287,"line_end":287,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":136},{"krate":0,"index":138}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\adapter\\mod.rs","byte_start":80584,"byte_end":80590,"line_start":401,"line_end":401,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":145}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\adapter\\mod.rs","byte_start":83972,"byte_end":83981,"line_start":506,"line_end":506,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":153}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\adapter\\mod.rs","byte_start":87391,"byte_end":87394,"line_start":611,"line_end":611,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":160}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\adapter\\mod.rs","byte_start":91148,"byte_end":91154,"line_start":725,"line_end":725,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":168}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\serde_support.rs","byte_start":102095,"byte_end":102099,"line_start":17,"line_end":17,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":182}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\serde_support.rs","byte_start":102505,"byte_end":102509,"line_start":32,"line_end":32,"column_start":32,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":187}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\serde_support.rs","byte_start":102741,"byte_end":102758,"line_start":39,"line_end":39,"column_start":44,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":193},{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":197}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\serde_support.rs","byte_start":103640,"byte_end":103656,"line_start":68,"line_end":68,"column_start":44,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":205}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\v4.rs","byte_start":105017,"byte_end":105021,"line_start":4,"line_end":4,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":211}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\lib.rs","byte_start":6876,"byte_end":6880,"line_start":236,"line_end":236,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":225},{"krate":0,"index":226},{"krate":0,"index":227},{"krate":0,"index":228},{"krate":0,"index":229},{"krate":0,"index":230},{"krate":0,"index":234},{"krate":0,"index":238},{"krate":0,"index":239},{"krate":0,"index":240},{"krate":0,"index":241},{"krate":0,"index":243}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\lib.rs","byte_start":16957,"byte_end":16961,"line_start":516,"line_end":516,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":247}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\lib.rs","byte_start":17108,"byte_end":17112,"line_start":523,"line_end":523,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":249}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\lib.rs","byte_start":17245,"byte_end":17252,"line_start":529,"line_end":529,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":251}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\lib.rs","byte_start":17592,"byte_end":17596,"line_start":540,"line_end":540,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":253}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\lib.rs","byte_start":17751,"byte_end":17755,"line_start":546,"line_end":546,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":255}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\lib.rs","byte_start":17923,"byte_end":17927,"line_start":553,"line_end":553,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":257},{"krate":0,"index":258}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\lib.rs","byte_start":18074,"byte_end":18078,"line_start":561,"line_end":561,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":260}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\lib.rs","byte_start":4969,"byte_end":4976,"line_start":149,"line_end":149,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":96}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\adapter\\mod.rs","byte_start":68383,"byte_end":68390,"line_start":18,"line_end":18,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":101}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\builder\\error.rs","byte_start":43477,"byte_end":43482,"line_start":12,"line_end":12,"column_start":6,"column_end":11},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":261},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\builder\\error.rs","byte_start":43955,"byte_end":43960,"line_start":34,"line_end":34,"column_start":23,"column_end":28},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":261},"to":{"krate":1,"index":7648}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\builder\\error.rs","byte_start":44304,"byte_end":44309,"line_start":51,"line_end":51,"column_start":27,"column_end":32},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":261},"to":{"krate":4,"index":1592}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\builder\\mod.rs","byte_start":31711,"byte_end":31715,"line_start":21,"line_end":21,"column_start":6,"column_end":10},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":710},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\builder\\mod.rs","byte_start":38248,"byte_end":38255,"line_start":283,"line_end":283,"column_start":6,"column_end":13},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":278},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\error.rs","byte_start":45207,"byte_end":45212,"line_start":31,"line_end":31,"column_start":31,"column_end":36},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":283},"to":{"krate":1,"index":2258}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\error.rs","byte_start":45329,"byte_end":45334,"line_start":37,"line_end":37,"column_start":30,"column_end":35},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":283},"to":{"krate":1,"index":2258}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\error.rs","byte_start":45444,"byte_end":45449,"line_start":43,"line_end":43,"column_start":23,"column_end":28},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":283},"to":{"krate":1,"index":7648}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\error.rs","byte_start":45802,"byte_end":45807,"line_start":57,"line_end":57,"column_start":27,"column_end":32},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":283},"to":{"krate":4,"index":1592}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\parser\\error.rs","byte_start":64125,"byte_end":64130,"line_start":78,"line_end":78,"column_start":6,"column_end":11},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":321},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\parser\\error.rs","byte_start":64508,"byte_end":64522,"line_start":89,"line_end":89,"column_start":23,"column_end":37},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":352},"to":{"krate":1,"index":7648}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\parser\\error.rs","byte_start":64792,"byte_end":64797,"line_start":98,"line_end":98,"column_start":23,"column_end":28},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":321},"to":{"krate":1,"index":7648}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\parser\\error.rs","byte_start":66192,"byte_end":66197,"line_start":147,"line_end":147,"column_start":27,"column_end":32},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":321},"to":{"krate":4,"index":1592}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\parser\\mod.rs","byte_start":47736,"byte_end":47740,"line_start":51,"line_end":51,"column_start":6,"column_end":10},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":710},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\adapter\\mod.rs","byte_start":69902,"byte_end":69906,"line_start":68,"line_end":68,"column_start":6,"column_end":10},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":710},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\adapter\\mod.rs","byte_start":73326,"byte_end":73336,"line_start":180,"line_end":180,"column_start":6,"column_end":16},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":403},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\adapter\\mod.rs","byte_start":76827,"byte_end":76840,"line_start":287,"line_end":287,"column_start":10,"column_end":23},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":431},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\adapter\\mod.rs","byte_start":80584,"byte_end":80590,"line_start":401,"line_end":401,"column_start":6,"column_end":12},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":468},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\adapter\\mod.rs","byte_start":83972,"byte_end":83981,"line_start":506,"line_end":506,"column_start":10,"column_end":19},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":496},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\adapter\\mod.rs","byte_start":87391,"byte_end":87394,"line_start":611,"line_end":611,"column_start":6,"column_end":9},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":533},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\adapter\\mod.rs","byte_start":91148,"byte_end":91154,"line_start":725,"line_end":725,"column_start":10,"column_end":16},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":561},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\serde_support.rs","byte_start":102095,"byte_end":102099,"line_start":17,"line_end":17,"column_start":20,"column_end":24},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":710},"to":{"krate":14,"index":1680}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\serde_support.rs","byte_start":102505,"byte_end":102509,"line_start":32,"line_end":32,"column_start":32,"column_end":36},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":710},"to":{"krate":14,"index":1192}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\serde_support.rs","byte_start":102741,"byte_end":102758,"line_start":39,"line_end":39,"column_start":44,"column_end":61},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":189},"to":{"krate":14,"index":1276}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\serde_support.rs","byte_start":103640,"byte_end":103656,"line_start":68,"line_end":68,"column_start":44,"column_end":60},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":199},"to":{"krate":14,"index":1276}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\v4.rs","byte_start":105017,"byte_end":105021,"line_start":4,"line_end":4,"column_start":6,"column_end":10},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":710},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\lib.rs","byte_start":6876,"byte_end":6880,"line_start":236,"line_end":236,"column_start":6,"column_end":10},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":710},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\lib.rs","byte_start":16957,"byte_end":16961,"line_start":516,"line_end":516,"column_start":21,"column_end":25},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":710},"to":{"krate":1,"index":7643}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\lib.rs","byte_start":17108,"byte_end":17112,"line_start":523,"line_end":523,"column_start":23,"column_end":27},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":710},"to":{"krate":1,"index":7648}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\lib.rs","byte_start":17245,"byte_end":17252,"line_start":529,"line_end":529,"column_start":23,"column_end":30},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":692},"to":{"krate":1,"index":7648}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\lib.rs","byte_start":17592,"byte_end":17596,"line_start":540,"line_end":540,"column_start":24,"column_end":28},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":710},"to":{"krate":1,"index":7654}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\lib.rs","byte_start":17751,"byte_end":17755,"line_start":546,"line_end":546,"column_start":24,"column_end":28},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":710},"to":{"krate":1,"index":7656}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\lib.rs","byte_start":17923,"byte_end":17927,"line_start":553,"line_end":553,"column_start":23,"column_end":27},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":710},"to":{"krate":1,"index":6815}},{"span":{"file_name":"C:\\Users\\Zrus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\uuid-0.8.1\\src\\lib.rs","byte_start":18074,"byte_end":18078,"line_start":561,"line_end":561,"column_start":18,"column_end":22},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":710},"to":{"krate":1,"index":2206}}]}